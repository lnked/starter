{"version":3,"sources":["../../src/serializer/serializer.js"],"names":["t","Serializer","constructor","realm","serializerOptions","useAbstractInterpretation","generator","logger","internalDebug","modules","logModules","delayUnsupportedRequires","accelerateUnsupportedRequires","functions","moduleTracer","trace","tracers","push","options","react","usedReactElementKeys","Set","_execute","sources","sourceMaps","res","code","$GlobalEnv","executeSources","ast","realmPreludeGenerator","preludeGenerator","forbiddenNames","nameGenerator","node","isIdentifier","add","name","context","pushContext","logCompletion","popContext","diagnostic","location","handleError","init","realmStatistics","statistics","result","total","measure","verbose","logInformation","environmentRecordIdAfterGlobalCode","nextId","hasErrors","undefined","resolveInitializedModules","checkThatFunctionsAreIndependent","reactStatistics","enabled","optimizeReactComponentTreeRoots","initializeMoreModules","heapGraph","additionalFunctionValuesAndEffects","getAdditionalFunctionValuesToEffects","referentializer","createNameGenerator","residualHeapVisitor","deepTraversal","visitRoots","residualHeapValueIdentifiers","values","keys","heapGraphFormat","heapRefCounter","heapGraphGenerator","getResult","generateResult","inlineExpressions","initPass1","referenceCounts","inspector","functionInstances","classMethodInstances","functionInfos","referencedDeclaredValues","additionalFunctionValueInfos","declarativeEnvironmentRecordsBindings","generatorDAG","conditionalFeasibility","additionalGeneratorRoots","serialize","initPass2","TargetSerializer","lazyObjectsRuntime","resetBeforePass","serializePass","stripFlow","generated","babelGenerate","map","logStatistics","log","logSerializerPerformanceTrackers","forcingGC","pf","time","memory","Math","round"],"mappings":"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","file":"serializer.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { EnvironmentRecord } from \"../environment.js\";\nimport { Realm, ExecutionContext } from \"../realm.js\";\nimport { CompilerDiagnostic, FatalError } from \"../errors.js\";\nimport type { SourceFile } from \"../types.js\";\nimport { AbruptCompletion } from \"../completions.js\";\nimport { Generator } from \"../utils/generator.js\";\nimport generate from \"babel-generator\";\nimport traverseFast from \"../utils/traverse-fast.js\";\nimport invariant from \"../invariant.js\";\nimport type { SerializerOptions } from \"../options.js\";\nimport { SerializerStatistics } from \"./statistics.js\";\nimport { type ReactSerializerState, type SerializedResult, ReactStatistics } from \"./types.js\";\nimport { Functions } from \"./functions.js\";\nimport { Logger } from \"../utils/logger.js\";\nimport { Modules } from \"../utils/modules.js\";\nimport { stripFlowTypeAnnotations } from \"../utils/flow.js\";\nimport { LoggingTracer } from \"./LoggingTracer.js\";\nimport { ResidualHeapVisitor } from \"./ResidualHeapVisitor.js\";\nimport { ResidualHeapSerializer } from \"./ResidualHeapSerializer.js\";\nimport { ResidualHeapValueIdentifiers } from \"./ResidualHeapValueIdentifiers.js\";\nimport { LazyObjectsSerializer } from \"./LazyObjectsSerializer.js\";\nimport * as t from \"babel-types\";\nimport { ResidualHeapRefCounter } from \"./ResidualHeapRefCounter\";\nimport { ResidualHeapGraphGenerator } from \"./ResidualHeapGraphGenerator\";\nimport { Referentializer } from \"./Referentializer.js\";\n\nexport class Serializer {\n  constructor(realm: Realm, serializerOptions: SerializerOptions = {}) {\n    invariant(realm.useAbstractInterpretation);\n    // Start tracking mutations\n    realm.generator = new Generator(realm, \"main\");\n\n    this.realm = realm;\n    this.logger = new Logger(this.realm, !!serializerOptions.internalDebug);\n    this.modules = new Modules(\n      this.realm,\n      this.logger,\n      !!serializerOptions.logModules,\n      !!serializerOptions.delayUnsupportedRequires,\n      !!serializerOptions.accelerateUnsupportedRequires\n    );\n    this.functions = new Functions(this.realm, this.modules.moduleTracer);\n    if (serializerOptions.trace) this.realm.tracers.push(new LoggingTracer(this.realm));\n\n    this.options = serializerOptions;\n    this.react = {\n      usedReactElementKeys: new Set(),\n    };\n  }\n\n  realm: Realm;\n  functions: Functions;\n  logger: Logger;\n  modules: Modules;\n  options: SerializerOptions;\n  react: ReactSerializerState;\n\n  _execute(sources: Array<SourceFile>, sourceMaps?: boolean = false): { [string]: string } {\n    let realm = this.realm;\n    let [res, code] = realm.$GlobalEnv.executeSources(sources, \"script\", ast => {\n      let realmPreludeGenerator = realm.preludeGenerator;\n      invariant(realmPreludeGenerator);\n      let forbiddenNames = realmPreludeGenerator.nameGenerator.forbiddenNames;\n      traverseFast(ast, node => {\n        if (!t.isIdentifier(node)) return false;\n\n        forbiddenNames.add(((node: any): BabelNodeIdentifier).name);\n        return true;\n      });\n    });\n\n    if (res instanceof AbruptCompletion) {\n      let context = new ExecutionContext();\n      realm.pushContext(context);\n      try {\n        this.logger.logCompletion(res);\n      } finally {\n        realm.popContext(context);\n      }\n      let diagnostic = new CompilerDiagnostic(\"Global code may end abruptly\", res.location, \"PP0016\", \"FatalError\");\n      realm.handleError(diagnostic);\n      throw new FatalError();\n    }\n    return code;\n  }\n\n  init(sources: Array<SourceFile>, sourceMaps?: boolean = false): void | SerializedResult {\n    let realmStatistics = this.realm.statistics;\n    invariant(realmStatistics instanceof SerializerStatistics, \"serialization requires SerializerStatistics\");\n    let statistics: SerializerStatistics = realmStatistics;\n\n    let result = statistics.total.measure(() => {\n      // Phase 1: Let's interpret.\n      if (this.realm.react.verbose) {\n        this.logger.logInformation(`Evaluating initialization path...`);\n      }\n\n      let code = this._execute(sources);\n      let environmentRecordIdAfterGlobalCode = EnvironmentRecord.nextId;\n\n      if (this.logger.hasErrors()) return undefined;\n\n      statistics.resolveInitializedModules.measure(() => this.modules.resolveInitializedModules());\n\n      statistics.checkThatFunctionsAreIndependent.measure(() =>\n        this.functions.checkThatFunctionsAreIndependent(environmentRecordIdAfterGlobalCode)\n      );\n\n      let reactStatistics;\n      if (this.realm.react.enabled) {\n        statistics.optimizeReactComponentTreeRoots.measure(() => {\n          reactStatistics = new ReactStatistics();\n          this.functions.optimizeReactComponentTreeRoots(\n            reactStatistics,\n            this.react,\n            environmentRecordIdAfterGlobalCode\n          );\n        });\n      }\n\n      if (this.options.initializeMoreModules) {\n        statistics.initializeMoreModules.measure(() => this.modules.initializeMoreModules());\n        if (this.logger.hasErrors()) return undefined;\n      }\n\n      let heapGraph;\n      let ast = (() => {\n        // We wrap the following in an anonymous function declaration to ensure\n        // that all local variables are locally scoped, and allocated memory cannot\n        // get released when this function returns.\n\n        let additionalFunctionValuesAndEffects = this.functions.getAdditionalFunctionValuesToEffects();\n\n        // Deep traversal of the heap to identify the necessary scope of residual functions\n        let preludeGenerator = this.realm.preludeGenerator;\n        invariant(preludeGenerator !== undefined);\n        let referentializer = new Referentializer(\n          this.realm,\n          this.options,\n          preludeGenerator.createNameGenerator(\"__scope_\"),\n          preludeGenerator.createNameGenerator(\"__get_scope_binding_\")\n        );\n        if (this.realm.react.verbose) {\n          this.logger.logInformation(`Visiting evaluated nodes...`);\n        }\n        let residualHeapVisitor = new ResidualHeapVisitor(\n          this.realm,\n          this.logger,\n          this.modules,\n          additionalFunctionValuesAndEffects,\n          referentializer\n        );\n        statistics.deepTraversal.measure(() => residualHeapVisitor.visitRoots());\n        if (this.logger.hasErrors()) return undefined;\n\n        if (this.realm.react.verbose) {\n          this.logger.logInformation(`Serializing evaluated nodes...`);\n        }\n        const realmPreludeGenerator = this.realm.preludeGenerator;\n        invariant(realmPreludeGenerator);\n        const residualHeapValueIdentifiers = new ResidualHeapValueIdentifiers(\n          residualHeapVisitor.values.keys(),\n          realmPreludeGenerator\n        );\n\n        if (this.options.heapGraphFormat) {\n          const heapRefCounter = new ResidualHeapRefCounter(\n            this.realm,\n            this.logger,\n            this.modules,\n            additionalFunctionValuesAndEffects,\n            referentializer\n          );\n          heapRefCounter.visitRoots();\n\n          const heapGraphGenerator = new ResidualHeapGraphGenerator(\n            this.realm,\n            this.logger,\n            this.modules,\n            additionalFunctionValuesAndEffects,\n            residualHeapValueIdentifiers,\n            heapRefCounter.getResult(),\n            referentializer\n          );\n          heapGraphGenerator.visitRoots();\n          invariant(this.options.heapGraphFormat);\n          heapGraph = heapGraphGenerator.generateResult(this.options.heapGraphFormat);\n        }\n\n        // Phase 2: Let's serialize the heap and generate code.\n        // Serialize for the first time in order to gather reference counts\n\n        if (this.options.inlineExpressions) {\n          residualHeapValueIdentifiers.initPass1();\n          statistics.referenceCounts.measure(() => {\n            new ResidualHeapSerializer(\n              this.realm,\n              this.logger,\n              this.modules,\n              residualHeapValueIdentifiers,\n              residualHeapVisitor.inspector,\n              residualHeapVisitor.values,\n              residualHeapVisitor.functionInstances,\n              residualHeapVisitor.classMethodInstances,\n              residualHeapVisitor.functionInfos,\n              this.options,\n              residualHeapVisitor.referencedDeclaredValues,\n              additionalFunctionValuesAndEffects,\n              residualHeapVisitor.additionalFunctionValueInfos,\n              residualHeapVisitor.declarativeEnvironmentRecordsBindings,\n              this.react,\n              referentializer,\n              residualHeapVisitor.generatorDAG,\n              residualHeapVisitor.conditionalFeasibility,\n              residualHeapVisitor.additionalGeneratorRoots\n            ).serialize();\n          });\n          if (this.logger.hasErrors()) return undefined;\n          residualHeapValueIdentifiers.initPass2();\n        }\n\n        // Serialize for a second time, using reference counts to minimize number of generated identifiers\n        const TargetSerializer =\n          this.options.lazyObjectsRuntime != null ? LazyObjectsSerializer : ResidualHeapSerializer;\n        statistics.resetBeforePass();\n        return statistics.serializePass.measure(() =>\n          new TargetSerializer(\n            this.realm,\n            this.logger,\n            this.modules,\n            residualHeapValueIdentifiers,\n            residualHeapVisitor.inspector,\n            residualHeapVisitor.values,\n            residualHeapVisitor.functionInstances,\n            residualHeapVisitor.classMethodInstances,\n            residualHeapVisitor.functionInfos,\n            this.options,\n            residualHeapVisitor.referencedDeclaredValues,\n            additionalFunctionValuesAndEffects,\n            residualHeapVisitor.additionalFunctionValueInfos,\n            residualHeapVisitor.declarativeEnvironmentRecordsBindings,\n            this.react,\n            referentializer,\n            residualHeapVisitor.generatorDAG,\n            residualHeapVisitor.conditionalFeasibility,\n            residualHeapVisitor.additionalGeneratorRoots\n          ).serialize()\n        );\n      })();\n\n      invariant(ast !== undefined);\n      if (this.realm.stripFlow) {\n        stripFlowTypeAnnotations(ast);\n      }\n\n      // the signature for generate is not complete, hence the any\n      let generated = statistics.babelGenerate.measure(() => generate(ast, { sourceMaps: sourceMaps }, (code: any)));\n\n      invariant(!this.logger.hasErrors());\n      return {\n        code: generated.code,\n        map: generated.map,\n        statistics,\n        reactStatistics,\n        heapGraph,\n      };\n    });\n\n    if (this.options.logStatistics) {\n      statistics.log();\n      statistics.logSerializerPerformanceTrackers(\n        \"time statistics\",\n        statistics.forcingGC\n          ? \"Time statistics are skewed because of forced garbage collections; remove --expose-gc flag from node.js invocation to disable forced garbage collections.\"\n          : undefined,\n        pf => `${pf.time}ms`\n      );\n      statistics.logSerializerPerformanceTrackers(\n        \"memory statistics\",\n        statistics.forcingGC\n          ? undefined\n          : \"Memory statistics are unreliable because garbage collections could not be forced; pass --expose-gc to node.js to enable forced garbage collections.\",\n        pf => `${pf.memory > 0 ? \"+\" : \"\"}${Math.round(pf.memory / 1024 / 1024)}MB`\n      );\n    }\n\n    return result;\n  }\n}\n"]}