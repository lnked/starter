{"version":3,"sources":["../../../src/intrinsics/fb-www/react-mocks.js"],"names":["createMockReact","createMockReactDOM","createMockReactDOMServer","t","reactCode","reactAst","plugins","realm","reactRequireName","reactFactory","GetValue","$GlobalEnv","evaluate","currentOwner","react","intrinsics","ObjectPrototype","factory","$Call","undefined","reactValue","refuseSerialization","name","updatePrototype","context","type","config","children","null","Array","isArray","length","array","ArrayCreate","i","CreateDataPropertyOrThrow","makeFinal","funcValue","defaultValue","consumerObject","providerObject","consumer","createTemporalFromBuildFunction","methodNode","defaultValueNode","callExpression","values","Set","provider","consumerNode","memberExpression","identifier","funcVal","createRef","createRefNode","func","forwardedRef","forwardRefNode","funcNode","abstractHints","set","reactDomRequireName","reactDomValue","genericTemporalFunc","args","reactDomMethod","renderNode","_args","createPortalFunc","reactPortalValue","domNodeValue","requireName","reactDomServerValue","input"],"mappings":";;;;;QA0cgBA,e,GAAAA,e;QAmJAC,kB,GAAAA,kB;QAgDAC,wB,GAAAA,wB;;AAjoBhB;;AACA;;AACA;;AAUA;;AACA;;AACA;;AAEA;;AACA;;IAAYC,C;;AACZ;;;;AACA;;;;;;AAEA;AAjCA;;;;;;;;;AAkCA,IAAIC,YAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAjB;AAsaA,IAAIC,WAAW,8BAAgBD,SAAhB,EAA2B,EAAEE,SAAS,CAAC,MAAD,CAAX,EAA3B,CAAf;;AAEO,SAASN,eAAT,CAAyBO,KAAzB,EAAuCC,gBAAvC,EAA8E;AACnF,MAAIC,eAAe,wBAAYC,QAAZ,CAAqBH,KAArB,EAA4BA,MAAMI,UAAN,CAAiBC,QAAjB,CAA0BP,QAA1B,EAAoC,KAApC,CAA5B,CAAnB;AACA,2BAAUI,6DAAV;;AAEA,MAAII,eAAgBN,MAAMO,KAAN,CAAYD,YAAZ,GAA2B,wBAC7CN,KAD6C,EAE7CA,MAAMQ,UAAN,CAAiBC,eAF4B,EAG7C,cAH6C,CAA/C;AAKA;AACA,MAAIC,UAAUR,aAAaS,KAA3B;AACA,2BAAUD,YAAYE,SAAtB;;AAEA,MAAIC,aAAaH,QAAQV,MAAMQ,UAAN,CAAiBI,SAAzB,EAAoC,CACnD,2BAAe,eAAf,EAAgCZ,KAAhC,CADmD,EAEnD,2BAAe,gBAAf,EAAiCA,KAAjC,CAFmD,EAGnD,2BAAe,cAAf,EAA+BA,KAA/B,CAHmD,EAInDM,YAJmD,CAApC,CAAjB;AAMA,2BAAUO,yCAAV;AACAA,aAAWC,mBAAX,GAAiC,IAAjC;;AAEA;AACA,oCAAqBd,KAArB,EAA4Ba,UAA5B,EAAwCZ,gBAAxC,EAA0D,CACxD,WADwD,EAExD,UAFwD,EAGxD,gBAHwD,EAIxD,cAJwD,EAKxD,EAAEc,MAAM,WAAR,EAAqBC,iBAAiB,IAAtC,EALwD,EAMxD,EAAED,MAAM,eAAR,EAAyBC,iBAAiB,IAA1C,EANwD,CAA1D;;AASA,uCACEhB,KADF,EAEEa,UAFF,EAGEZ,gBAHF,EAIE,eAJF,EAKE,CAACgB,OAAD,EAAU,CAACC,IAAD,EAAOC,MAAP,EAAe,GAAGC,QAAlB,CAAV,KAA0C;AACxC,6BAAUF,6BAAV;AACA;AACA,QAAIC,WAAWnB,MAAMQ,UAAN,CAAiBI,SAA5B,IAAyCO,WAAWnB,MAAMQ,UAAN,CAAiBa,IAArE,IAA6EF,WAAWP,SAA5F,EAAuG;AACrGO,eAAS,wBAAgBnB,KAAhB,EAAuBA,MAAMQ,UAAN,CAAiBC,eAAxC,CAAT;AACD;AACD,6BACEU,yCACEA,6CADF,IAEEA,uCAFF,IAGEA,mCAJJ;;AAOA,QAAIG,MAAMC,OAAN,CAAcH,QAAd,CAAJ,EAA6B;AAC3B,UAAIA,SAASI,MAAT,KAAoB,CAAxB,EAA2B;AACzBJ,mBAAWpB,MAAMQ,UAAN,CAAiBI,SAA5B;AACD,OAFD,MAEO,IAAIQ,SAASI,MAAT,KAAoB,CAAxB,EAA2B;AAChCJ,mBAAWA,SAAS,CAAT,CAAX;AACD,OAFM,MAEA;AACL,YAAIK,QAAQ,mBAAOC,WAAP,CAAmB1B,KAAnB,EAA0B,CAA1B,CAAZ;AACA,YAAIwB,SAASJ,SAASI,MAAtB;;AAEA,aAAK,IAAIG,IAAI,CAAb,EAAgBA,IAAIH,MAApB,EAA4BG,GAA5B,EAAiC;AAC/B,6BAAOC,yBAAP,CAAiC5B,KAAjC,EAAwCyB,KAAxC,EAA+C,KAAKE,CAApD,EAAuDP,SAASO,CAAT,CAAvD;AACD;AACDP,mBAAWK,KAAX;AACAL,iBAASS,SAAT;AACD;AACF;AACD,6BAAUT,iCAAV;AACA,WAAO,kCAAmBpB,KAAnB,EAA0BkB,IAA1B,EAAgCC,MAAhC,EAAwCC,QAAxC,CAAP;AACD,GApCH;;AAuCA,uCACEpB,KADF,EAEEa,UAFF,EAGEZ,gBAHF,EAIE,eAJF,EAKE,CAAC6B,SAAD,EAAY,CAACC,eAAe/B,MAAMQ,UAAN,CAAiBI,SAAjC,CAAZ,KAA4D;AAC1D,6BAAUmB,qCAAV;AACA,QAAIC,iBAAiB,wBAAgBhC,KAAhB,EAAuBA,MAAMQ,UAAN,CAAiBC,eAAxC,CAArB;AACA,QAAIwB,iBAAiB,wBAAgBjC,KAAhB,EAAuBA,MAAMQ,UAAN,CAAiBC,eAAxC,CAArB;AACA,QAAIyB,WAAW,sBAAcC,+BAAd,CACbnC,KADa,uBAGb,CAAC8B,SAAD,EAAYC,YAAZ,CAHa,EAIb,CAAC,CAACK,UAAD,EAAaC,gBAAb,CAAD,KAAoC;AAClC,aAAOzC,EAAE0C,cAAF,CAAiBF,UAAjB,EAA6B,CAACC,gBAAD,CAA7B,CAAP;AACD,KANY,CAAf;AAQA,6BAAUH,+CAAV;AACAA,aAASK,MAAT,GAAkB,wBAAiB,IAAIC,GAAJ,CAAQ,CAACR,cAAD,CAAR,CAAjB,CAAlB;;AAEA,QAAIS,WAAW,sBAAcN,+BAAd,CAA8CnC,KAA9C,uBAAkE,CAACkC,QAAD,CAAlE,EAA8E,CAAC,CAACQ,YAAD,CAAD,KAAoB;AAC/G,aAAO9C,EAAE+C,gBAAF,CAAmBD,YAAnB,EAAiC9C,EAAEgD,UAAF,CAAa,UAAb,CAAjC,CAAP;AACD,KAFc,CAAf;AAGA,6BAAUH,+CAAV;AACAA,aAASF,MAAT,GAAkB,wBAAiB,IAAIC,GAAJ,CAAQ,CAACP,cAAD,CAAR,CAAjB,CAAlB;;AAEA,2BAAWO,GAAX,CAAexC,KAAf,EAAsBgC,cAAtB,EAAsC,UAAtC,EAAkD,2BAAe,eAAf,EAAgChC,KAAhC,CAAlD,EAA0F,IAA1F;AACA,2BAAWwC,GAAX,CAAexC,KAAf,EAAsBgC,cAAtB,EAAsC,cAAtC,EAAsDD,YAAtD,EAAoE,IAApE;AACA,2BAAWS,GAAX,CAAexC,KAAf,EAAsBgC,cAAtB,EAAsC,cAAtC,EAAsDD,YAAtD,EAAoE,IAApE;AACA,2BAAWS,GAAX,CAAexC,KAAf,EAAsBgC,cAAtB,EAAsC,aAAtC,EAAqD,wBAAgBhC,KAAhB,EAAuB,CAAvB,CAArD,EAAgF,IAAhF;AACA,2BAAWwC,GAAX,CAAexC,KAAf,EAAsBgC,cAAtB,EAAsC,UAAtC,EAAkDE,QAAlD,EAA4D,IAA5D;;AAEA,2BAAWM,GAAX,CAAexC,KAAf,EAAsBiC,cAAtB,EAAsC,UAAtC,EAAkD,2BAAe,gBAAf,EAAiCjC,KAAjC,CAAlD,EAA2F,IAA3F;AACA,2BAAWwC,GAAX,CAAexC,KAAf,EAAsBiC,cAAtB,EAAsC,SAAtC,EAAiDC,QAAjD,EAA2D,IAA3D;;AAEA,2BAAWM,GAAX,CAAexC,KAAf,EAAsBgC,cAAtB,EAAsC,UAAtC,EAAkDS,QAAlD,EAA4D,IAA5D;;AAEA,WAAOP,QAAP;AACD,GAtCH;;AAyCA,uCAAwBlC,KAAxB,EAA+Ba,UAA/B,EAA2CZ,gBAA3C,EAA6D,WAA7D,EAA0E4C,WAAW;AACnF,QAAIC,YAAY,sBAAcX,+BAAd,CACdnC,KADc,yBAGd,CAAC6C,OAAD,CAHc,EAId,CAAC,CAACE,aAAD,CAAD,KAAqB;AACnB,aAAOnD,EAAE0C,cAAF,CAAiBS,aAAjB,EAAgC,EAAhC,CAAP;AACD,KANa,CAAhB;AAQA,6BAAUD,gDAAV;AACA,WAAOA,SAAP;AACD,GAXD;;AAaA,uCAAwB9C,KAAxB,EAA+Ba,UAA/B,EAA2CZ,gBAA3C,EAA6D,YAA7D,EAA2E,CAAC4C,OAAD,EAAU,CAACG,IAAD,CAAV,KAAqB;AAC9F,QAAIC,eAAe,sBAAcd,+BAAd,CACjBnC,KADiB,yBAGjB,CAAC6C,OAAD,EAAUG,IAAV,CAHiB,EAIjB,CAAC,CAACE,cAAD,EAAiBC,QAAjB,CAAD,KAAgC;AAC9B,aAAOvD,EAAE0C,cAAF,CAAiBY,cAAjB,EAAiC,CAACC,QAAD,CAAjC,CAAP;AACD,KANgB,CAAnB;AAQA,6BAAUF,mDAAV;AACAjD,UAAMO,KAAN,CAAY6C,aAAZ,CAA0BC,GAA1B,CACEJ,YADF,EAEE,kCAAsBpC,UAAtB,EAAkC,YAAlC,EAAgD,CAACmC,IAAD,CAAhD,EAAwDhD,MAAMQ,UAAN,CAAiBI,SAAzE,CAFF;AAIA,WAAOqC,YAAP;AACD,GAfD;;AAiBApC,aAAWC,mBAAX,GAAiC,KAAjC;AACAD,aAAWgB,SAAX;AACA,SAAOhB,UAAP;AACD;;AAEM,SAASnB,kBAAT,CAA4BM,KAA5B,EAA0CsD,mBAA1C,EAAoF;AACzF,MAAIC,gBAAgB,wBAAgBvD,KAAhB,EAAuBA,MAAMQ,UAAN,CAAiBC,eAAxC,CAApB;AACA8C,gBAAczC,mBAAd,GAAoC,IAApC;;AAEA,oCAAqBd,KAArB,EAA4BuD,aAA5B,EAA2CD,mBAA3C;;AAEA,QAAME,sBAAsB,CAACX,OAAD,EAAUY,IAAV,KAAmB;AAC7C,QAAIC,iBAAiB,sBAAcvB,+BAAd,CACnBnC,KADmB,yBAGnB,CAAC6C,OAAD,EAAU,GAAGY,IAAb,CAHmB,EAInB,CAAC,CAACE,UAAD,EAAa,GAAGC,KAAhB,CAAD,KAA4B;AAC1B,aAAOhE,EAAE0C,cAAF,CAAiBqB,UAAjB,EAA+BC,KAA/B,CAAP;AACD,KANkB,CAArB;AAQA,6BAAUF,qDAAV;AACA,WAAOA,cAAP;AACD,GAXD;;AAaA,uCAAwB1D,KAAxB,EAA+BuD,aAA/B,EAA8CD,mBAA9C,EAAmE,QAAnE,EAA6EE,mBAA7E;AACA,uCAAwBxD,KAAxB,EAA+BuD,aAA/B,EAA8CD,mBAA9C,EAAmE,SAAnE,EAA8EE,mBAA9E;AACA,uCAAwBxD,KAAxB,EAA+BuD,aAA/B,EAA8CD,mBAA9C,EAAmE,aAAnE,EAAkFE,mBAAlF;AACA,uCAAwBxD,KAAxB,EAA+BuD,aAA/B,EAA8CD,mBAA9C,EAAmE,wBAAnE,EAA6FE,mBAA7F;;AAEA,QAAMK,mBAAmB,CAAChB,OAAD,EAAU,CAACiB,gBAAD,EAAmBC,YAAnB,CAAV,KAA+C;AACtE,QAAIL,iBAAiB,sBAAcvB,+BAAd,CACnBnC,KADmB,uBAGnB,CAAC6C,OAAD,EAAUiB,gBAAV,EAA4BC,YAA5B,CAHmB,EAInB,CAAC,CAACJ,UAAD,EAAa,GAAGC,KAAhB,CAAD,KAA4B;AAC1B,aAAOhE,EAAE0C,cAAF,CAAiBqB,UAAjB,EAA+BC,KAA/B,CAAP;AACD,KANkB,CAArB;AAQA,6BAAUF,qDAAV;AACA1D,UAAMO,KAAN,CAAY6C,aAAZ,CAA0BC,GAA1B,CACEK,cADF,EAEE,kCAAsBH,aAAtB,EAAqC,cAArC,EAAqD,CAACO,gBAAD,EAAmBC,YAAnB,CAArD,EAAuF/D,MAAMQ,UAAN,CAAiBI,SAAxG,CAFF;AAIA,WAAO8C,cAAP;AACD,GAfD;;AAiBA,uCAAwB1D,KAAxB,EAA+BuD,aAA/B,EAA8CD,mBAA9C,EAAmE,cAAnE,EAAmFO,gBAAnF;;AAEAN,gBAAczC,mBAAd,GAAoC,KAApC;AACAyC,gBAAc1B,SAAd;AACA,SAAO0B,aAAP;AACD;;AAEM,SAAS5D,wBAAT,CAAkCK,KAAlC,EAAgDgE,WAAhD,EAAkF;AACvF,MAAIC,sBAAsB,wBAAgBjE,KAAhB,EAAuBA,MAAMQ,UAAN,CAAiBC,eAAxC,CAA1B;AACAwD,sBAAoBnD,mBAApB,GAA0C,IAA1C;;AAEA,oCAAqBd,KAArB,EAA4BiE,mBAA5B,EAAiDD,WAAjD;;AAEA,QAAMR,sBAAsB,CAACX,OAAD,EAAUY,IAAV,KAAmB;AAC7C,QAAIC,iBAAiB,sBAAcvB,+BAAd,CACnBnC,KADmB,yBAGnB,CAAC6C,OAAD,EAAU,GAAGY,IAAb,CAHmB,EAInB,CAAC,CAACE,UAAD,EAAa,GAAGC,KAAhB,CAAD,KAA4B;AAC1B,aAAOhE,EAAE0C,cAAF,CAAiBqB,UAAjB,EAA+BC,KAA/B,CAAP;AACD,KANkB,CAArB;AAQA,6BAAUF,qDAAV;AACA,WAAOA,cAAP;AACD,GAXD;;AAaA,uCAAwB1D,KAAxB,EAA+BiE,mBAA/B,EAAoDD,WAApD,EAAiE,gBAAjE,EAAmF,CAACnB,OAAD,EAAU,CAACqB,KAAD,CAAV,KAAsB;AACvG,QAAIA,wCAAgC,2BAAeA,KAAf,CAApC,EAA2D;AACzD,aAAO,+BAAelE,KAAf,EAAsBkE,KAAtB,EAA6B,KAA7B,CAAP;AACD;AACD,WAAOV,oBAAoBX,OAApB,EAA6B,CAACqB,KAAD,CAA7B,CAAP;AACD,GALD;AAMA,uCAAwBlE,KAAxB,EAA+BiE,mBAA/B,EAAoDD,WAApD,EAAiE,sBAAjE,EAAyF,CAACnB,OAAD,EAAU,CAACqB,KAAD,CAAV,KAAsB;AAC7G,QAAIA,wCAAgC,2BAAeA,KAAf,CAApC,EAA2D;AACzD,aAAO,+BAAelE,KAAf,EAAsBkE,KAAtB,EAA6B,IAA7B,CAAP;AACD;AACD,WAAOV,oBAAoBX,OAApB,EAA6B,CAACqB,KAAD,CAA7B,CAAP;AACD,GALD;AAMA,uCAAwBlE,KAAxB,EAA+BiE,mBAA/B,EAAoDD,WAApD,EAAiE,oBAAjE,EAAuFR,mBAAvF;AACA,uCAAwBxD,KAAxB,EAA+BiE,mBAA/B,EAAoDD,WAApD,EAAiE,0BAAjE,EAA6FR,mBAA7F;;AAEAS,sBAAoBnD,mBAApB,GAA0C,KAA1C;AACAmD,sBAAoBpC,SAApB;AACA,SAAOoC,mBAAP;AACD","file":"react-mocks.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { parseExpression } from \"babylon\";\nimport { ValuesDomain } from \"../../domains/index.js\";\nimport {\n  ObjectValue,\n  ECMAScriptSourceFunctionValue,\n  Value,\n  AbstractObjectValue,\n  AbstractValue,\n  NullValue,\n  FunctionValue,\n  NumberValue,\n} from \"../../values/index.js\";\nimport { Environment } from \"../../singletons.js\";\nimport { createReactHintObject, getReactSymbol, isReactElement } from \"../../react/utils.js\";\nimport { createReactElement } from \"../../react/elements.js\";\nimport { Properties, Create } from \"../../singletons.js\";\nimport { renderToString } from \"../../react/experimental-server-rendering/rendering.js\";\nimport * as t from \"babel-types\";\nimport invariant from \"../../invariant\";\nimport { updateIntrinsicNames, addMockFunctionToObject } from \"./utils.js\";\n\n// most of the code here was taken from https://github.com/facebook/react/blob/master/packages/react/src/ReactElement.js\nlet reactCode = `\n  function createReact(REACT_ELEMENT_TYPE, REACT_FRAGMENT_TYPE, REACT_PORTAL_TYPE, ReactCurrentOwner) {\n    function makeEmptyFunction(arg) {\n      return function() {\n        return arg;\n      };\n    }\n    var emptyFunction = function() {};\n    \n    emptyFunction.thatReturns = makeEmptyFunction;\n    emptyFunction.thatReturnsFalse = makeEmptyFunction(false);\n    emptyFunction.thatReturnsTrue = makeEmptyFunction(true);\n    emptyFunction.thatReturnsNull = makeEmptyFunction(null);\n    emptyFunction.thatReturnsThis = function() { return this; };\n    emptyFunction.thatReturnsArgument = function(arg) { return arg; };\n\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n    var RESERVED_PROPS = {\n      key: true,\n      ref: true,\n      __self: true,\n      __source: true,\n    };\n\n    var ReactElement = function(type, key, ref, self, source, owner, props) {\n      return {\n        // This tag allow us to uniquely identify this as a React Element\n        $$typeof: REACT_ELEMENT_TYPE,\n    \n        // Built-in properties that belong on the element\n        type: type,\n        key: key,\n        ref: ref,\n        props: props,\n    \n        // Record the component responsible for creating this element.\n        _owner: owner,\n      };\n    };\n\n    function hasValidRef(config) {\n      return config.ref !== undefined;\n    }\n    \n    function hasValidKey(config) {\n      return config.key !== undefined;\n    }\n\n    function Component(props, context) {\n      this.props = props;\n      this.context = context;\n      this.refs = {};\n      this.setState = function () {}; // NO-OP\n      this.setState.__PREPACK_MOCK__ = true;\n    }\n    \n    Component.prototype.isReactComponent = {};\n\n    function PureComponent(props, context) {\n      this.props = props;\n      this.context = context;\n      this.refs = {};\n      this.setState = function () {}; // NO-OP\n      this.setState.__PREPACK_MOCK__ = true;\n    }\n\n    PureComponent.prototype.isReactComponent = {};\n    PureComponent.prototype.isPureReactComponent = true;\n\n    var userProvidedKeyEscapeRegex = /\\/+/g;\n\n    function escapeUserProvidedKey(text) {\n      return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');\n    }\n\n    function escape(key) {\n      const escapeRegex = /[=:]/g;\n      const escaperLookup = {\n        '=': '=0',\n        ':': '=2',\n      };\n      const escapedString = ('' + key).replace(escapeRegex, function(match) {\n        return escaperLookup[match];\n      });\n    \n      return '$' + escapedString;\n    }\n\n    var SEPARATOR = '.';\n    var SUBSEPARATOR = ':';\n    var POOL_SIZE = 10;\n    var traverseContextPool = [];\n    function getPooledTraverseContext(\n      mapResult,\n      keyPrefix,\n      mapFunction,\n      mapContext,\n    ) {\n      if (traverseContextPool.length) {\n        const traverseContext = traverseContextPool.pop();\n        traverseContext.result = mapResult;\n        traverseContext.keyPrefix = keyPrefix;\n        traverseContext.func = mapFunction;\n        traverseContext.context = mapContext;\n        traverseContext.count = 0;\n        return traverseContext;\n      } else {\n        return {\n          result: mapResult,\n          keyPrefix: keyPrefix,\n          func: mapFunction,\n          context: mapContext,\n          count: 0,\n        };\n      }\n    }\n\n    function releaseTraverseContext(traverseContext) {\n      traverseContext.result = null;\n      traverseContext.keyPrefix = null;\n      traverseContext.func = null;\n      traverseContext.context = null;\n      traverseContext.count = 0;\n      if (traverseContextPool.length < POOL_SIZE) {\n        traverseContextPool.push(traverseContext);\n      }\n    }\n\n    function traverseAllChildren(children, callback, traverseContext) {\n      if (children == null) {\n        return 0;\n      }\n    \n      return traverseAllChildrenImpl(children, '', callback, traverseContext);\n    }\n\n    function getComponentKey(component, index) {\n      // Do some typechecking here since we call this blindly. We want to ensure\n      // that we don't block potential future ES APIs.\n      if (\n        typeof component === 'object' &&\n        component !== null &&\n        component.key != null\n      ) {\n        // Explicit key\n        return escape(component.key);\n      }\n      // Implicit key determined by the index in the set\n      return index.toString(36);\n    }\n\n    function traverseAllChildrenImpl(\n      children,\n      nameSoFar,\n      callback,\n      traverseContext,\n    ) {\n      const type = typeof children;\n    \n      if (type === 'undefined' || type === 'boolean') {\n        // All of the above are perceived as null.\n        children = null;\n      }\n    \n      let invokeCallback = false;\n    \n      if (children === null) {\n        invokeCallback = true;\n      } else {\n        switch (type) {\n          case 'string':\n          case 'number':\n            invokeCallback = true;\n            break;\n          case 'object':\n            switch (children.$$typeof) {\n              case REACT_ELEMENT_TYPE:\n              case REACT_PORTAL_TYPE:\n                invokeCallback = true;\n            }\n        }\n      }\n    \n      if (invokeCallback) {\n        callback(\n          traverseContext,\n          children,\n          // If it's the only child, treat the name as if it was wrapped in an array\n          // so that it's consistent if the number of children grows.\n          nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar,\n        );\n        return 1;\n      }\n    \n      let child;\n      let nextName;\n      let subtreeCount = 0; // Count of children found in the current subtree.\n      const nextNamePrefix =\n        nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n    \n      if (Array.isArray(children)) {\n        for (let i = 0; i < children.length; i++) {\n          child = children[i];\n          nextName = nextNamePrefix + getComponentKey(child, i);\n          subtreeCount += traverseAllChildrenImpl(\n            child,\n            nextName,\n            callback,\n            traverseContext,\n          );\n        }\n      } else {\n        const iteratorFn = getIteratorFn(children);\n        if (typeof iteratorFn === 'function') {    \n          var iterator = iteratorFn.call(children);\n          let step;\n          let ii = 0;\n          while (!(step = iterator.next()).done) {\n            child = step.value;\n            nextName = nextNamePrefix + getComponentKey(child, ii++);\n            subtreeCount += traverseAllChildrenImpl(\n              child,\n              nextName,\n              callback,\n              traverseContext,\n            );\n          }\n        } else if (type === 'object') {\n          let addendum = '';\n          var childrenString = '' + children;\n        }\n      }\n    \n      return subtreeCount;\n    }\n\n    function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {\n      var escapedPrefix = '';\n      if (prefix != null) {\n        escapedPrefix = escapeUserProvidedKey(prefix) + '/';\n      }\n      const traverseContext = getPooledTraverseContext(\n        array,\n        escapedPrefix,\n        func,\n        context,\n      );\n      traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);\n      releaseTraverseContext(traverseContext);\n    }\n\n    function forEachSingleChild(bookKeeping, child, name) {\n      const {func, context} = bookKeeping;\n      func.call(context, child, bookKeeping.count++);\n    }\n\n    function forEachChildren(children, forEachFunc, forEachContext) {\n      if (children == null) {\n        return children;\n      }\n      var traverseContext = getPooledTraverseContext(\n        null,\n        null,\n        forEachFunc,\n        forEachContext,\n      );\n      traverseAllChildren(children, forEachSingleChild, traverseContext);\n      releaseTraverseContext(traverseContext);\n    }\n\n    function mapChildren(children, func, context) {\n      if (children == null) {\n        return children;\n      }\n      var result = [];\n      mapIntoWithKeyPrefixInternal(children, result, null, func, context);\n      return result;\n    }\n\n    function countChildren(children) {\n      return traverseAllChildren(children, emptyFunction.thatReturnsNull, null);\n    }\n\n    function onlyChild(children) {\n      return children;\n    }\n\n    function toArray(children) {\n      var result = [];\n      mapIntoWithKeyPrefixInternal(\n        children,\n        result,\n        null,\n        emptyFunction.thatReturnsArgument,\n      );\n      return result;\n    }\n\n    function cloneElement(element, config, children) {\n      var propName;\n      \n      // Original props are copied\n      var props = Object.assign({}, element.props);\n    \n      // Reserved names are extracted\n      var key = element.key;\n      var ref = element.ref;\n      // Self is preserved since the owner is preserved.\n      var self = element._self;\n      // Source is preserved since cloneElement is unlikely to be targeted by a\n      // transpiler, and the original source is probably a better indicator of the\n      // true owner.\n      var source = element._source;\n    \n      // Owner will be preserved, unless ref is overridden\n      var owner = element._owner;\n    \n      if (config != null) {\n        if (hasValidRef(config)) {\n          // Silently steal the ref from the parent.\n          ref = config.ref;\n          owner = ReactCurrentOwner.current;\n        }\n        if (hasValidKey(config)) {\n          key = '' + config.key;\n        }\n    \n        // Remaining properties override existing props\n        var defaultProps;\n        if (element.type && element.type.defaultProps) {\n          defaultProps = element.type.defaultProps;\n        }\n        for (propName in config) {\n          if (\n            hasOwnProperty.call(config, propName) &&\n            !RESERVED_PROPS.hasOwnProperty(propName)\n          ) {\n            if (config[propName] === undefined && defaultProps !== undefined) {\n              // Resolve default props\n              props[propName] = defaultProps[propName];\n            } else {\n              props[propName] = config[propName];\n            }\n          }\n        }\n      }\n    \n      // Children can be more than one argument, and those are transferred onto\n      // the newly allocated props object.\n      var childrenLength = arguments.length - 2;\n      if (childrenLength === 1) {\n        props.children = children;\n      } else if (childrenLength > 1) {\n        var childArray = new Array(childrenLength);\n        for (var i = 0; i < childrenLength; i++) {\n          childArray[i] = arguments[i + 2];\n        }\n        props.children = childArray;\n      }\n    \n      return ReactElement(element.type, key, ref, self, source, owner, props);\n    }\n\n    function isValidElement(object) {\n      return (\n        typeof object === 'object' &&\n        object !== null &&\n        object.$$typeof === REACT_ELEMENT_TYPE\n      );\n    }\n\n    function shim() {\n\n    }\n    shim.isRequired = shim;\n\n    function getShim() {\n      return shim;\n    };\n\n    var ReactPropTypes = {\n      array: shim,\n      bool: shim,\n      func: shim,\n      number: shim,\n      object: shim,\n      string: shim,\n      symbol: shim,\n  \n      any: shim,\n      arrayOf: getShim,\n      element: shim,\n      instanceOf: getShim,\n      node: shim,\n      objectOf: getShim,\n      oneOf: getShim,\n      oneOfType: getShim,\n      shape: getShim,\n      exact: getShim\n    };\n\n    ReactPropTypes.checkPropTypes = shim;\n    ReactPropTypes.PropTypes = ReactPropTypes;\n\n    return {\n      Children: {\n        forEach: forEachChildren,\n        map: mapChildren,\n        count: countChildren,\n        only: onlyChild,\n        toArray,\n      },\n      Component,\n      PureComponent,\n      Fragment: REACT_FRAGMENT_TYPE,\n      cloneElement,\n      isValidElement,\n      version: \"16.2.0\",\n      PropTypes: ReactPropTypes,\n    };\n  }\n`;\nlet reactAst = parseExpression(reactCode, { plugins: [\"flow\"] });\n\nexport function createMockReact(realm: Realm, reactRequireName: string): ObjectValue {\n  let reactFactory = Environment.GetValue(realm, realm.$GlobalEnv.evaluate(reactAst, false));\n  invariant(reactFactory instanceof ECMAScriptSourceFunctionValue);\n\n  let currentOwner = (realm.react.currentOwner = new ObjectValue(\n    realm,\n    realm.intrinsics.ObjectPrototype,\n    \"currentOwner\"\n  ));\n  // this is to get around Flow getting confused\n  let factory = reactFactory.$Call;\n  invariant(factory !== undefined);\n\n  let reactValue = factory(realm.intrinsics.undefined, [\n    getReactSymbol(\"react.element\", realm),\n    getReactSymbol(\"react.fragment\", realm),\n    getReactSymbol(\"react.portal\", realm),\n    currentOwner,\n  ]);\n  invariant(reactValue instanceof ObjectValue);\n  reactValue.refuseSerialization = true;\n\n  // update existing properties with the new intrinsic mock values\n  updateIntrinsicNames(realm, reactValue, reactRequireName, [\n    \"PropTypes\",\n    \"Children\",\n    \"isValidElement\",\n    \"cloneElement\",\n    { name: \"Component\", updatePrototype: true },\n    { name: \"PureComponent\", updatePrototype: true },\n  ]);\n\n  addMockFunctionToObject(\n    realm,\n    reactValue,\n    reactRequireName,\n    \"createElement\",\n    (context, [type, config, ...children]) => {\n      invariant(type instanceof Value);\n      // if config is undefined/null, use an empy object\n      if (config === realm.intrinsics.undefined || config === realm.intrinsics.null || config === undefined) {\n        config = new ObjectValue(realm, realm.intrinsics.ObjectPrototype);\n      }\n      invariant(\n        config instanceof ObjectValue ||\n          config instanceof AbstractObjectValue ||\n          config instanceof AbstractValue ||\n          config instanceof NullValue\n      );\n\n      if (Array.isArray(children)) {\n        if (children.length === 0) {\n          children = realm.intrinsics.undefined;\n        } else if (children.length === 1) {\n          children = children[0];\n        } else {\n          let array = Create.ArrayCreate(realm, 0);\n          let length = children.length;\n\n          for (let i = 0; i < length; i++) {\n            Create.CreateDataPropertyOrThrow(realm, array, \"\" + i, children[i]);\n          }\n          children = array;\n          children.makeFinal();\n        }\n      }\n      invariant(children instanceof Value);\n      return createReactElement(realm, type, config, children);\n    }\n  );\n\n  addMockFunctionToObject(\n    realm,\n    reactValue,\n    reactRequireName,\n    \"createContext\",\n    (funcValue, [defaultValue = realm.intrinsics.undefined]) => {\n      invariant(defaultValue instanceof Value);\n      let consumerObject = new ObjectValue(realm, realm.intrinsics.ObjectPrototype);\n      let providerObject = new ObjectValue(realm, realm.intrinsics.ObjectPrototype);\n      let consumer = AbstractValue.createTemporalFromBuildFunction(\n        realm,\n        ObjectValue,\n        [funcValue, defaultValue],\n        ([methodNode, defaultValueNode]) => {\n          return t.callExpression(methodNode, [defaultValueNode]);\n        }\n      );\n      invariant(consumer instanceof AbstractObjectValue);\n      consumer.values = new ValuesDomain(new Set([consumerObject]));\n\n      let provider = AbstractValue.createTemporalFromBuildFunction(realm, ObjectValue, [consumer], ([consumerNode]) => {\n        return t.memberExpression(consumerNode, t.identifier(\"Provider\"));\n      });\n      invariant(provider instanceof AbstractObjectValue);\n      provider.values = new ValuesDomain(new Set([providerObject]));\n\n      Properties.Set(realm, consumerObject, \"$$typeof\", getReactSymbol(\"react.context\", realm), true);\n      Properties.Set(realm, consumerObject, \"currentValue\", defaultValue, true);\n      Properties.Set(realm, consumerObject, \"defaultValue\", defaultValue, true);\n      Properties.Set(realm, consumerObject, \"changedBits\", new NumberValue(realm, 0), true);\n      Properties.Set(realm, consumerObject, \"Consumer\", consumer, true);\n\n      Properties.Set(realm, providerObject, \"$$typeof\", getReactSymbol(\"react.provider\", realm), true);\n      Properties.Set(realm, providerObject, \"context\", consumer, true);\n\n      Properties.Set(realm, consumerObject, \"Provider\", provider, true);\n\n      return consumer;\n    }\n  );\n\n  addMockFunctionToObject(realm, reactValue, reactRequireName, \"createRef\", funcVal => {\n    let createRef = AbstractValue.createTemporalFromBuildFunction(\n      realm,\n      FunctionValue,\n      [funcVal],\n      ([createRefNode]) => {\n        return t.callExpression(createRefNode, []);\n      }\n    );\n    invariant(createRef instanceof AbstractObjectValue);\n    return createRef;\n  });\n\n  addMockFunctionToObject(realm, reactValue, reactRequireName, \"forwardRef\", (funcVal, [func]) => {\n    let forwardedRef = AbstractValue.createTemporalFromBuildFunction(\n      realm,\n      FunctionValue,\n      [funcVal, func],\n      ([forwardRefNode, funcNode]) => {\n        return t.callExpression(forwardRefNode, [funcNode]);\n      }\n    );\n    invariant(forwardedRef instanceof AbstractObjectValue);\n    realm.react.abstractHints.set(\n      forwardedRef,\n      createReactHintObject(reactValue, \"forwardRef\", [func], realm.intrinsics.undefined)\n    );\n    return forwardedRef;\n  });\n\n  reactValue.refuseSerialization = false;\n  reactValue.makeFinal();\n  return reactValue;\n}\n\nexport function createMockReactDOM(realm: Realm, reactDomRequireName: string): ObjectValue {\n  let reactDomValue = new ObjectValue(realm, realm.intrinsics.ObjectPrototype);\n  reactDomValue.refuseSerialization = true;\n\n  updateIntrinsicNames(realm, reactDomValue, reactDomRequireName);\n\n  const genericTemporalFunc = (funcVal, args) => {\n    let reactDomMethod = AbstractValue.createTemporalFromBuildFunction(\n      realm,\n      FunctionValue,\n      [funcVal, ...args],\n      ([renderNode, ..._args]) => {\n        return t.callExpression(renderNode, ((_args: any): Array<any>));\n      }\n    );\n    invariant(reactDomMethod instanceof AbstractObjectValue);\n    return reactDomMethod;\n  };\n\n  addMockFunctionToObject(realm, reactDomValue, reactDomRequireName, \"render\", genericTemporalFunc);\n  addMockFunctionToObject(realm, reactDomValue, reactDomRequireName, \"hydrate\", genericTemporalFunc);\n  addMockFunctionToObject(realm, reactDomValue, reactDomRequireName, \"findDOMNode\", genericTemporalFunc);\n  addMockFunctionToObject(realm, reactDomValue, reactDomRequireName, \"unmountComponentAtNode\", genericTemporalFunc);\n\n  const createPortalFunc = (funcVal, [reactPortalValue, domNodeValue]) => {\n    let reactDomMethod = AbstractValue.createTemporalFromBuildFunction(\n      realm,\n      ObjectValue,\n      [funcVal, reactPortalValue, domNodeValue],\n      ([renderNode, ..._args]) => {\n        return t.callExpression(renderNode, ((_args: any): Array<any>));\n      }\n    );\n    invariant(reactDomMethod instanceof AbstractObjectValue);\n    realm.react.abstractHints.set(\n      reactDomMethod,\n      createReactHintObject(reactDomValue, \"createPortal\", [reactPortalValue, domNodeValue], realm.intrinsics.undefined)\n    );\n    return reactDomMethod;\n  };\n\n  addMockFunctionToObject(realm, reactDomValue, reactDomRequireName, \"createPortal\", createPortalFunc);\n\n  reactDomValue.refuseSerialization = false;\n  reactDomValue.makeFinal();\n  return reactDomValue;\n}\n\nexport function createMockReactDOMServer(realm: Realm, requireName: string): ObjectValue {\n  let reactDomServerValue = new ObjectValue(realm, realm.intrinsics.ObjectPrototype);\n  reactDomServerValue.refuseSerialization = true;\n\n  updateIntrinsicNames(realm, reactDomServerValue, requireName);\n\n  const genericTemporalFunc = (funcVal, args) => {\n    let reactDomMethod = AbstractValue.createTemporalFromBuildFunction(\n      realm,\n      FunctionValue,\n      [funcVal, ...args],\n      ([renderNode, ..._args]) => {\n        return t.callExpression(renderNode, ((_args: any): Array<any>));\n      }\n    );\n    invariant(reactDomMethod instanceof AbstractObjectValue);\n    return reactDomMethod;\n  };\n\n  addMockFunctionToObject(realm, reactDomServerValue, requireName, \"renderToString\", (funcVal, [input]) => {\n    if (input instanceof ObjectValue && isReactElement(input)) {\n      return renderToString(realm, input, false);\n    }\n    return genericTemporalFunc(funcVal, [input]);\n  });\n  addMockFunctionToObject(realm, reactDomServerValue, requireName, \"renderToStaticMarkup\", (funcVal, [input]) => {\n    if (input instanceof ObjectValue && isReactElement(input)) {\n      return renderToString(realm, input, true);\n    }\n    return genericTemporalFunc(funcVal, [input]);\n  });\n  addMockFunctionToObject(realm, reactDomServerValue, requireName, \"renderToNodeStream\", genericTemporalFunc);\n  addMockFunctionToObject(realm, reactDomServerValue, requireName, \"renderToStaticNodeStream\", genericTemporalFunc);\n\n  reactDomServerValue.refuseSerialization = false;\n  reactDomServerValue.makeFinal();\n  return reactDomServerValue;\n}\n"]}