{"version":3,"sources":["../../../src/intrinsics/prepack/global.js"],"names":["createAbstractFunction","realm","global","$GlobalObject","$DefineOwnProperty","value","context","args","console","log","map","arg","serialize","writable","enumerable","configurable","intrinsics","null","undefined","ObjectPrototype","additonalFunctionUid","config","assignToGlobal","t","memberExpression","identifier","react","enabled","reactComponentRootUid","component","hasValidComponent","hasValidConfig","diagnostic","currentLocation","handleError","reactComponentTree","$Set","functionValue","$Call","functionCall","evaluatePure","deriveNativeFunctionValue","unsafe","typeNameOrTemplate","f","useAbstractInterpretation","createErrorThrowCompletion","TypeError","type","template","isTypeCompatibleWith","constructor","isResidual","isUnsafeResidual","result","createTemporalFromBuildFunction","concat","nodes","callExpression","slice","makePartial","values","Set","generator","rebuildNestedProperties","getIdentifier","name","object","option","makeSimple","propertyName","invariantOptions","key","ToStringPartial","emitConcreteModel","invariantLevel","invariantOptionString","emitPropertyInvariant","mightBeUndefined","emitFullInvariant","neverCheckProperty","markPropertyAsChecked","intrinsicName","rebuildObjectProperty","$Realm","__IntrospectionError","additionalValues"],"mappings":"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","file":"global.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport {\n  AbstractObjectValue,\n  AbstractValue,\n  BooleanValue,\n  ConcreteValue,\n  ECMAScriptSourceFunctionValue,\n  FunctionValue,\n  IntegralValue,\n  NativeFunctionValue,\n  ObjectValue,\n  StringValue,\n  Value,\n} from \"../../values/index.js\";\nimport { To } from \"../../singletons.js\";\nimport { ValuesDomain } from \"../../domains/index.js\";\nimport * as t from \"babel-types\";\nimport type { BabelNodeExpression, BabelNodeSpreadElement } from \"babel-types\";\nimport invariant from \"../../invariant.js\";\nimport { createAbstract, parseTypeNameOrTemplate } from \"./utils.js\";\nimport { valueIsKnownReactAbstraction } from \"../../react/utils.js\";\nimport { CompilerDiagnostic, FatalError } from \"../../errors.js\";\n\nexport function createAbstractFunction(realm: Realm, ...additionalValues: Array<ConcreteValue>): NativeFunctionValue {\n  return new NativeFunctionValue(realm, \"global.__abstract\", \"__abstract\", 0, (context, [typeNameOrTemplate, name]) => {\n    if (name instanceof StringValue) name = name.value;\n    if (name !== undefined && typeof name !== \"string\") {\n      throw new TypeError(\"intrinsic name argument is not a string\");\n    }\n    return createAbstract(realm, typeNameOrTemplate, name, ...additionalValues);\n  });\n}\n\nexport default function(realm: Realm): void {\n  let global = realm.$GlobalObject;\n\n  global.$DefineOwnProperty(\"__dump\", {\n    value: new NativeFunctionValue(realm, \"global.__dump\", \"__dump\", 0, (context, args) => {\n      console.log(\"dump\", args.map(arg => arg.serialize()));\n      return context;\n    }),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  // Helper function to model values that are obtained from the environment,\n  // and whose concrete values are not known at Prepack-time.\n  // __abstract(typeNameOrTemplate, name, options) creates a new abstract value\n  // where typeNameOrTemplate can be...\n  // - 'string', 'boolean', 'number', 'object', 'function' or\n  // - ':string', ':boolean', ':number', ':object', ':function' to indicate that\n  //   the abstract value represents a function that only returns values of the specified type, or\n  // - an actual object defining known properties.\n  // If the abstract value gets somehow embedded in the final heap,\n  // it will be referred to by the supplied name in the generated code.\n  global.$DefineOwnProperty(\"__abstract\", {\n    value: createAbstractFunction(realm),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  global.$DefineOwnProperty(\"__abstractOrNull\", {\n    value: createAbstractFunction(realm, realm.intrinsics.null),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  global.$DefineOwnProperty(\"__abstractOrNullOrUndefined\", {\n    value: createAbstractFunction(realm, realm.intrinsics.null, realm.intrinsics.undefined),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  global.$DefineOwnProperty(\"__abstractOrUndefined\", {\n    value: createAbstractFunction(realm, realm.intrinsics.undefined),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  global.$DefineOwnProperty(\"__optimizedFunctions\", {\n    value: new ObjectValue(\n      realm,\n      realm.intrinsics.ObjectPrototype,\n      \"__optimizedFunctions\",\n      /* refuseSerialization */ true\n    ),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  let additonalFunctionUid = 0;\n  // Allows dynamically registering optimized functions.\n  // WARNING: these functions will get exposed at global scope and called there.\n  // NB: If we interpret one of these calls in an evaluateForEffects context\n  //     that is not subsequently applied, the function will not be registered\n  //     (because prepack won't have a correct value for the FunctionValue itself)\n  global.$DefineOwnProperty(\"__optimize\", {\n    value: new NativeFunctionValue(realm, \"global.__optimize\", \"__optimize\", 0, (context, [value, config]) => {\n      // only optimize functions for now\n      if (value instanceof ECMAScriptSourceFunctionValue) {\n        realm.assignToGlobal(\n          t.memberExpression(\n            t.memberExpression(t.identifier(\"global\"), t.identifier(\"__optimizedFunctions\")),\n            t.identifier(\"\" + additonalFunctionUid++)\n          ),\n          value\n        );\n      }\n      return value;\n    }),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  if (realm.react.enabled) {\n    global.$DefineOwnProperty(\"__reactComponentTrees\", {\n      value: new ObjectValue(\n        realm,\n        realm.intrinsics.ObjectPrototype,\n        \"__reactComponentTrees\",\n        /* refuseSerialization */ true\n      ),\n      writable: true,\n      enumerable: false,\n      configurable: true,\n    });\n    let reactComponentRootUid = 0;\n    global.$DefineOwnProperty(\"__optimizeReactComponentTree\", {\n      value: new NativeFunctionValue(\n        realm,\n        \"global.__optimizeReactComponentTree\",\n        \"__optimizeReactComponentTree\",\n        0,\n        (context, [component, config]) => {\n          let hasValidComponent =\n            component instanceof ECMAScriptSourceFunctionValue || valueIsKnownReactAbstraction(realm, component);\n          let hasValidConfig =\n            config instanceof ObjectValue || config === realm.intrinsics.undefined || config === undefined;\n\n          if (!hasValidComponent || !hasValidConfig) {\n            let diagnostic = new CompilerDiagnostic(\n              \"__optimizeReactComponentTree(rootComponent, config) has been called with invalid arguments\",\n              realm.currentLocation,\n              \"PP0024\",\n              \"FatalError\"\n            );\n            realm.handleError(diagnostic);\n            if (realm.handleError(diagnostic) === \"Fail\") throw new FatalError();\n          }\n          let reactComponentTree = new ObjectValue(realm, realm.intrinsics.ObjectPrototype);\n          reactComponentTree.$Set(\"rootComponent\", component, reactComponentTree);\n          reactComponentTree.$Set(\"config\", config || realm.intrinsics.undefined, reactComponentTree);\n\n          realm.assignToGlobal(\n            t.memberExpression(\n              t.memberExpression(t.identifier(\"global\"), t.identifier(\"__reactComponentTrees\")),\n              t.identifier(\"\" + reactComponentRootUid++)\n            ),\n            reactComponentTree\n          );\n          return component;\n        }\n      ),\n      writable: true,\n      enumerable: false,\n      configurable: true,\n    });\n  }\n\n  global.$DefineOwnProperty(\"__evaluatePureFunction\", {\n    value: new NativeFunctionValue(\n      realm,\n      \"global.__evaluatePureFunction\",\n      \"__evaluatePureFunction\",\n      0,\n      (context, [functionValue]) => {\n        invariant(functionValue instanceof ECMAScriptSourceFunctionValue);\n        invariant(typeof functionValue.$Call === \"function\");\n        let functionCall: Function = functionValue.$Call;\n        return realm.evaluatePure(() => functionCall(realm.intrinsics.undefined, []));\n      }\n    ),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  // Maps from initialized moduleId to exports object\n  // NB: Changes to this shouldn't ever be serialized\n  global.$DefineOwnProperty(\"__initializedModules\", {\n    value: new ObjectValue(\n      realm,\n      realm.intrinsics.ObjectPrototype,\n      \"__initializedModules\",\n      /* refuseSerialization */ true\n    ),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  // Set of property bindings whose invariant got checked\n  // NB: Changes to this shouldn't ever be serialized\n  global.$DefineOwnProperty(\"__checkedBindings\", {\n    value: new ObjectValue(\n      realm,\n      realm.intrinsics.ObjectPrototype,\n      \"__checkedBindings\",\n      /* refuseSerialization */ true\n    ),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  // Helper function used to instatiate a residual function\n  function deriveNativeFunctionValue(unsafe: boolean): NativeFunctionValue {\n    return new NativeFunctionValue(\n      realm,\n      \"global.__residual\",\n      \"__residual\",\n      2,\n      (context, [typeNameOrTemplate, f, ...args]) => {\n        if (!realm.useAbstractInterpretation) {\n          throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"realm is not partial\");\n        }\n\n        let { type, template } = parseTypeNameOrTemplate(realm, typeNameOrTemplate);\n\n        if (!Value.isTypeCompatibleWith(f.constructor, FunctionValue)) {\n          throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"cannot determine residual function\");\n        }\n        invariant(f instanceof FunctionValue);\n        f.isResidual = true;\n        if (unsafe) f.isUnsafeResidual = true;\n        let result = AbstractValue.createTemporalFromBuildFunction(realm, type, [f].concat(args), nodes =>\n          t.callExpression(nodes[0], ((nodes.slice(1): any): Array<BabelNodeExpression | BabelNodeSpreadElement>))\n        );\n        if (template) {\n          invariant(\n            result instanceof AbstractValue,\n            \"the nested properties should only be rebuilt for an abstract value\"\n          );\n          template.makePartial();\n          result.values = new ValuesDomain(new Set([template]));\n          invariant(realm.generator);\n          realm.rebuildNestedProperties(result, result.getIdentifier().name);\n        }\n        return result;\n      }\n    );\n  }\n\n  // Helper function that identifies a computation that must remain part of the residual program and cannot be partially evaluated,\n  // e.g. because it contains a loop over abstract values.\n  // __residual(typeNameOrTemplate, function, arg0, arg1, ...) creates a new abstract value\n  // that is computed by invoking function(arg0, arg1, ...) in the residual program and\n  // where typeNameOrTemplate either either 'string', 'boolean', 'number', 'object', or an actual object defining known properties.\n  // The function must not have side effects, and it must not access any state (besides the supplied arguments).\n  global.$DefineOwnProperty(\"__residual\", {\n    value: deriveNativeFunctionValue(false),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  // Helper function that identifies a variant of the residual function that has implicit dependencies. This version of residual will infer the dependencies\n  // and rewrite the function body to do the same thing as the original residual function.\n  global.$DefineOwnProperty(\"__residual_unsafe\", {\n    value: deriveNativeFunctionValue(true),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  // Internal helper function for tests.\n  // __isAbstract(value) checks if a given value is abstract.\n  global.$DefineOwnProperty(\"__isAbstract\", {\n    value: new NativeFunctionValue(realm, \"global.__isAbstract\", \"__isAbstract\", 1, (context, [value]) => {\n      return new BooleanValue(realm, value instanceof AbstractValue);\n    }),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  // __makePartial(object) marks an (abstract) object as partial.\n  global.$DefineOwnProperty(\"__makePartial\", {\n    value: new NativeFunctionValue(realm, \"global.__makePartial\", \"__makePartial\", 1, (context, [object]) => {\n      if (object instanceof AbstractObjectValue || object instanceof ObjectValue) {\n        object.makePartial();\n        return object;\n      }\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not an (abstract) object\");\n    }),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  // __makeSimple(object) marks an (abstract) object as one that has no getters or setters.\n  global.$DefineOwnProperty(\"__makeSimple\", {\n    value: new NativeFunctionValue(realm, \"global.__makeSimple\", \"__makeSimple\", 1, (context, [object, option]) => {\n      if (object instanceof AbstractObjectValue || object instanceof ObjectValue) {\n        object.makeSimple(option);\n        return object;\n      }\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not an (abstract) object\");\n    }),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  // Helper function that emits a check whether a given object property has a particular value.\n  global.$DefineOwnProperty(\"__assumeDataProperty\", {\n    value: new NativeFunctionValue(\n      realm,\n      \"global.__assumeDataProperty\",\n      \"__assumeDataProperty\",\n      3,\n      (context, [object, propertyName, value, invariantOptions]) => {\n        if (!realm.useAbstractInterpretation) {\n          throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"realm is not partial\");\n        }\n\n        if (object instanceof AbstractObjectValue || object instanceof ObjectValue) {\n          let generator = realm.generator;\n          invariant(generator);\n\n          let key = To.ToStringPartial(realm, propertyName);\n\n          if (realm.emitConcreteModel) {\n            generator.emitConcreteModel(key, value);\n          } else if (realm.invariantLevel >= 1) {\n            let invariantOptionString = invariantOptions\n              ? To.ToStringPartial(realm, invariantOptions)\n              : \"FULL_INVARIANT\";\n            switch (invariantOptionString) {\n              // checks (!property in object || object.property === undefined)\n              case \"VALUE_DEFINED_INVARIANT\":\n                generator.emitPropertyInvariant(object, key, value.mightBeUndefined() ? \"PRESENT\" : \"DEFINED\");\n                break;\n              case \"SKIP_INVARIANT\":\n                break;\n              case \"FULL_INVARIANT\":\n                generator.emitFullInvariant((object: any), key, value);\n                break;\n              default:\n                invariant(false, \"Invalid invariantOption \" + invariantOptionString);\n            }\n            if (!realm.neverCheckProperty(object, key)) realm.markPropertyAsChecked(object, key);\n          }\n          realm.generator = undefined; // don't emit code during the following $Set call\n          // casting to due to Flow workaround above\n          (object: any).$Set(key, value, object);\n          realm.generator = generator;\n          if (object.intrinsicName) realm.rebuildObjectProperty(object, key, value, object.intrinsicName);\n          return context.$Realm.intrinsics.undefined;\n        }\n\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not an (abstract) object\");\n      }\n    ),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  global.$DefineOwnProperty(\"__IntrospectionError\", {\n    value: realm.intrinsics.__IntrospectionError,\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  global.$DefineOwnProperty(\"__isIntegral\", {\n    value: new NativeFunctionValue(realm, \"global.__isIntegral\", \"__isIntegral\", 1, (context, [value]) => {\n      return new BooleanValue(realm, value instanceof IntegralValue);\n    }),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n}\n"]}