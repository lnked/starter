{"version":3,"sources":["../../src/react/ReactElementSet.js"],"names":["ReactElementSet","constructor","realm","equivalenceSet","reactElementRoot","Map","objectRoot","arrayRoot","emptyArray","emptyObject","intrinsics","ObjectPrototype","_createNode","map","value","_getKey","key","visitedValues","has","set","get","_getValue","val","add","_getArrayValue","_getObjectValue","object","currentMap","result","propName","properties","prop","symbol","symbols","undefined","array","intrinsicName","lengthValue","length","i","element","reactElement","Set","type","ref","props"],"mappings":"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","file":"ReactElementSet.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm } from \"../realm.js\";\nimport {\n  Value,\n  ObjectValue,\n  StringValue,\n  NumberValue,\n  AbstractValue,\n  ArrayValue,\n  FunctionValue,\n  SymbolValue,\n} from \"../values/index.js\";\nimport invariant from \"../invariant.js\";\nimport { isReactElement, getProperty } from \"./utils\";\nimport { HashSet } from \"../methods/index.js\";\n\ntype ReactElementValueMapKey = Value | number | string;\ntype ReactElementValueMap = Map<ReactElementValueMapKey, ReactElementNode>;\n\ntype ReactElementKeyMapKey = string | number | SymbolValue;\ntype ReactElementKeyMap = Map<ReactElementKeyMapKey, ReactElementValueMap>;\n\ntype ReactElementNode = {\n  map: ReactElementKeyMap,\n  value: ObjectValue | ArrayValue | null,\n};\n\n// ReactElementSet keeps records around of the values\n// of ReactElement/JSX nodes so we can return the same immutable values\n// where possible, i.e. <div /> === <div />\n//\n// Rather than uses hashes, this class uses linked Maps to track equality of objects.\n// It does this by recursively iterating through objects, by their properties/symbols and using\n// each property key as a map, and then from that map, each value as a map. The value\n// then links to the subsequent property/symbol in the object. This approach ensures insertion\n// is maintained through all objects.\n\nexport default class ReactElementSet {\n  constructor(realm: Realm, equivalenceSet: HashSet<AbstractValue>) {\n    this.realm = realm;\n    this.equivalenceSet = equivalenceSet;\n    this.reactElementRoot = new Map();\n    this.objectRoot = new Map();\n    this.arrayRoot = new Map();\n    this.emptyArray = new ArrayValue(realm);\n    this.emptyObject = new ObjectValue(realm, realm.intrinsics.ObjectPrototype);\n  }\n  realm: Realm;\n  reactElementRoot: ReactElementKeyMap;\n  objectRoot: ReactElementKeyMap;\n  arrayRoot: ReactElementKeyMap;\n  equivalenceSet: HashSet<AbstractValue>;\n  emptyArray: ArrayValue;\n  emptyObject: ObjectValue;\n\n  _createNode(): ReactElementNode {\n    return {\n      map: new Map(),\n      value: null,\n    };\n  }\n\n  _getKey(key: ReactElementKeyMapKey, map: ReactElementKeyMap, visitedValues: Set<Value>): ReactElementValueMap {\n    if (!map.has(key)) {\n      map.set(key, new Map());\n    }\n    return ((map.get(key): any): ReactElementValueMap);\n  }\n\n  _getValue(val: ReactElementValueMapKey, map: ReactElementValueMap, visitedValues: Set<Value>): ReactElementNode {\n    if (val instanceof StringValue || val instanceof NumberValue) {\n      val = val.value;\n    } else if (val instanceof AbstractValue) {\n      val = this.equivalenceSet.add(val);\n    } else if (val instanceof ArrayValue) {\n      val = this._getArrayValue(val, visitedValues);\n    } else if (val instanceof ObjectValue && !(val instanceof FunctionValue)) {\n      val = this._getObjectValue(val, visitedValues);\n    }\n    if (!map.has(val)) {\n      map.set(val, this._createNode());\n    }\n    return ((map.get(val): any): ReactElementNode);\n  }\n\n  // for objects: [key/symbol] -> [key/symbol]... as nodes\n  _getObjectValue(object: ObjectValue, visitedValues: Set<Value>): ObjectValue {\n    if (visitedValues.has(object)) return object;\n    visitedValues.add(object);\n\n    if (isReactElement(object)) {\n      return this.add(object);\n    }\n    let currentMap = this.objectRoot;\n    let result;\n\n    for (let [propName] of object.properties) {\n      currentMap = this._getKey(propName, currentMap, visitedValues);\n      let prop = getProperty(this.realm, object, propName);\n      result = this._getValue(prop, currentMap, visitedValues);\n      currentMap = result.map;\n    }\n    for (let [symbol] of object.symbols) {\n      currentMap = this._getKey(symbol, currentMap, visitedValues);\n      let prop = getProperty(this.realm, object, symbol);\n      result = this._getValue(prop, currentMap, visitedValues);\n      currentMap = result.map;\n    }\n    if (result === undefined) {\n      return this.emptyObject;\n    }\n    if (result.value === null) {\n      result.value = object;\n    }\n    return result.value;\n  }\n\n  // for arrays: [0] -> [1] -> [2]... as nodes\n  _getArrayValue(array: ArrayValue, visitedValues: Set<Value>): ArrayValue {\n    if (visitedValues.has(array)) return array;\n    if (array.intrinsicName) return array;\n    visitedValues.add(array);\n    let lengthValue = getProperty(this.realm, array, \"length\");\n    invariant(lengthValue instanceof NumberValue);\n    let length = lengthValue.value;\n    let currentMap = this.arrayRoot;\n    let result;\n\n    for (let i = 0; i < length; i++) {\n      currentMap = this._getKey(i, currentMap, visitedValues);\n      let element = getProperty(this.realm, array, \"\" + i);\n      result = this._getValue(element, currentMap, visitedValues);\n      currentMap = result.map;\n    }\n    if (result === undefined) {\n      return this.emptyArray;\n    }\n    if (result.value === null) {\n      result.value = array;\n    }\n    return result.value;\n  }\n\n  add(reactElement: ObjectValue, visitedValues: Set<Value> | void): ObjectValue {\n    if (!visitedValues) visitedValues = new Set();\n    let currentMap = this.reactElementRoot;\n\n    // type\n    currentMap = this._getKey(\"type\", currentMap, visitedValues);\n    let type = getProperty(this.realm, reactElement, \"type\");\n    let result = this._getValue(type, currentMap, visitedValues);\n    currentMap = result.map;\n    // key\n    currentMap = this._getKey(\"key\", currentMap, visitedValues);\n    let key = getProperty(this.realm, reactElement, \"key\");\n    result = this._getValue(key, currentMap, visitedValues);\n    currentMap = result.map;\n    // ref\n    currentMap = this._getKey(\"ref\", currentMap, visitedValues);\n    let ref = getProperty(this.realm, reactElement, \"ref\");\n    result = this._getValue(ref, currentMap, visitedValues);\n    currentMap = result.map;\n    // props\n    currentMap = this._getKey(\"props\", currentMap, visitedValues);\n    let props = getProperty(this.realm, reactElement, \"props\");\n    result = this._getValue(props, currentMap, visitedValues);\n    currentMap = result.map;\n\n    if (result.value === null) {\n      result.value = reactElement;\n    }\n    invariant(result.value instanceof ObjectValue);\n    return result.value;\n  }\n}\n"]}