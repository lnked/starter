{"version":3,"sources":["../../src/react/reconcilation.js"],"names":["t","Reconciler","constructor","realm","componentTreeConfig","statistics","logger","reactSerializerState","componentTreeState","_createComponentTreeState","alreadyEvaluatedRootNodes","Map","alreadyEvaluatedNestedClosures","Set","nestedOptimizedClosures","branchedComponentTrees","resolveReactComponentTree","componentType","props","context","evaluatedRootNode","resolveComponentTree","initialProps","initialContext","set","result","_resolveComponent","optimizedTrees","error","_handleComponentTreeRootFailure","effects","wrapInGlobalEnv","evaluatePure","evaluateForEffects","_handleReportedSideEffect","_handleNestedOptimizedClosuresFromEffects","evaluatedNode","nestedEffects","length","push","resolveNestedOptimizedClosure","func","branchState","resolveOptimizedClosure","baseObject","$GlobalEnv","environmentRecord","WithBaseObject","$BoundThis","$BoundTargetFunction","numArgs","getLength","args","targetFunc","add","params","$FormalParameters","parameterId","isIdentifier","createAbstractArgument","name","expressionLocation","handleError","value","_resolveDeeply","optimizedNestedClosures","clearComponentTreeState","_queueOptimizedClosure","_queueNewComponentTree","rootValue","deadEnds","hasEvaluatedRootNode","_resolveComplexClassComponent","classMetadata","branchStatus","evaluatedComplexNode","get","status","instance","renderMethod","_resolveSimpleClassComponent","_resolveFunctionalComponent","intrinsics","undefined","_getClassComponentMetadata","react","classComponentMetadata","has","_resolveContextProviderComponent","reactElement","typeValue","propsValue","evaluatedChildNode","children","componentsEvaluated","contextConsumer","lastValueProp","_incremementReferenceForContextNode","setContextCurrentValue","valueProp","firstRenderOnly","resolvedReactElement","_resolveReactElementHostChildren","resolvedPropsValue","_decremementReferenceForContextNode","childrenValue","inlinedComponents","contextNode","references","contextNodeReferences","_hasReferenceForContextNode","_resolveContextConsumerComponent","properties","renderProp","_findReactComponentTrees","_resolveForwardRefComponent","refValue","reactHint","abstractHints","forwardedComponent","_resolveRelayQueryRendererComponent","_resolveClassComponent","instanceProperties","instanceSymbols","size","_resolveClassComponentForFirstRenderOnly","getDerivedStateFromProps","getSnapshotBeforeUpdate","$Call","componentWillMount","unsafeComponentWillMount","_resolveRelayContainer","message","firstRenderValue","abstractRelayContext","createAbstractObject","abstractRelayEnvironment","abstractRelayInternal","contextTypes","object","fbLibraries","reactRelay","childContext","_getComponentResolutionStrategy","QueryRenderer","propertyName","kind","$$typeof","_resolveReactDomPortal","createPortalNode","reactPortalValue","domNodeValue","resolvedReactPortalValue","reactDomValue","reactDom","reactDomPortalFunc","createTemporalFromBuildFunction","renderNode","_args","callExpression","_resolveAbstractConditionalValue","condValue","consequentVal","alternateVal","newBranchState","evaluateWithAbstractConditional","didBranch","applyBranchedLogic","mergeBranchedLogic","_resolveAbstractValue","generator","_resolveBranchedComponentType","keyValue","resolveBranch","abstract","condition","left","right","createFromConditionalOp","_resolveUnknownComponentType","bailOutMessage","_assignBailOutMessage","_resolveReactElementBadRef","_resolveReactElementUndefinedRender","captureBranchedValue","resolvedChildren","intrinsicName","newProps","ObjectPrototype","key","binding","descriptor","enumerable","isSimpleObject","makeSimple","isPartialObject","makePartial","makeFinal","_resolveFragmentComponent","_resolveReactElement","componentResolutionStrategy","render","verbose","logInformation","_resolveComponentResolutionFailure","stack","_isFinal","_resolveArray","location","$BailOutReason","arrayValue","isIntrinsicAndHasWidenedNumericProperty","arrayHint","arrayHints","thisVal","elementValue","evaluateNode","alreadyEvaluatedNode","hasEvaluatedNestedClosure","treatFunctionsAs","arg","ref","propName","sideEffectType"],"mappings":"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","file":"reconcilation.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm, type Effects, type SideEffectType } from \"../realm.js\";\nimport {\n  AbstractObjectValue,\n  AbstractValue,\n  ArrayValue,\n  BooleanValue,\n  BoundFunctionValue,\n  ECMAScriptSourceFunctionValue,\n  FunctionValue,\n  NullValue,\n  NumberValue,\n  ObjectValue,\n  StringValue,\n  SymbolValue,\n  Value,\n  UndefinedValue,\n} from \"../values/index.js\";\nimport { ReactStatistics, type ReactSerializerState, type ReactEvaluatedNode } from \"../serializer/types.js\";\nimport {\n  createReactEvaluatedNode,\n  doNotOptimizeComponent,\n  evaluateWithNestedParentEffects,\n  flattenChildren,\n  mapArrayValue,\n  getComponentName,\n  getComponentTypeFromRootValue,\n  getLocationFromValue,\n  getProperty,\n  getReactSymbol,\n  getValueFromFunctionCall,\n  isReactElement,\n  sanitizeReactElementForFirstRenderOnly,\n  setProperty,\n  valueIsClassComponent,\n  valueIsFactoryClassComponent,\n  valueIsKnownReactAbstraction,\n  valueIsLegacyCreateClassComponent,\n} from \"./utils\";\nimport { Get } from \"../methods/index.js\";\nimport invariant from \"../invariant.js\";\nimport { FatalError, CompilerDiagnostic } from \"../errors.js\";\nimport { BranchState, type BranchStatusEnum } from \"./branching.js\";\nimport * as t from \"babel-types\";\nimport { Completion } from \"../completions.js\";\nimport {\n  getInitialProps,\n  getInitialContext,\n  createClassInstance,\n  createSimpleClassInstance,\n  evaluateClassConstructor,\n  createClassInstanceForFirstRenderOnly,\n  applyGetDerivedStateFromProps,\n} from \"./components.js\";\nimport {\n  DoNotOptimize,\n  ExpectedBailOut,\n  NewComponentTreeBranch,\n  ReconcilerFatalError,\n  SimpleClassBailOut,\n  UnsupportedSideEffect,\n} from \"./errors.js\";\nimport { Logger } from \"../utils/logger.js\";\nimport type { ClassComponentMetadata, PropertyBinding, ReactComponentTreeConfig, ReactHint } from \"../types.js\";\nimport { createInternalReactElement } from \"./elements.js\";\nimport type { Binding } from \"../environment.js\";\n\ntype ComponentResolutionStrategy =\n  | \"NORMAL\"\n  | \"FRAGMENT\"\n  | \"RELAY_QUERY_RENDERER\"\n  | \"CONTEXT_PROVIDER\"\n  | \"CONTEXT_CONSUMER\"\n  | \"FORWARD_REF\";\n\nexport type OptimizedClosure = {\n  evaluatedNode: ReactEvaluatedNode,\n  func: ECMAScriptSourceFunctionValue | BoundFunctionValue,\n  nestedEffects: Array<Effects>,\n  componentType: Value | null,\n  context: ObjectValue | AbstractObjectValue | null,\n  branchState: BranchState | null,\n};\n\nexport type BranchReactComponentTree = {\n  context: ObjectValue | AbstractObjectValue | null,\n  evaluatedNode: ReactEvaluatedNode,\n  props: ObjectValue | AbstractObjectValue | null,\n  rootValue: ECMAScriptSourceFunctionValue | AbstractValue,\n};\n\nexport type ComponentTreeState = {\n  componentType: void | ECMAScriptSourceFunctionValue,\n  contextTypes: Set<string>,\n  deadEnds: number,\n  status: \"SIMPLE\" | \"COMPLEX\",\n  contextNodeReferences: Map<ObjectValue | AbstractObjectValue, number>,\n};\n\nexport class Reconciler {\n  constructor(\n    realm: Realm,\n    componentTreeConfig: ReactComponentTreeConfig,\n    statistics: ReactStatistics,\n    logger?: Logger,\n    reactSerializerState?: ReactSerializerState\n  ) {\n    this.realm = realm;\n    this.statistics = statistics;\n    this.reactSerializerState = reactSerializerState;\n    this.logger = logger;\n    this.componentTreeState = this._createComponentTreeState();\n    this.alreadyEvaluatedRootNodes = new Map();\n    this.alreadyEvaluatedNestedClosures = new Set();\n    this.componentTreeConfig = componentTreeConfig;\n    this.nestedOptimizedClosures = [];\n    this.branchedComponentTrees = [];\n  }\n\n  realm: Realm;\n  statistics: ReactStatistics;\n  reactSerializerState: void | ReactSerializerState;\n  logger: void | Logger;\n  componentTreeState: ComponentTreeState;\n  alreadyEvaluatedRootNodes: Map<ECMAScriptSourceFunctionValue, ReactEvaluatedNode>;\n  alreadyEvaluatedNestedClosures: Set<FunctionValue>;\n  componentTreeConfig: ReactComponentTreeConfig;\n  currentEffectsStack: Array<Effects>;\n  nestedOptimizedClosures: Array<OptimizedClosure>;\n  branchedComponentTrees: Array<BranchReactComponentTree>;\n\n  resolveReactComponentTree(\n    componentType: ECMAScriptSourceFunctionValue,\n    props: ObjectValue | AbstractObjectValue | null,\n    context: ObjectValue | AbstractObjectValue | null,\n    evaluatedRootNode: ReactEvaluatedNode\n  ): Effects {\n    const resolveComponentTree = () => {\n      try {\n        let initialProps = props || getInitialProps(this.realm, componentType);\n        let initialContext = context || getInitialContext(this.realm, componentType);\n        this.alreadyEvaluatedRootNodes.set(componentType, evaluatedRootNode);\n        let { result } = this._resolveComponent(\n          componentType,\n          initialProps,\n          initialContext,\n          \"ROOT\",\n          null,\n          evaluatedRootNode\n        );\n        this.statistics.optimizedTrees++;\n        return result;\n      } catch (error) {\n        this._handleComponentTreeRootFailure(error, evaluatedRootNode);\n        // flow belives we can get here, when it should never be possible\n        invariant(false, \"resolveReactComponentTree error not handled correctly\");\n      }\n    };\n\n    let effects = this.realm.wrapInGlobalEnv(() =>\n      this.realm.evaluatePure(\n        () =>\n          this.realm.evaluateForEffects(\n            resolveComponentTree,\n            /*state*/ null,\n            `react component: ${getComponentName(this.realm, componentType)}`\n          ),\n        this._handleReportedSideEffect\n      )\n    );\n    this._handleNestedOptimizedClosuresFromEffects(effects, evaluatedRootNode);\n    return effects;\n  }\n\n  _handleNestedOptimizedClosuresFromEffects(effects: Effects, evaluatedNode: ReactEvaluatedNode) {\n    for (let { nestedEffects } of this.nestedOptimizedClosures) {\n      if (nestedEffects.length === 0) {\n        nestedEffects.push(...nestedEffects, effects);\n      }\n    }\n  }\n\n  resolveNestedOptimizedClosure(\n    func: ECMAScriptSourceFunctionValue | BoundFunctionValue,\n    nestedEffects: Array<Effects>,\n    componentType: Value | null,\n    context: ObjectValue | AbstractObjectValue | null,\n    branchState: BranchState | null,\n    evaluatedNode: ReactEvaluatedNode\n  ): Effects {\n    const resolveOptimizedClosure = () => {\n      let baseObject = this.realm.$GlobalEnv.environmentRecord.WithBaseObject();\n      // we want to optimize the function that is bound\n      if (func instanceof BoundFunctionValue) {\n        // we want to set the \"this\" to be the bound object\n        // for firstRender this will optimize the function\n        // for updates, \"this\" will be intrinsic, so either way\n        // they should both work\n        baseObject = func.$BoundThis;\n        invariant(func.$BoundTargetFunction instanceof ECMAScriptSourceFunctionValue);\n        func = func.$BoundTargetFunction;\n      }\n      let numArgs = func.getLength();\n      let args = [];\n      let targetFunc = func;\n\n      this.alreadyEvaluatedNestedClosures.add(func);\n      invariant(targetFunc instanceof ECMAScriptSourceFunctionValue);\n      let params = targetFunc.$FormalParameters;\n      if (numArgs && numArgs > 0 && params) {\n        for (let parameterId of params) {\n          if (t.isIdentifier(parameterId)) {\n            // Create an AbstractValue similar to __abstract being called\n            args.push(\n              AbstractValue.createAbstractArgument(\n                this.realm,\n                ((parameterId: any): BabelNodeIdentifier).name,\n                targetFunc.expressionLocation\n              )\n            );\n          } else {\n            this.realm.handleError(\n              new CompilerDiagnostic(\n                \"Non-identifier args to additional functions unsupported\",\n                targetFunc.expressionLocation,\n                \"PP1005\",\n                \"FatalError\"\n              )\n            );\n            throw new FatalError(\"Non-identifier args to additional functions unsupported\");\n          }\n        }\n      }\n      try {\n        invariant(\n          baseObject instanceof ObjectValue ||\n            baseObject instanceof AbstractObjectValue ||\n            baseObject instanceof UndefinedValue\n        );\n        let value = getValueFromFunctionCall(this.realm, func, baseObject, args);\n        invariant(componentType instanceof Value);\n        invariant(context instanceof ObjectValue || context instanceof AbstractObjectValue);\n        let result = this._resolveDeeply(componentType, value, context, \"NEW_BRANCH\", branchState, evaluatedNode);\n        this.statistics.optimizedNestedClosures++;\n        return result;\n      } catch (error) {\n        this._handleComponentTreeRootFailure(error, evaluatedNode);\n        // flow belives we can get here, when it should never be possible\n        invariant(false, \"resolveNestedOptimizedClosure error not handled correctly\");\n      }\n    };\n\n    let effects = this.realm.wrapInGlobalEnv(() =>\n      this.realm.evaluatePure(() =>\n        evaluateWithNestedParentEffects(this.realm, nestedEffects, () =>\n          this.realm.evaluateForEffects(resolveOptimizedClosure, /*state*/ null, `react nested optimized closure`)\n        )\n      )\n    );\n    this._handleNestedOptimizedClosuresFromEffects(effects, evaluatedNode);\n    return effects;\n  }\n\n  clearComponentTreeState(): void {\n    this.componentTreeState = this._createComponentTreeState();\n  }\n\n  _queueOptimizedClosure(\n    func: ECMAScriptSourceFunctionValue | BoundFunctionValue,\n    evaluatedNode: ReactEvaluatedNode,\n    componentType: Value | null,\n    context: ObjectValue | AbstractObjectValue | null,\n    branchState: BranchState | null\n  ): void {\n    this.nestedOptimizedClosures.push({\n      evaluatedNode,\n      func,\n      nestedEffects: [],\n      componentType,\n      context,\n      branchState,\n    });\n  }\n\n  _queueNewComponentTree(\n    rootValue: Value,\n    evaluatedNode: ReactEvaluatedNode,\n    props?: ObjectValue | AbstractObjectValue | null = null,\n    context?: ObjectValue | AbstractObjectValue | null = null\n  ): void {\n    if (rootValue instanceof SymbolValue) {\n      return;\n    }\n    invariant(rootValue instanceof ECMAScriptSourceFunctionValue || rootValue instanceof AbstractValue);\n    this.componentTreeState.deadEnds++;\n    let componentType = getComponentTypeFromRootValue(this.realm, rootValue);\n    if (componentType !== null && !this.hasEvaluatedRootNode(componentType, evaluatedNode)) {\n      this.branchedComponentTrees.push({\n        context,\n        evaluatedNode,\n        props,\n        rootValue,\n      });\n    }\n  }\n\n  _resolveComplexClassComponent(\n    componentType: ECMAScriptSourceFunctionValue,\n    props: ObjectValue | AbstractValue | AbstractObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    classMetadata: ClassComponentMetadata,\n    branchStatus: BranchStatusEnum,\n    branchState: BranchState | null,\n    evaluatedNode: ReactEvaluatedNode\n  ): Value {\n    if (branchStatus !== \"ROOT\") {\n      // if the tree is simple and we're not in a branch, we can make this tree complex\n      // and make this complex component the root\n      let evaluatedComplexNode = this.alreadyEvaluatedRootNodes.get(componentType);\n      if (\n        branchStatus === \"NO_BRANCH\" &&\n        this.componentTreeState.status === \"SIMPLE\" &&\n        evaluatedComplexNode &&\n        evaluatedComplexNode.status !== \"RENDER_PROPS\"\n      ) {\n        this.componentTreeState.componentType = componentType;\n      } else {\n        this._queueNewComponentTree(componentType, evaluatedNode);\n        evaluatedNode.status = \"NEW_TREE\";\n        throw new NewComponentTreeBranch(evaluatedNode);\n      }\n    }\n    this.componentTreeState.status = \"COMPLEX\";\n    // create a new instance of this React class component\n    let instance = createClassInstance(this.realm, componentType, props, context, classMetadata);\n    // get the \"render\" method off the instance\n    let renderMethod = Get(this.realm, instance, \"render\");\n    invariant(renderMethod instanceof ECMAScriptSourceFunctionValue);\n    // the render method doesn't have any arguments, so we just assign the context of \"this\" to be the instance\n    return getValueFromFunctionCall(this.realm, renderMethod, instance, []);\n  }\n\n  _resolveSimpleClassComponent(\n    componentType: ECMAScriptSourceFunctionValue,\n    props: ObjectValue | AbstractValue | AbstractObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    branchState: BranchState | null,\n    evaluatedNode: ReactEvaluatedNode\n  ): Value {\n    // create a new simple instance of this React class component\n    let instance = createSimpleClassInstance(this.realm, componentType, props, context);\n    // get the \"render\" method off the instance\n    let renderMethod = Get(this.realm, instance, \"render\");\n    invariant(renderMethod instanceof ECMAScriptSourceFunctionValue);\n    // the render method doesn't have any arguments, so we just assign the context of \"this\" to be the instance\n    return getValueFromFunctionCall(this.realm, renderMethod, instance, []);\n  }\n\n  _resolveFunctionalComponent(\n    componentType: ECMAScriptSourceFunctionValue,\n    props: ObjectValue | AbstractValue | AbstractObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    evaluatedNode: ReactEvaluatedNode\n  ) {\n    return getValueFromFunctionCall(this.realm, componentType, this.realm.intrinsics.undefined, [props, context]);\n  }\n\n  _getClassComponentMetadata(\n    componentType: ECMAScriptSourceFunctionValue,\n    props: ObjectValue | AbstractValue | AbstractObjectValue,\n    context: ObjectValue | AbstractObjectValue\n  ): ClassComponentMetadata {\n    if (this.realm.react.classComponentMetadata.has(componentType)) {\n      let classMetadata = this.realm.react.classComponentMetadata.get(componentType);\n      invariant(classMetadata);\n      return classMetadata;\n    }\n    // get all this assignments in the constructor\n    let classMetadata = evaluateClassConstructor(this.realm, componentType, props, context);\n    this.realm.react.classComponentMetadata.set(componentType, classMetadata);\n    return classMetadata;\n  }\n\n  _resolveContextProviderComponent(\n    componentType: Value,\n    reactElement: ObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    branchState: BranchState | null,\n    evaluatedNode: ReactEvaluatedNode\n  ): Value {\n    let typeValue = getProperty(this.realm, reactElement, \"type\");\n    let propsValue = getProperty(this.realm, reactElement, \"props\");\n\n    let evaluatedChildNode = createReactEvaluatedNode(\"NORMAL\", \"Context.Provider\");\n    evaluatedNode.children.push(evaluatedChildNode);\n    this.statistics.componentsEvaluated++;\n    invariant(typeValue instanceof ObjectValue || typeValue instanceof AbstractObjectValue);\n    const contextConsumer = getProperty(this.realm, typeValue, \"context\");\n    invariant(contextConsumer instanceof ObjectValue || contextConsumer instanceof AbstractObjectValue);\n    let lastValueProp = getProperty(this.realm, contextConsumer, \"currentValue\");\n    this._incremementReferenceForContextNode(contextConsumer);\n\n    const setContextCurrentValue = value => {\n      if (value instanceof Value) {\n        // update the currentValue\n        setProperty(contextConsumer, \"currentValue\", value);\n      }\n    };\n    // if we have a value prop, set it\n    if (propsValue instanceof ObjectValue || propsValue instanceof AbstractObjectValue) {\n      let valueProp = Get(this.realm, propsValue, \"value\");\n      setContextCurrentValue(valueProp);\n    }\n    if (this.componentTreeConfig.firstRenderOnly) {\n      if (propsValue instanceof ObjectValue) {\n        let resolvedReactElement = this._resolveReactElementHostChildren(\n          componentType,\n          reactElement,\n          context,\n          branchStatus,\n          branchState,\n          evaluatedChildNode\n        );\n        let resolvedPropsValue = getProperty(this.realm, resolvedReactElement, \"props\");\n        invariant(resolvedPropsValue instanceof ObjectValue || resolvedPropsValue instanceof AbstractObjectValue);\n        setContextCurrentValue(lastValueProp);\n        this._decremementReferenceForContextNode(contextConsumer);\n        // if we no dead ends, we know the rest of the tree and can safely remove the provider\n        if (this.componentTreeState.deadEnds === 0) {\n          let childrenValue = Get(this.realm, resolvedPropsValue, \"children\");\n          evaluatedChildNode.status = \"INLINED\";\n          this.statistics.inlinedComponents++;\n          return childrenValue;\n        }\n        return resolvedReactElement;\n      }\n    }\n    let children = this._resolveReactElementHostChildren(\n      componentType,\n      reactElement,\n      context,\n      branchStatus,\n      branchState,\n      evaluatedChildNode\n    );\n    setContextCurrentValue(lastValueProp);\n    this._decremementReferenceForContextNode(contextConsumer);\n    return children;\n  }\n\n  _decremementReferenceForContextNode(contextNode: ObjectValue | AbstractObjectValue): void {\n    let references = this.componentTreeState.contextNodeReferences.get(contextNode);\n    if (!references) {\n      references = 0;\n    } else {\n      references--;\n    }\n    this.componentTreeState.contextNodeReferences.set(contextNode, references);\n  }\n\n  _incremementReferenceForContextNode(contextNode: ObjectValue | AbstractObjectValue): void {\n    let references = this.componentTreeState.contextNodeReferences.get(contextNode);\n    if (!references) {\n      references = 1;\n    } else {\n      references++;\n    }\n    this.componentTreeState.contextNodeReferences.set(contextNode, references);\n  }\n\n  _hasReferenceForContextNode(contextNode: ObjectValue | AbstractObjectValue): boolean {\n    if (this.componentTreeState.contextNodeReferences.has(contextNode)) {\n      let references = this.componentTreeState.contextNodeReferences.get(contextNode);\n      if (!references) {\n        return false;\n      }\n      return references > 0;\n    }\n    return false;\n  }\n\n  _resolveContextConsumerComponent(\n    componentType: Value,\n    reactElement: ObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchState: BranchState | null,\n    evaluatedNode: ReactEvaluatedNode\n  ): Value | void {\n    let typeValue = getProperty(this.realm, reactElement, \"type\");\n    let propsValue = getProperty(this.realm, reactElement, \"props\");\n    let evaluatedChildNode = createReactEvaluatedNode(\"RENDER_PROPS\", \"Context.Consumer\");\n    evaluatedNode.children.push(evaluatedChildNode);\n\n    if (propsValue instanceof ObjectValue || propsValue instanceof AbstractObjectValue) {\n      // get the \"render\" prop child off the instance\n      if (propsValue instanceof ObjectValue && propsValue.properties.has(\"children\")) {\n        let renderProp = getProperty(this.realm, propsValue, \"children\");\n\n        this._findReactComponentTrees(propsValue, evaluatedChildNode, \"NORMAL_FUNCTIONS\");\n        if (renderProp instanceof ECMAScriptSourceFunctionValue) {\n          if (this.componentTreeConfig.firstRenderOnly) {\n            if (typeValue instanceof ObjectValue || typeValue instanceof AbstractObjectValue) {\n              // make sure this context is in our tree\n              if (this._hasReferenceForContextNode(typeValue)) {\n                let valueProp = Get(this.realm, typeValue, \"currentValue\");\n                let result = getValueFromFunctionCall(this.realm, renderProp, this.realm.intrinsics.undefined, [\n                  valueProp,\n                ]);\n                this.statistics.inlinedComponents++;\n                this.statistics.componentsEvaluated++;\n                evaluatedChildNode.status = \"INLINED\";\n                return result;\n              }\n            }\n          }\n          this._queueOptimizedClosure(renderProp, evaluatedChildNode, componentType, context, branchState);\n          return;\n        } else {\n          this._findReactComponentTrees(renderProp, evaluatedChildNode, \"NESTED_CLOSURES\");\n        }\n      }\n    }\n    this.componentTreeState.deadEnds++;\n    return;\n  }\n\n  _resolveForwardRefComponent(\n    componentType: Value,\n    reactElement: ObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    branchState: BranchState | null,\n    evaluatedNode: ReactEvaluatedNode\n  ): Value | void {\n    let typeValue = getProperty(this.realm, reactElement, \"type\");\n    let propsValue = getProperty(this.realm, reactElement, \"props\");\n    let refValue = getProperty(this.realm, reactElement, \"ref\");\n    invariant(typeValue instanceof AbstractValue || typeValue instanceof ObjectValue);\n    let reactHint = this.realm.react.abstractHints.get(typeValue);\n\n    invariant(reactHint !== undefined);\n    let [forwardedComponent] = reactHint.args;\n    let evaluatedChildNode = createReactEvaluatedNode(\"FORWARD_REF\", getComponentName(this.realm, forwardedComponent));\n    evaluatedNode.children.push(evaluatedChildNode);\n    invariant(\n      forwardedComponent instanceof ECMAScriptSourceFunctionValue,\n      \"expect React.forwardRef() to be passed function value\"\n    );\n    let value = getValueFromFunctionCall(this.realm, forwardedComponent, this.realm.intrinsics.undefined, [\n      propsValue,\n      refValue,\n    ]);\n    return this._resolveDeeply(componentType, value, context, branchStatus, branchState, evaluatedChildNode);\n  }\n\n  _resolveRelayQueryRendererComponent(\n    componentType: Value,\n    reactElement: ObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchState: BranchState | null,\n    evaluatedNode: ReactEvaluatedNode\n  ): Value | void {\n    let typeValue = getProperty(this.realm, reactElement, \"type\");\n    let propsValue = getProperty(this.realm, reactElement, \"props\");\n\n    let evaluatedChildNode = createReactEvaluatedNode(\"RENDER_PROPS\", getComponentName(this.realm, typeValue));\n    evaluatedNode.children.push(evaluatedChildNode);\n\n    if (propsValue instanceof ObjectValue || propsValue instanceof AbstractObjectValue) {\n      // get the \"render\" prop\n      if (propsValue instanceof ObjectValue && propsValue.properties.has(\"render\")) {\n        let renderProp = getProperty(this.realm, propsValue, \"render\");\n\n        if (renderProp instanceof ECMAScriptSourceFunctionValue) {\n          this._queueOptimizedClosure(renderProp, evaluatedChildNode, componentType, context, branchState);\n        } else if (renderProp instanceof AbstractValue) {\n          this._findReactComponentTrees(\n            renderProp,\n            evaluatedChildNode,\n            \"NESTED_CLOSURES\",\n            componentType,\n            context,\n            branchState\n          );\n        }\n      }\n      this._findReactComponentTrees(propsValue, evaluatedChildNode, \"NORMAL_FUNCTIONS\");\n      return;\n    }\n    // this is the worst case, we were unable to find the render prop function\n    // and won't be able to find any further components to evaluate as trees\n    // because of that\n    this.componentTreeState.deadEnds++;\n  }\n\n  _resolveClassComponent(\n    componentType: ECMAScriptSourceFunctionValue,\n    props: ObjectValue | AbstractValue | AbstractObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    branchState: BranchState | null,\n    evaluatedNode: ReactEvaluatedNode\n  ): Value {\n    let value;\n\n    let classMetadata = this._getClassComponentMetadata(componentType, props, context);\n    let { instanceProperties, instanceSymbols } = classMetadata;\n\n    // if there were no this assignments we can try and render it as a simple class component\n    if (instanceProperties.size === 0 && instanceSymbols.size === 0) {\n      // We first need to know what type of class component we're dealing with.\n      // A \"simple\" class component is defined as:\n      //\n      // - having only a \"render\" method\n      // - having no lifecycle events\n      // - having no state\n      // - having no instance variables\n      //\n      // the only things a class component should be able to access on \"this\" are:\n      // - this.props\n      // - this.context\n      // - this._someRenderMethodX() etc\n      //\n      // Otherwise, the class component is a \"complex\" one.\n      // To begin with, we don't know what type of component it is, so we try and render it as if it were\n      // a simple component using the above heuristics. If an error occurs during this process, we assume\n      // that the class wasn't simple, then try again with the \"complex\" heuristics.\n      try {\n        value = this._resolveSimpleClassComponent(\n          componentType,\n          props,\n          context,\n          branchStatus,\n          branchState,\n          evaluatedNode\n        );\n      } catch (error) {\n        // if we get back a SimpleClassBailOut error, we know that this class component\n        // wasn't a simple one and is likely to be a complex class component instead\n        if (error instanceof SimpleClassBailOut) {\n          // the component was not simple, so we continue with complex case\n        } else {\n          // else we rethrow the error\n          throw error;\n        }\n      }\n    }\n    // handle the complex class component if there is not value\n    if (value === undefined) {\n      value = this._resolveComplexClassComponent(\n        componentType,\n        props,\n        context,\n        classMetadata,\n        branchStatus,\n        branchState,\n        evaluatedNode\n      );\n    }\n    return value;\n  }\n\n  _resolveClassComponentForFirstRenderOnly(\n    componentType: ECMAScriptSourceFunctionValue,\n    props: ObjectValue | AbstractValue | AbstractObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    branchState: BranchState | null,\n    evaluatedNode: ReactEvaluatedNode\n  ): Value {\n    // create a new simple instance of this React class component\n    let instance = createClassInstanceForFirstRenderOnly(this.realm, componentType, props, context, evaluatedNode);\n    let getDerivedStateFromProps = Get(this.realm, componentType, \"getDerivedStateFromProps\");\n    let getSnapshotBeforeUpdate = Get(this.realm, instance, \"getSnapshotBeforeUpdate\");\n\n    // if either getDerivedStateFromProps or getSnapshotBeforeUpdate exist, then\n    // we don't try and execute componentWillMount and UNSAFE_componentWillMount\n    if (\n      getDerivedStateFromProps !== this.realm.intrinsics.undefined ||\n      getSnapshotBeforeUpdate !== this.realm.intrinsics.undefined\n    ) {\n      if (getDerivedStateFromProps instanceof ECMAScriptSourceFunctionValue && getDerivedStateFromProps.$Call) {\n        applyGetDerivedStateFromProps(this.realm, getDerivedStateFromProps, instance, props);\n      }\n    } else {\n      // get the \"componentWillMount\" and \"render\" methods off the instance\n      let componentWillMount = Get(this.realm, instance, \"componentWillMount\");\n\n      if (componentWillMount instanceof ECMAScriptSourceFunctionValue && componentWillMount.$Call) {\n        componentWillMount.$Call(instance, []);\n      }\n      let unsafeComponentWillMount = Get(this.realm, instance, \"UNSAFE_componentWillMount\");\n\n      if (unsafeComponentWillMount instanceof ECMAScriptSourceFunctionValue && unsafeComponentWillMount.$Call) {\n        unsafeComponentWillMount.$Call(instance, []);\n      }\n    }\n    let renderMethod = Get(this.realm, instance, \"render\");\n\n    invariant(renderMethod instanceof ECMAScriptSourceFunctionValue);\n    return getValueFromFunctionCall(this.realm, renderMethod, instance, []);\n  }\n\n  _resolveRelayContainer(\n    reactHint: ReactHint,\n    props: ObjectValue | AbstractValue | AbstractObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    branchState: BranchState | null,\n    evaluatedNode: ReactEvaluatedNode\n  ) {\n    evaluatedNode.status = \"INLINED\";\n    evaluatedNode.message = \"RelayContainer\";\n    invariant(reactHint.firstRenderValue instanceof Value);\n    // for better serialization, ensure context has the right abstract properties defined\n    if (getProperty(this.realm, context, \"relay\") === this.realm.intrinsics.undefined) {\n      let abstractRelayContext = AbstractValue.createAbstractObject(this.realm, \"context.relay\");\n      let abstractRelayEnvironment = AbstractValue.createAbstractObject(this.realm, \"context.relay.environment\");\n      let abstractRelayInternal = AbstractValue.createAbstractObject(\n        this.realm,\n        \"context.relay.environment.unstable_internal\"\n      );\n      setProperty(context, \"relay\", abstractRelayContext);\n      setProperty(abstractRelayContext, \"environment\", abstractRelayEnvironment);\n      setProperty(abstractRelayEnvironment, \"unstable_internal\", abstractRelayInternal);\n    }\n    // add contextType to this component\n    this.componentTreeState.contextTypes.add(\"relay\");\n    return this._resolveComponent(reactHint.firstRenderValue, props, context, branchStatus, branchState, evaluatedNode);\n  }\n\n  _resolveComponent(\n    componentType: Value,\n    props: ObjectValue | AbstractValue | AbstractObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    branchState: BranchState | null,\n    evaluatedNode: ReactEvaluatedNode\n  ) {\n    if (doNotOptimizeComponent(this.realm, componentType)) {\n      throw new DoNotOptimize(\"__reactCompilerDoNotOptimize flag detected\");\n    }\n    this.statistics.componentsEvaluated++;\n    if (valueIsKnownReactAbstraction(this.realm, componentType)) {\n      invariant(componentType instanceof AbstractValue);\n      let reactHint = this.realm.react.abstractHints.get(componentType);\n\n      invariant(reactHint);\n      if (\n        typeof reactHint !== \"string\" &&\n        reactHint.object === this.realm.fbLibraries.reactRelay &&\n        this.componentTreeConfig.firstRenderOnly\n      ) {\n        return this._resolveRelayContainer(reactHint, props, context, branchStatus, branchState, evaluatedNode);\n      }\n      this._queueNewComponentTree(componentType, evaluatedNode);\n      evaluatedNode.status = \"NEW_TREE\";\n      evaluatedNode.message = \"RelayContainer\";\n      throw new NewComponentTreeBranch(evaluatedNode);\n    }\n    invariant(componentType instanceof ECMAScriptSourceFunctionValue);\n    let value;\n    let childContext = context;\n\n    // first we check if it's a legacy class component\n    if (valueIsLegacyCreateClassComponent(this.realm, componentType)) {\n      throw new ExpectedBailOut(\"components created with create-react-class are not supported\");\n    } else if (valueIsClassComponent(this.realm, componentType)) {\n      if (this.componentTreeConfig.firstRenderOnly) {\n        value = this._resolveClassComponentForFirstRenderOnly(\n          componentType,\n          props,\n          context,\n          branchStatus,\n          branchState,\n          evaluatedNode\n        );\n      } else {\n        value = this._resolveClassComponent(componentType, props, context, branchStatus, branchState, evaluatedNode);\n      }\n    } else {\n      value = this._resolveFunctionalComponent(componentType, props, context, evaluatedNode);\n      if (valueIsFactoryClassComponent(this.realm, value)) {\n        invariant(value instanceof ObjectValue);\n        if (branchStatus !== \"ROOT\") {\n          throw new ExpectedBailOut(\"non-root factory class components are not suppoted\");\n        } else {\n          // TODO support factory components\n          return {\n            result: value,\n            childContext,\n          };\n        }\n      }\n    }\n    invariant(value !== undefined);\n    return {\n      result: this._resolveDeeply(\n        componentType,\n        value,\n        context,\n        branchStatus === \"ROOT\" ? \"NO_BRANCH\" : branchStatus,\n        branchState,\n        evaluatedNode\n      ),\n      childContext,\n    };\n  }\n\n  _createComponentTreeState(): ComponentTreeState {\n    return {\n      componentType: undefined,\n      contextTypes: new Set(),\n      deadEnds: 0,\n      status: \"SIMPLE\",\n      contextNodeReferences: new Map(),\n    };\n  }\n\n  _getComponentResolutionStrategy(value: Value): ComponentResolutionStrategy {\n    // check if it's a ReactRelay.QueryRenderer\n    if (this.realm.fbLibraries.reactRelay !== undefined) {\n      let QueryRenderer = getProperty(this.realm, this.realm.fbLibraries.reactRelay, \"QueryRenderer\");\n      if (value === QueryRenderer) {\n        return \"RELAY_QUERY_RENDERER\";\n      }\n    }\n    if (value === getReactSymbol(\"react.fragment\", this.realm)) {\n      return \"FRAGMENT\";\n    }\n    if (value instanceof AbstractValue && this.realm.react.abstractHints.has(value)) {\n      let reactHint = this.realm.react.abstractHints.get(value);\n\n      invariant(reactHint !== undefined);\n      if (reactHint.object === this.realm.fbLibraries.react && reactHint.propertyName === \"forwardRef\") {\n        return \"FORWARD_REF\";\n      }\n    }\n    if ((value instanceof ObjectValue || value instanceof AbstractObjectValue) && value.kind !== \"conditional\") {\n      let $$typeof = getProperty(this.realm, value, \"$$typeof\");\n\n      if ($$typeof === getReactSymbol(\"react.context\", this.realm)) {\n        return \"CONTEXT_CONSUMER\";\n      }\n      if ($$typeof === getReactSymbol(\"react.provider\", this.realm)) {\n        return \"CONTEXT_PROVIDER\";\n      }\n    }\n    return \"NORMAL\";\n  }\n\n  _resolveReactDomPortal(\n    createPortalNode: AbstractValue,\n    args: Array<Value>,\n    componentType: Value,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    branchState: BranchState | null,\n    evaluatedNode: ReactEvaluatedNode\n  ) {\n    let [reactPortalValue, domNodeValue] = args;\n    let evaluatedChildNode = createReactEvaluatedNode(\"INLINED\", \"ReactDOM.createPortal\");\n    let resolvedReactPortalValue = this._resolveDeeply(\n      componentType,\n      reactPortalValue,\n      context,\n      branchStatus,\n      branchState,\n      evaluatedChildNode\n    );\n    evaluatedNode.children.push(evaluatedChildNode);\n    if (resolvedReactPortalValue !== reactPortalValue) {\n      this.statistics.inlinedComponents++;\n      let reactDomValue = this.realm.fbLibraries.reactDom;\n      invariant(reactDomValue instanceof ObjectValue);\n      let reactDomPortalFunc = getProperty(this.realm, reactDomValue, \"createPortal\");\n      return AbstractValue.createTemporalFromBuildFunction(\n        this.realm,\n        ObjectValue,\n        [reactDomPortalFunc, resolvedReactPortalValue, domNodeValue],\n        ([renderNode, ..._args]) => {\n          return t.callExpression(renderNode, ((_args: any): Array<any>));\n        }\n      );\n    }\n    return createPortalNode;\n  }\n\n  _resolveAbstractConditionalValue(\n    componentType: Value,\n    condValue: AbstractValue,\n    consequentVal: Value,\n    alternateVal: Value,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    branchState: BranchState | null,\n    evaluatedNode: ReactEvaluatedNode\n  ) {\n    let newBranchState = new BranchState();\n    let value = this.realm.evaluateWithAbstractConditional(\n      condValue,\n      () => {\n        return this.realm.evaluateForEffects(\n          () => this._resolveDeeply(componentType, consequentVal, context, \"NEW_BRANCH\", newBranchState, evaluatedNode),\n          null,\n          \"_resolveAbstractConditionalValue consequent\"\n        );\n      },\n      () => {\n        return this.realm.evaluateForEffects(\n          () => this._resolveDeeply(componentType, alternateVal, context, \"NEW_BRANCH\", newBranchState, evaluatedNode),\n          null,\n          \"_resolveAbstractConditionalValue consequent\"\n        );\n      }\n    );\n    if (this.reactSerializerState !== undefined) {\n      let didBranch = newBranchState.applyBranchedLogic(this.realm, this.reactSerializerState);\n      if (didBranch && branchState !== null) {\n        branchState.mergeBranchedLogic(newBranchState);\n      }\n    }\n    return value;\n  }\n\n  _resolveAbstractValue(\n    componentType: Value,\n    value: AbstractValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    branchState: BranchState | null,\n    evaluatedNode: ReactEvaluatedNode\n  ): Value {\n    invariant(this.realm.generator);\n    // TODO investigate what other kinds than \"conditional\" might be safe to deeply resolve\n    if (value.kind === \"conditional\") {\n      let [condValue, consequentVal, alternateVal] = value.args;\n      invariant(condValue instanceof AbstractValue);\n      return this._resolveAbstractConditionalValue(\n        componentType,\n        condValue,\n        consequentVal,\n        alternateVal,\n        context,\n        branchStatus,\n        branchState,\n        evaluatedNode\n      );\n    } else {\n      if (value instanceof AbstractValue && this.realm.react.abstractHints.has(value)) {\n        let reactHint = this.realm.react.abstractHints.get(value);\n\n        invariant(reactHint !== undefined);\n        if (reactHint.object === this.realm.fbLibraries.reactDom && reactHint.propertyName === \"createPortal\") {\n          return this._resolveReactDomPortal(\n            value,\n            reactHint.args,\n            componentType,\n            context,\n            branchStatus,\n            branchState,\n            evaluatedNode\n          );\n        }\n      }\n      this.componentTreeState.deadEnds++;\n    }\n    return value;\n  }\n\n  _resolveBranchedComponentType(\n    componentType: Value,\n    reactElement: ObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    branchState: BranchState | null,\n    evaluatedNode: ReactEvaluatedNode\n  ): Value {\n    let typeValue = getProperty(this.realm, reactElement, \"type\");\n    let propsValue = getProperty(this.realm, reactElement, \"props\");\n    let keyValue = getProperty(this.realm, reactElement, \"key\");\n    let refValue = getProperty(this.realm, reactElement, \"ref\");\n\n    const resolveBranch = (abstract: AbstractValue): Value => {\n      invariant(abstract.kind === \"conditional\", \"the reconciler tried to resolve a non conditional abstract\");\n      let condition = abstract.args[0];\n      invariant(condition instanceof AbstractValue);\n      let left = abstract.args[1];\n      let right = abstract.args[2];\n\n      if (left instanceof AbstractValue && left.kind === \"conditional\") {\n        left = resolveBranch(left);\n      } else {\n        invariant(propsValue instanceof ObjectValue || propsValue instanceof AbstractValue);\n        left = createInternalReactElement(this.realm, left, keyValue, refValue, propsValue);\n      }\n      if (right instanceof AbstractValue && right.kind === \"conditional\") {\n        right = resolveBranch(right);\n      } else {\n        invariant(propsValue instanceof ObjectValue || propsValue instanceof AbstractValue);\n        right = createInternalReactElement(this.realm, right, keyValue, refValue, propsValue);\n      }\n      return AbstractValue.createFromConditionalOp(this.realm, condition, left, right);\n    };\n    invariant(typeValue instanceof AbstractValue);\n    return this._resolveDeeply(\n      componentType,\n      resolveBranch(typeValue),\n      context,\n      branchStatus,\n      branchState,\n      evaluatedNode\n    );\n  }\n\n  _resolveUnknownComponentType(reactElement: ObjectValue, evaluatedNode: ReactEvaluatedNode) {\n    let typeValue = getProperty(this.realm, reactElement, \"type\");\n    let propsValue = getProperty(this.realm, reactElement, \"props\");\n\n    this._findReactComponentTrees(propsValue, evaluatedNode, \"NORMAL_FUNCTIONS\");\n    if (typeValue instanceof AbstractValue) {\n      this._findReactComponentTrees(typeValue, evaluatedNode, \"FUNCTIONAL_COMPONENTS\");\n      return reactElement;\n    } else {\n      let evaluatedChildNode = createReactEvaluatedNode(\"BAIL-OUT\", getComponentName(this.realm, typeValue));\n      evaluatedNode.children.push(evaluatedChildNode);\n      let bailOutMessage = `type on <Component /> was not a ECMAScriptSourceFunctionValue`;\n      evaluatedChildNode.message = bailOutMessage;\n      this._assignBailOutMessage(reactElement, bailOutMessage);\n      this.componentTreeState.deadEnds++;\n      return reactElement;\n    }\n  }\n\n  _resolveReactElementBadRef(reactElement: ObjectValue, evaluatedNode: ReactEvaluatedNode) {\n    let typeValue = getProperty(this.realm, reactElement, \"type\");\n    let propsValue = getProperty(this.realm, reactElement, \"props\");\n\n    let evaluatedChildNode = createReactEvaluatedNode(\"BAIL-OUT\", getComponentName(this.realm, typeValue));\n    evaluatedNode.children.push(evaluatedChildNode);\n    let bailOutMessage = `refs are not supported on <Components />`;\n    evaluatedChildNode.message = bailOutMessage;\n\n    this._queueNewComponentTree(typeValue, evaluatedChildNode);\n    this._findReactComponentTrees(propsValue, evaluatedNode, \"NORMAL_FUNCTIONS\");\n    this._assignBailOutMessage(reactElement, bailOutMessage);\n    return reactElement;\n  }\n\n  _resolveReactElementUndefinedRender(\n    reactElement: ObjectValue,\n    evaluatedNode: ReactEvaluatedNode,\n    branchStatus: BranchStatusEnum,\n    branchState: BranchState | null\n  ) {\n    let typeValue = getProperty(this.realm, reactElement, \"type\");\n    let propsValue = getProperty(this.realm, reactElement, \"props\");\n\n    let evaluatedChildNode = createReactEvaluatedNode(\"BAIL-OUT\", getComponentName(this.realm, typeValue));\n    evaluatedNode.children.push(evaluatedChildNode);\n    let bailOutMessage = `undefined was returned from render`;\n    evaluatedChildNode.message = bailOutMessage;\n\n    this._assignBailOutMessage(reactElement, bailOutMessage);\n    this._findReactComponentTrees(propsValue, evaluatedNode, \"NORMAL_FUNCTIONS\");\n    if (branchStatus === \"NEW_BRANCH\" && branchState) {\n      return branchState.captureBranchedValue(typeValue, reactElement);\n    }\n    return reactElement;\n  }\n\n  _resolveReactElementHostChildren(\n    componentType: Value,\n    reactElement: ObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    branchState: BranchState | null,\n    evaluatedNode: ReactEvaluatedNode\n  ) {\n    let typeValue = getProperty(this.realm, reactElement, \"type\");\n    let propsValue = getProperty(this.realm, reactElement, \"props\");\n    let keyValue = getProperty(this.realm, reactElement, \"key\");\n    let refValue = getProperty(this.realm, reactElement, \"ref\");\n    // terminal host component. Start evaluating its children.\n    if (propsValue instanceof ObjectValue && propsValue.properties.has(\"children\")) {\n      let childrenValue = Get(this.realm, propsValue, \"children\");\n\n      if (childrenValue instanceof Value) {\n        let resolvedChildren = this._resolveDeeply(\n          componentType,\n          childrenValue,\n          context,\n          branchStatus,\n          branchState,\n          evaluatedNode\n        );\n        // we can optimize further and flatten arrays on non-composite components\n        if (resolvedChildren instanceof ArrayValue && !resolvedChildren.intrinsicName) {\n          resolvedChildren = flattenChildren(this.realm, resolvedChildren);\n        }\n        if (resolvedChildren !== childrenValue) {\n          let newProps = new ObjectValue(this.realm, this.realm.intrinsics.ObjectPrototype);\n\n          for (let [key, binding] of propsValue.properties) {\n            if (binding && binding.descriptor && binding.descriptor.enumerable && key !== \"children\") {\n              setProperty(newProps, key, getProperty(this.realm, propsValue, key));\n            }\n          }\n          setProperty(newProps, \"children\", resolvedChildren);\n          if (propsValue.isSimpleObject()) {\n            newProps.makeSimple();\n          }\n          if (propsValue.isPartialObject()) {\n            newProps.makePartial();\n          }\n          newProps.makeFinal();\n          return createInternalReactElement(this.realm, typeValue, keyValue, refValue, newProps);\n        }\n      }\n    }\n    return reactElement;\n  }\n\n  _resolveFragmentComponent(\n    componentType: Value,\n    reactElement: ObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    branchState: BranchState | null,\n    evaluatedNode: ReactEvaluatedNode\n  ) {\n    this.statistics.componentsEvaluated++;\n    if (this.componentTreeConfig.firstRenderOnly) {\n      let evaluatedChildNode = createReactEvaluatedNode(\"INLINED\", \"React.Fragment\");\n      evaluatedNode.children.push(evaluatedChildNode);\n      this.statistics.inlinedComponents++;\n      let children = this._resolveReactElementHostChildren(\n        componentType,\n        reactElement,\n        context,\n        branchStatus,\n        branchState,\n        evaluatedChildNode\n      );\n      return children;\n    } else {\n      let evaluatedChildNode = createReactEvaluatedNode(\"NORMAL\", \"React.Fragment\");\n      evaluatedNode.children.push(evaluatedChildNode);\n      return this._resolveReactElementHostChildren(\n        componentType,\n        reactElement,\n        context,\n        branchStatus,\n        branchState,\n        evaluatedChildNode\n      );\n    }\n  }\n\n  _resolveReactElement(\n    componentType: Value,\n    reactElement: ObjectValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    branchState: BranchState | null,\n    evaluatedNode: ReactEvaluatedNode\n  ) {\n    reactElement = this.componentTreeConfig.firstRenderOnly\n      ? sanitizeReactElementForFirstRenderOnly(this.realm, reactElement)\n      : reactElement;\n\n    let typeValue = getProperty(this.realm, reactElement, \"type\");\n    let propsValue = getProperty(this.realm, reactElement, \"props\");\n    let refValue = getProperty(this.realm, reactElement, \"ref\");\n\n    if (typeValue instanceof StringValue) {\n      return this._resolveReactElementHostChildren(\n        componentType,\n        reactElement,\n        context,\n        branchStatus,\n        branchState,\n        evaluatedNode\n      );\n    }\n    if (\n      !(\n        propsValue instanceof ObjectValue ||\n        propsValue instanceof AbstractObjectValue ||\n        propsValue instanceof AbstractValue\n      )\n    ) {\n      this._assignBailOutMessage(reactElement, `props on <Component /> was not not an ObjectValue or an AbstractValue`);\n      return reactElement;\n    }\n    let componentResolutionStrategy = this._getComponentResolutionStrategy(typeValue);\n\n    // we do not support \"ref\" on <Component /> ReactElements, unless it's a forwarded ref\n    if (!(refValue instanceof NullValue) && componentResolutionStrategy !== \"FORWARD_REF\") {\n      this._resolveReactElementBadRef(reactElement, evaluatedNode);\n    }\n    try {\n      let result;\n\n      switch (componentResolutionStrategy) {\n        case \"NORMAL\": {\n          if (typeValue instanceof AbstractValue && typeValue.kind === \"conditional\") {\n            return this._resolveBranchedComponentType(\n              componentType,\n              reactElement,\n              context,\n              branchStatus,\n              branchState,\n              evaluatedNode\n            );\n          }\n          if (\n            !(typeValue instanceof ECMAScriptSourceFunctionValue || valueIsKnownReactAbstraction(this.realm, typeValue))\n          ) {\n            return this._resolveUnknownComponentType(reactElement, evaluatedNode);\n          }\n          let evaluatedChildNode = createReactEvaluatedNode(\"INLINED\", getComponentName(this.realm, typeValue));\n          let render = this._resolveComponent(\n            typeValue,\n            propsValue,\n            context,\n            branchStatus === \"NEW_BRANCH\" ? \"BRANCH\" : branchStatus,\n            null,\n            evaluatedChildNode\n          );\n          if (this.logger !== undefined && this.realm.react.verbose && evaluatedChildNode.status === \"INLINED\") {\n            this.logger.logInformation(`    ✔ ${evaluatedChildNode.name} (inlined)`);\n          }\n          evaluatedNode.children.push(evaluatedChildNode);\n          result = render.result;\n          this.statistics.inlinedComponents++;\n          break;\n        }\n        case \"FRAGMENT\": {\n          return this._resolveFragmentComponent(\n            componentType,\n            reactElement,\n            context,\n            branchStatus,\n            branchState,\n            evaluatedNode\n          );\n        }\n        case \"RELAY_QUERY_RENDERER\": {\n          invariant(typeValue instanceof AbstractObjectValue);\n          result = this._resolveRelayQueryRendererComponent(\n            componentType,\n            reactElement,\n            context,\n            branchState,\n            evaluatedNode\n          );\n          break;\n        }\n        case \"CONTEXT_PROVIDER\": {\n          return this._resolveContextProviderComponent(\n            componentType,\n            reactElement,\n            context,\n            branchStatus,\n            branchState,\n            evaluatedNode\n          );\n        }\n        case \"CONTEXT_CONSUMER\": {\n          result = this._resolveContextConsumerComponent(\n            componentType,\n            reactElement,\n            context,\n            branchState,\n            evaluatedNode\n          );\n          break;\n        }\n        case \"FORWARD_REF\": {\n          result = this._resolveForwardRefComponent(\n            componentType,\n            reactElement,\n            context,\n            branchStatus,\n            branchState,\n            evaluatedNode\n          );\n          break;\n        }\n        default:\n          invariant(false, \"unsupported component resolution strategy\");\n      }\n\n      if (result === undefined) {\n        result = reactElement;\n      }\n      if (result instanceof UndefinedValue) {\n        return this._resolveReactElementUndefinedRender(reactElement, evaluatedNode, branchStatus, branchState);\n      }\n      if (branchStatus === \"NEW_BRANCH\" && branchState) {\n        return branchState.captureBranchedValue(typeValue, result);\n      }\n      return result;\n    } catch (error) {\n      return this._resolveComponentResolutionFailure(error, reactElement, evaluatedNode, branchStatus, branchState);\n    }\n  }\n\n  _handleComponentTreeRootFailure(error: Error | Completion, evaluatedRootNode: ReactEvaluatedNode): void {\n    if (error.name === \"Invariant Violation\") {\n      throw error;\n    } else if (error instanceof ReconcilerFatalError) {\n      throw new ReconcilerFatalError(error.message, evaluatedRootNode);\n    } else if (error instanceof UnsupportedSideEffect || error instanceof DoNotOptimize) {\n      throw new ReconcilerFatalError(\n        `Failed to render React component root \"${evaluatedRootNode.name}\" due to ${error.message}`,\n        evaluatedRootNode\n      );\n    } else if (error instanceof Completion) {\n      let value = error.value;\n      invariant(value instanceof ObjectValue);\n      let message = getProperty(this.realm, value, \"message\");\n      let stack = getProperty(this.realm, value, \"stack\");\n      invariant(message instanceof StringValue);\n      invariant(stack instanceof StringValue);\n      throw new ReconcilerFatalError(\n        `Failed to render React component \"${evaluatedRootNode.name}\" due to a JS error: ${message.value}\\n${\n          stack.value\n        }`,\n        evaluatedRootNode\n      );\n    }\n    let message;\n    if (error instanceof ExpectedBailOut) {\n      message = `Failed to optimize React component tree for \"${evaluatedRootNode.name}\" due to an expected bail-out: ${\n        error.message\n      }`;\n    } else if (error instanceof FatalError) {\n      message = `Failed to optimize React component tree for \"${\n        evaluatedRootNode.name\n      }\" due to a fatal error during evaluation: ${error.message}`;\n    } else {\n      // if we don't know what the error is, then best to rethrow\n      throw error;\n    }\n    throw new ReconcilerFatalError(message, evaluatedRootNode);\n  }\n\n  _resolveComponentResolutionFailure(\n    error: Error | Completion,\n    reactElement: ObjectValue,\n    evaluatedNode: ReactEvaluatedNode,\n    branchStatus: BranchStatusEnum,\n    branchState: BranchState | null\n  ): Value {\n    if (error.name === \"Invariant Violation\") {\n      throw error;\n    } else if (error instanceof ReconcilerFatalError) {\n      throw error;\n    } else if (error instanceof UnsupportedSideEffect) {\n      throw new ReconcilerFatalError(\n        `Failed to render React component \"${evaluatedNode.name}\" due to ${error.message}`,\n        evaluatedNode\n      );\n    } else if (error instanceof DoNotOptimize) {\n      return reactElement;\n    } else if (error instanceof Completion) {\n      let value = error.value;\n      invariant(value instanceof ObjectValue);\n      let message = getProperty(this.realm, value, \"message\");\n      let stack = getProperty(this.realm, value, \"stack\");\n      invariant(message instanceof StringValue);\n      invariant(stack instanceof StringValue);\n      throw new ReconcilerFatalError(\n        `Failed to render React component \"${evaluatedNode.name}\" due to a JS error: ${message.value}\\n${stack.value}`,\n        evaluatedNode\n      );\n    }\n    let typeValue = getProperty(this.realm, reactElement, \"type\");\n    let propsValue = getProperty(this.realm, reactElement, \"props\");\n    // assign a bail out message\n    if (error instanceof NewComponentTreeBranch) {\n      this._findReactComponentTrees(propsValue, evaluatedNode, \"NORMAL_FUNCTIONS\");\n      evaluatedNode.children.push(error.evaluatedNode);\n      // NO-OP (we don't queue a newComponentTree as this was already done)\n    } else {\n      // handle abrupt completions\n      let evaluatedChildNode = createReactEvaluatedNode(\"BAIL-OUT\", getComponentName(this.realm, typeValue));\n      evaluatedNode.children.push(evaluatedChildNode);\n      this._queueNewComponentTree(typeValue, evaluatedChildNode);\n      this._findReactComponentTrees(propsValue, evaluatedNode, \"NORMAL_FUNCTIONS\");\n      if (error instanceof ExpectedBailOut) {\n        evaluatedChildNode.message = error.message;\n        this._assignBailOutMessage(reactElement, error.message);\n      } else if (error instanceof FatalError) {\n        let message = \"evaluation failed\";\n        evaluatedChildNode.message = message;\n        this._assignBailOutMessage(reactElement, message);\n      } else {\n        evaluatedChildNode.message = `unknown error`;\n        throw error;\n      }\n    }\n    // a child component bailed out during component folding, so return the function value and continue\n    if (branchStatus === \"NEW_BRANCH\" && branchState) {\n      return branchState.captureBranchedValue(typeValue, reactElement);\n    }\n    return reactElement;\n  }\n\n  _resolveDeeply(\n    componentType: Value,\n    value: Value,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    branchState: BranchState | null,\n    evaluatedNode: ReactEvaluatedNode\n  ): Value {\n    if (\n      value instanceof StringValue ||\n      value instanceof NumberValue ||\n      value instanceof BooleanValue ||\n      value instanceof NullValue ||\n      value instanceof UndefinedValue\n    ) {\n      // terminal values\n      return value;\n    }\n    invariant(\n      !(value instanceof ObjectValue) || value._isFinal !== undefined,\n      `An object value was detected during React reconcilation without its bindings properly applied`\n    );\n    if (value instanceof AbstractValue) {\n      return this._resolveAbstractValue(componentType, value, context, branchStatus, branchState, evaluatedNode);\n    }\n    // TODO investigate what about other iterables type objects\n    if (value instanceof ArrayValue) {\n      return this._resolveArray(componentType, value, context, branchStatus, branchState, evaluatedNode);\n    }\n    if (value instanceof ObjectValue && isReactElement(value)) {\n      return this._resolveReactElement(componentType, value, context, branchStatus, branchState, evaluatedNode);\n    } else {\n      let location = getLocationFromValue(value.expressionLocation);\n      throw new ExpectedBailOut(`invalid return value from render${location}`);\n    }\n  }\n\n  _assignBailOutMessage(reactElement: ObjectValue, message: string): void {\n    // $BailOutReason is a field on ObjectValue that allows us to specify a message\n    // that gets serialized as a comment node during the ReactElement serialization stage\n    message = `Bail-out: ${message}`;\n    if (reactElement.$BailOutReason !== undefined) {\n      // merge bail out messages if one already exists\n      reactElement.$BailOutReason += `, ${message}`;\n    } else {\n      reactElement.$BailOutReason = message;\n    }\n  }\n\n  _resolveArray(\n    componentType: Value,\n    arrayValue: ArrayValue,\n    context: ObjectValue | AbstractObjectValue,\n    branchStatus: BranchStatusEnum,\n    branchState: BranchState | null,\n    evaluatedNode: ReactEvaluatedNode\n  ): ArrayValue {\n    if (ArrayValue.isIntrinsicAndHasWidenedNumericProperty(arrayValue)) {\n      let arrayHint = this.realm.react.arrayHints.get(arrayValue);\n\n      if (arrayHint !== undefined) {\n        let { func, thisVal } = arrayHint;\n        if (func instanceof ECMAScriptSourceFunctionValue || func instanceof BoundFunctionValue) {\n          if (thisVal && thisVal !== this.realm.intrinsics.undefined) {\n            throw new ExpectedBailOut(`abstract mapped arrays with \"this\" argument are not yet supported`);\n          }\n          this._queueOptimizedClosure(func, evaluatedNode, componentType, context, branchState);\n        }\n        return arrayValue;\n      }\n    }\n    return mapArrayValue(this.realm, arrayValue, elementValue =>\n      this._resolveDeeply(componentType, elementValue, context, \"NEW_BRANCH\", branchState, evaluatedNode)\n    );\n  }\n\n  hasEvaluatedRootNode(componentType: ECMAScriptSourceFunctionValue, evaluateNode: ReactEvaluatedNode): boolean {\n    if (this.alreadyEvaluatedRootNodes.has(componentType)) {\n      let alreadyEvaluatedNode = this.alreadyEvaluatedRootNodes.get(componentType);\n      invariant(alreadyEvaluatedNode);\n      evaluateNode.children = alreadyEvaluatedNode.children;\n      evaluateNode.status = alreadyEvaluatedNode.status;\n      evaluateNode.name = alreadyEvaluatedNode.name;\n      return true;\n    }\n    return false;\n  }\n\n  hasEvaluatedNestedClosure(func: ECMAScriptSourceFunctionValue | BoundFunctionValue): boolean {\n    return this.alreadyEvaluatedNestedClosures.has(func);\n  }\n\n  _findReactComponentTrees(\n    value: Value,\n    evaluatedNode: ReactEvaluatedNode,\n    treatFunctionsAs: \"NORMAL_FUNCTIONS\" | \"NESTED_CLOSURES\" | \"FUNCTIONAL_COMPONENTS\",\n    componentType?: Value,\n    context?: ObjectValue | AbstractObjectValue,\n    branchState?: BranchState | null\n  ): void {\n    if (value instanceof AbstractValue) {\n      if (value.args.length > 0) {\n        for (let arg of value.args) {\n          this._findReactComponentTrees(arg, evaluatedNode, treatFunctionsAs, componentType, context, branchState);\n        }\n      } else {\n        this.componentTreeState.deadEnds++;\n      }\n    } else if (valueIsKnownReactAbstraction(this.realm, value)) {\n      let evaluatedChildNode = createReactEvaluatedNode(\"NEW_TREE\", getComponentName(this.realm, value));\n      evaluatedNode.children.push(evaluatedChildNode);\n      this._queueNewComponentTree(value, evaluatedChildNode);\n    } else if (value instanceof ECMAScriptSourceFunctionValue || value instanceof BoundFunctionValue) {\n      if (valueIsClassComponent(this.realm, value) || treatFunctionsAs === \"FUNCTIONAL_COMPONENTS\") {\n        let evaluatedChildNode = createReactEvaluatedNode(\"NEW_TREE\", getComponentName(this.realm, value));\n        evaluatedNode.children.push(evaluatedChildNode);\n        this._queueNewComponentTree(value, evaluatedChildNode);\n      } else if (treatFunctionsAs === \"NESTED_CLOSURES\") {\n        invariant(componentType && context);\n        invariant(branchState !== undefined);\n        this._queueOptimizedClosure(value, evaluatedNode, componentType, context, branchState);\n      }\n    } else if (value instanceof ObjectValue) {\n      if (isReactElement(value)) {\n        let typeValue = getProperty(this.realm, value, \"type\");\n        let ref = getProperty(this.realm, value, \"ref\");\n        let props = getProperty(this.realm, value, \"props\");\n\n        if (valueIsKnownReactAbstraction(this.realm, typeValue) || typeValue instanceof ECMAScriptSourceFunctionValue) {\n          let evaluatedChildNode = createReactEvaluatedNode(\"NEW_TREE\", getComponentName(this.realm, typeValue));\n          evaluatedNode.children.push(evaluatedChildNode);\n          this._queueNewComponentTree(typeValue, evaluatedChildNode);\n        }\n        this._findReactComponentTrees(ref, evaluatedNode, treatFunctionsAs, componentType, context, branchState);\n        this._findReactComponentTrees(props, evaluatedNode, treatFunctionsAs, componentType, context, branchState);\n      } else {\n        for (let [propName, binding] of value.properties) {\n          if (binding && binding.descriptor && binding.descriptor.enumerable) {\n            this._findReactComponentTrees(\n              getProperty(this.realm, value, propName),\n              evaluatedNode,\n              treatFunctionsAs,\n              componentType,\n              context,\n              branchState\n            );\n          }\n        }\n      }\n    }\n  }\n\n  _handleReportedSideEffect(\n    sideEffectType: SideEffectType,\n    binding: void | Binding | PropertyBinding,\n    expressionLocation: any\n  ): void {\n    let location = getLocationFromValue(expressionLocation);\n\n    if (sideEffectType === \"MODIFIED_BINDING\") {\n      let name = binding ? `\"${((binding: any): Binding).name}\"` : \"unknown\";\n      throw new UnsupportedSideEffect(`side-effects from mutating the binding ${name}${location}`);\n    } else if (sideEffectType === \"MODIFIED_PROPERTY\" || sideEffectType === \"MODIFIED_GLOBAL\") {\n      let name = \"\";\n      let key = ((binding: any): PropertyBinding).key;\n      if (typeof key === \"string\") {\n        name = `\"${key}\"`;\n      }\n      if (sideEffectType === \"MODIFIED_PROPERTY\") {\n        throw new UnsupportedSideEffect(`side-effects from mutating a property ${name}${location}`);\n      } else {\n        throw new UnsupportedSideEffect(`side-effects from mutating the global object property ${name}${location}`);\n      }\n    } else if (sideEffectType === \"EXCEPTION_THROWN\") {\n      throw new UnsupportedSideEffect(`side-effects from throwing exception${location}`);\n    }\n  }\n}\n"]}