{"version":3,"sources":["../../src/react/elements.js"],"names":["createReactElement","createInternalReactElement","traverseReactElement","t","createPropsObject","realm","type","config","children","defaultProps","intrinsics","undefined","props","ObjectCreate","ObjectPrototype","key","null","ref","setProp","name","value","emptyString","Set","applyProperties","propKey","binding","properties","descriptor","enumerable","isPartialObject","isSimpleObject","args","push","makePartial","makeSimple","globalObj","$GlobalObject","objAssign","generator","createTemporalFromBuildFunction","methodNode","_args","callExpression","diagnostic","currentLocation","handleError","makeFinal","obj","CreateDataPropertyOrThrow","reactElement","traversalVisitor","typeValue","visitType","keyValue","visitKey","refValue","visitRef","propsValue","visitAbstractOrPartialProps","visitConcreteProps","has","childrenValue","intrinsicName","childrenLength","childrenLengthValue","i","child","visitChildNode"],"mappings":"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","file":"elements.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport {\n  AbstractValue,\n  AbstractObjectValue,\n  ArrayValue,\n  NumberValue,\n  Value,\n  ObjectValue,\n  FunctionValue,\n  NullValue,\n} from \"../values/index.js\";\nimport { Create, Properties } from \"../singletons.js\";\nimport invariant from \"../invariant.js\";\nimport { Get } from \"../methods/index.js\";\nimport { getProperty, getReactSymbol, objectHasNoPartialKeyAndRef, deleteRefAndKeyFromProps } from \"./utils.js\";\nimport * as t from \"babel-types\";\nimport { computeBinary } from \"../evaluators/BinaryExpression.js\";\nimport { CompilerDiagnostic, FatalError } from \"../errors.js\";\n\nfunction createPropsObject(\n  realm: Realm,\n  type: Value,\n  config: ObjectValue | AbstractValue | AbstractObjectValue | NullValue,\n  children: Value\n) {\n  let defaultProps = type instanceof ObjectValue ? Get(realm, type, \"defaultProps\") : realm.intrinsics.undefined;\n  let props = Create.ObjectCreate(realm, realm.intrinsics.ObjectPrototype);\n  // start by having key and ref deleted, if they actually exist, they will be add later\n  deleteRefAndKeyFromProps(realm, props);\n  let key = realm.intrinsics.null;\n  let ref = realm.intrinsics.null;\n\n  const setProp = (name: string, value: Value): void => {\n    if (name === \"key\" && value !== realm.intrinsics.null) {\n      key = computeBinary(realm, \"+\", realm.intrinsics.emptyString, value);\n    } else if (name === \"ref\") {\n      ref = value;\n    } else if (name !== \"__self\" && name !== \"__source\") {\n      invariant(props instanceof ObjectValue);\n      Properties.Set(realm, props, name, value, true);\n    }\n  };\n\n  const applyProperties = () => {\n    if (config instanceof ObjectValue) {\n      for (let [propKey, binding] of config.properties) {\n        if (binding && binding.descriptor && binding.descriptor.enumerable) {\n          setProp(propKey, Get(realm, config, propKey));\n        }\n      }\n    }\n  };\n\n  if (\n    (config instanceof AbstractObjectValue && config.isPartialObject()) ||\n    config instanceof AbstractValue ||\n    (config instanceof ObjectValue && config.isPartialObject() && config.isSimpleObject())\n  ) {\n    // if we have defaultProps, we need to create a new merge of the objects along with our config\n    if (defaultProps !== realm.intrinsics.undefined || children !== realm.intrinsics.undefined) {\n      if (objectHasNoPartialKeyAndRef(realm, config)) {\n        let args = [];\n        if (defaultProps !== realm.intrinsics.undefined) {\n          args.push(defaultProps);\n        }\n        args.push(config);\n        // create a new props object that will be the target of the Object.assign\n        props = Create.ObjectCreate(realm, realm.intrinsics.ObjectPrototype);\n        // as this is \"props\" that is abstract, we need to make it partial and simple\n        props.makePartial();\n        props.makeSimple();\n        // props objects also don't have a key and ref, so we remove them\n        deleteRefAndKeyFromProps(realm, props);\n\n        // get the global Object.assign\n        let globalObj = Get(realm, realm.$GlobalObject, \"Object\");\n        invariant(globalObj instanceof ObjectValue);\n        let objAssign = Get(realm, globalObj, \"assign\");\n        invariant(realm.generator);\n\n        AbstractValue.createTemporalFromBuildFunction(\n          realm,\n          FunctionValue,\n          [objAssign, props, ...args],\n          ([methodNode, ..._args]) => {\n            return t.callExpression(methodNode, ((_args: any): Array<any>));\n          }\n        );\n      } else {\n        // if either are abstract, this will impact the reconcilation process\n        // and ultimately prevent us from folding ReactElements properly\n        let diagnostic = new CompilerDiagnostic(\n          `unable to evaluate \"key\" and \"ref\" on a ReactElement due to an abstract config passed to createElement`,\n          realm.currentLocation,\n          \"PP0025\",\n          \"FatalError\"\n        );\n        realm.handleError(diagnostic);\n        if (realm.handleError(diagnostic) === \"Fail\") throw new FatalError();\n      }\n      if (children !== realm.intrinsics.undefined) {\n        setProp(\"children\", children);\n      }\n    } else {\n      // as the config is partial and simple, we don't know about its prototype or properties\n      // we don't have to worry about non-enumerable properties as its properties will never\n      // be serialized, rather this object will be serialized as a spread.\n      props = config;\n      // if there are any properties that do exist, it's because we know for sure they exist\n      // i.e. they were added on as part of snapshotting or at the end of a spread, like\n      // {...foo, ...bar, x: 5}\n      applyProperties();\n    }\n  } else {\n    applyProperties();\n\n    if (children !== realm.intrinsics.undefined) {\n      setProp(\"children\", children);\n    }\n\n    if (defaultProps instanceof ObjectValue) {\n      for (let [propKey, binding] of defaultProps.properties) {\n        if (binding && binding.descriptor && binding.descriptor.enumerable) {\n          if (Get(realm, props, propKey) === realm.intrinsics.undefined) {\n            setProp(propKey, Get(realm, defaultProps, propKey));\n          }\n        }\n      }\n    }\n  }\n  if (props instanceof ObjectValue || props instanceof AbstractObjectValue) {\n    // ensure the props is marked as final\n    props.makeFinal();\n  }\n  return { key, props, ref };\n}\n\nexport function createReactElement(\n  realm: Realm,\n  type: Value,\n  config: ObjectValue | AbstractValue | AbstractObjectValue | NullValue,\n  children: Value\n) {\n  let { key, props, ref } = createPropsObject(realm, type, config, children);\n  return createInternalReactElement(realm, type, key, ref, props);\n}\n\nexport function createInternalReactElement(\n  realm: Realm,\n  type: Value,\n  key: Value,\n  ref: Value,\n  props: ObjectValue | AbstractValue\n) {\n  let obj = Create.ObjectCreate(realm, realm.intrinsics.ObjectPrototype);\n  Create.CreateDataPropertyOrThrow(realm, obj, \"$$typeof\", getReactSymbol(\"react.element\", realm));\n  Create.CreateDataPropertyOrThrow(realm, obj, \"type\", type);\n  Create.CreateDataPropertyOrThrow(realm, obj, \"key\", key);\n  Create.CreateDataPropertyOrThrow(realm, obj, \"ref\", ref);\n  Create.CreateDataPropertyOrThrow(realm, obj, \"props\", props);\n  Create.CreateDataPropertyOrThrow(realm, obj, \"_owner\", realm.intrinsics.null);\n  obj.makeFinal();\n  return obj;\n}\n\ntype ElementTraversalVisitor = {\n  visitType: (typeValue: Value) => void,\n  visitKey: (keyValue: Value) => void,\n  visitRef: (keyValue: Value) => void,\n  visitAbstractOrPartialProps: (propsValue: AbstractValue | ObjectValue) => void,\n  visitConcreteProps: (propsValue: ObjectValue) => void,\n  visitChildNode: (childValue: Value) => void,\n};\n\nexport function traverseReactElement(\n  realm: Realm,\n  reactElement: ObjectValue,\n  traversalVisitor: ElementTraversalVisitor\n) {\n  let typeValue = getProperty(realm, reactElement, \"type\");\n  traversalVisitor.visitType(typeValue);\n\n  let keyValue = getProperty(realm, reactElement, \"key\");\n  if (keyValue !== realm.intrinsics.null && keyValue !== realm.intrinsics.undefined) {\n    traversalVisitor.visitKey(keyValue);\n  }\n\n  let refValue = getProperty(realm, reactElement, \"ref\");\n  if (refValue !== realm.intrinsics.null && refValue !== realm.intrinsics.undefined) {\n    traversalVisitor.visitRef(refValue);\n  }\n\n  let propsValue = getProperty(realm, reactElement, \"props\");\n  if (propsValue instanceof AbstractValue) {\n    // visit object, as it's going to be spread\n    traversalVisitor.visitAbstractOrPartialProps(propsValue);\n  } else if (propsValue instanceof ObjectValue) {\n    if (propsValue.isPartialObject()) {\n      traversalVisitor.visitAbstractOrPartialProps(propsValue);\n    } else {\n      traversalVisitor.visitConcreteProps(propsValue);\n      // handle children\n      if (propsValue.properties.has(\"children\")) {\n        let childrenValue = getProperty(realm, propsValue, \"children\");\n        if (childrenValue !== realm.intrinsics.undefined && childrenValue !== realm.intrinsics.null) {\n          if (childrenValue instanceof ArrayValue && !childrenValue.intrinsicName) {\n            let childrenLength = getProperty(realm, childrenValue, \"length\");\n            let childrenLengthValue = 0;\n            if (childrenLength instanceof NumberValue) {\n              childrenLengthValue = childrenLength.value;\n              for (let i = 0; i < childrenLengthValue; i++) {\n                let child = getProperty(realm, childrenValue, \"\" + i);\n                invariant(\n                  child instanceof Value,\n                  `ReactElement \"props.children[${i}]\" failed to visit due to a non-value`\n                );\n                traversalVisitor.visitChildNode(child);\n              }\n            }\n          } else {\n            traversalVisitor.visitChildNode(childrenValue);\n          }\n        }\n      }\n    }\n  }\n}\n"]}