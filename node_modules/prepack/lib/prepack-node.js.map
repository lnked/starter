{"version":3,"sources":["../src/prepack-node.js"],"names":["prepackStdin","prepackFile","prepackFileSync","createStatistics","options","gc","global","profile","Date","now","process","memoryUsage","heapUsed","processSerializedCode","printDiagnostics","sourceMapFilename","inputSourceMapFilename","stdin","setEncoding","resume","on","code","readFile","mapErr","sourceMap","console","warn","filename","serialized","filePath","fileContents","sourceMapContents","undefined","exit","err","error","stack","callback","fileErrorHandler","compatibility","fileErr","filenames","length","sourceFiles","map","readFileSync","_e","debugChannel","debugInFilePath","debugOutFilePath","debugOptions","ioWrapper","inFilePath","outFilePath"],"mappings":"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","file":"prepack-node.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/*\n Prepack API functions that require Node as the execution environment for Prepack.\n */\n\n/* @flow */\nimport { defaultOptions } from \"./options\";\nimport { FatalError } from \"./errors.js\";\nimport { type PrepackOptions } from \"./prepack-options\";\nimport { getDebuggerOptions } from \"./prepack-options\";\nimport { prepackNodeCLI, prepackNodeCLISync } from \"./prepack-node-environment.js\";\nimport { prepackSources } from \"./prepack-standalone.js\";\nimport { type SourceMap } from \"./types.js\";\nimport { DebugChannel } from \"./debugger/server/channel/DebugChannel.js\";\nimport { FileIOWrapper } from \"./debugger/common/channel/FileIOWrapper.js\";\nimport { type SerializedResult } from \"./serializer/types.js\";\nimport { SerializerStatistics } from \"./serializer/statistics.js\";\n\nimport fs from \"fs\";\n\nexport * from \"./prepack-node-environment\";\nexport * from \"./prepack-standalone\";\n\nfunction createStatistics(options: PrepackOptions) {\n  let gc = global.gc; // eslint-disable-line no-undef\n  return options.profile\n    ? new SerializerStatistics(\n        () => Date.now(),\n        () => {\n          if (gc) gc();\n          return process.memoryUsage().heapUsed;\n        },\n        !!gc\n      )\n    : new SerializerStatistics();\n}\n\nexport function prepackStdin(\n  options: PrepackOptions = defaultOptions,\n  processSerializedCode: SerializedResult => void,\n  printDiagnostics: () => boolean\n) {\n  let sourceMapFilename = options.inputSourceMapFilename || \"\";\n  process.stdin.setEncoding(\"utf8\");\n  process.stdin.resume();\n  process.stdin.on(\"data\", function(code) {\n    fs.readFile(sourceMapFilename, \"utf8\", function(mapErr, sourceMap) {\n      if (mapErr) {\n        //if no sourcemap was provided we silently ignore\n        if (sourceMapFilename !== \"\") console.warn(`No sourcemap found at ${sourceMapFilename}.`);\n        sourceMap = \"\";\n      }\n      let filename = \"no-filename-specified\";\n      let serialized;\n      try {\n        serialized = prepackSources(\n          [{ filePath: filename, fileContents: code, sourceMapContents: sourceMap }],\n          options,\n          undefined,\n          createStatistics(options)\n        );\n        processSerializedCode(serialized);\n        if (printDiagnostics()) process.exit(1);\n      } catch (err) {\n        printDiagnostics();\n        if (!(err instanceof FatalError)) {\n          // if it is not a FatalError, it means prepack failed, and we should display the Prepack stack trace.\n          console.error(err.stack);\n        }\n        process.exit(1);\n      }\n    });\n  });\n}\n\nexport function prepackFile(\n  filename: string,\n  options: PrepackOptions = defaultOptions,\n  callback: (any, ?{ code: string, map?: SourceMap }) => void,\n  fileErrorHandler?: (err: ?Error) => void\n) {\n  if (options.compatibility === \"node-cli\") {\n    prepackNodeCLI(filename, options, callback);\n    return;\n  }\n  let sourceMapFilename = options.inputSourceMapFilename || filename + \".map\";\n  fs.readFile(filename, \"utf8\", function(fileErr, code) {\n    if (fileErr) {\n      if (fileErrorHandler) fileErrorHandler(fileErr);\n      return;\n    }\n    fs.readFile(sourceMapFilename, \"utf8\", function(mapErr, sourceMap) {\n      if (mapErr) {\n        console.warn(`No sourcemap found at ${sourceMapFilename}.`);\n        sourceMap = \"\";\n      }\n      let serialized;\n      try {\n        serialized = prepackSources(\n          [{ filePath: filename, fileContents: code, sourceMapContents: sourceMap }],\n          options,\n          undefined,\n          createStatistics(options)\n        );\n      } catch (err) {\n        callback(err, null);\n        return;\n      }\n      callback(null, serialized);\n    });\n  });\n}\n\nexport function prepackFileSync(filenames: Array<string>, options: PrepackOptions = defaultOptions) {\n  if (options.compatibility === \"node-cli\") {\n    if (filenames.length !== 1) {\n      console.error(`Does not support multiple file prepack in node-cli mode.`);\n      process.exit(1);\n    }\n    return prepackNodeCLISync(filenames[0], options);\n  }\n  const sourceFiles = filenames.map(filename => {\n    let code = fs.readFileSync(filename, \"utf8\");\n    let sourceMap = \"\";\n    let sourceMapFilename = options.inputSourceMapFilename || filename + \".map\";\n    try {\n      sourceMap = fs.readFileSync(sourceMapFilename, \"utf8\");\n    } catch (_e) {\n      if (options.inputSourceMapFilename) console.warn(`No sourcemap found at ${sourceMapFilename}.`);\n    }\n    return { filePath: filename, fileContents: code, sourceMapContents: sourceMap };\n  });\n  let debugChannel;\n  if (options.debugInFilePath && options.debugOutFilePath) {\n    let debugOptions = getDebuggerOptions(options);\n    let ioWrapper = new FileIOWrapper(false, debugOptions.inFilePath, debugOptions.outFilePath);\n    debugChannel = new DebugChannel(ioWrapper);\n  }\n  return prepackSources(sourceFiles, options, debugChannel, createStatistics(options));\n}\n"]}