{"version":3,"sources":["../../src/values/AbstractObjectValue.js"],"names":["t","AbstractObjectValue","constructor","realm","types","values","hashValue","args","buildNode","optionalArgs","isTop","element","getElements","getTemplate","isPartialObject","reportIntrospectionError","temporalAlias","temporalValue","temoralAlias","hasStringOrSymbolProperties","isSimpleObject","cachedIsSimpleObject","undefined","_elementsAreSimpleObjects","result","isFinalObject","mightBeFalse","mightNotBeFalse","makeNotPartial","makePartial","makeSimple","option","getType","obj","$Realm","intrinsics","ObjectPrototype","intrinsicName","intrinsicNameGenerated","_templateFor","getSnapshot","options","isIntrinsic","kind","c","l","r","ls","rs","absVal","createFromConditionalOp","expressionLocation","makeFinal","throwIfNotObject","usesOrdinaryObjectInternalPrototypeMethods","$GetPrototypeOf","error","currentLocation","handleError","elements","size","cv","cond","ob1","ob2","p1","p2","joinedObject","joinValuesAsConditional","primitiveValue","isTypeCompatibleWith","createFromBuildFunction","p","preludeGenerator","getPrototypeOf","memoizeReference","isCompatibleWith","MOBILE_JSC_VERSION","memberExpression","callExpression","createFromBinaryOp","$IsExtensible","$GetOwnProperty","P","value","d1","d2","desc","d1Value","d2Value","widenValues","hasProp","doesNotHaveProp","d","$DefineOwnProperty","Desc","writable","enumerable","configurable","new_val","sawTrue","sawFalse","dval","vale","empty","$HasProperty","$Get","Receiver","generateAbstractGet","ob","type","createTemporalFromBuildFunction","o","isValidIdentifier","identifier","stringLiteral","skipInvariant","isInPureScope","evaluateWithPossibleThrowCompletion","topVal","$GetHelper","isIntrinsicAndHasWidenedNumericProperty","object","key","proto","d1val","d2val","cvVal","$GetPartial","$Set","V","$SetPartial","oldVal","v","generator","propName","getAsPropertyNameExpression","emitStatement","objectNode","valueNode","expressionStatement","assignmentExpression","isIdentifier","keyNode","$Delete","$OwnPropertyKeys"],"mappings":"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","file":"AbstractObjectValue.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { CompilerDiagnostic, FatalError } from \"../errors.js\";\nimport type { Realm } from \"../realm.js\";\nimport type { Descriptor, PropertyKeyValue } from \"../types.js\";\nimport {\n  AbstractValue,\n  type AbstractValueKind,\n  ArrayValue,\n  NullValue,\n  NumberValue,\n  ObjectValue,\n  PrimitiveValue,\n  StringValue,\n  Value,\n} from \"./index.js\";\nimport { protoExpression } from \"../utils/internalizer.js\";\nimport type { AbstractValueBuildNodeFunction } from \"./AbstractValue.js\";\nimport { TypesDomain, ValuesDomain } from \"../domains/index.js\";\nimport {\n  GetFromArrayWithWidenedNumericProperty,\n  IsDataDescriptor,\n  cloneDescriptor,\n  equalDescriptors,\n} from \"../methods/index.js\";\nimport { Havoc, Join, Widen } from \"../singletons.js\";\nimport type { BabelNodeExpression } from \"babel-types\";\nimport invariant from \"../invariant.js\";\nimport * as t from \"babel-types\";\n\nexport default class AbstractObjectValue extends AbstractValue {\n  constructor(\n    realm: Realm,\n    types: TypesDomain,\n    values: ValuesDomain,\n    hashValue: number,\n    args: Array<Value>,\n    buildNode?: AbstractValueBuildNodeFunction | BabelNodeExpression,\n    optionalArgs?: {| kind?: AbstractValueKind, intrinsicName?: string |}\n  ) {\n    super(realm, types, values, hashValue, args, buildNode, optionalArgs);\n    if (!values.isTop()) {\n      for (let element of this.values.getElements()) invariant(element instanceof ObjectValue);\n    }\n  }\n\n  cachedIsSimpleObject: void | boolean;\n  functionResultType: void | typeof Value;\n\n  getTemplate(): ObjectValue {\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      if (element.isPartialObject()) {\n        return element;\n      } else {\n        break;\n      }\n    }\n    AbstractValue.reportIntrospectionError(this);\n    throw new FatalError();\n  }\n\n  set temporalAlias(temporalValue: AbstractObjectValue) {\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      element.temoralAlias = temporalValue;\n    }\n  }\n\n  hasStringOrSymbolProperties(): boolean {\n    if (this.values.isTop()) return false;\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      if (element.hasStringOrSymbolProperties()) return true;\n    }\n    return false;\n  }\n\n  isPartialObject(): boolean {\n    // At the very least, the identity of the object is unknown\n    return true;\n  }\n\n  isSimpleObject(): boolean {\n    if (this.cachedIsSimpleObject === undefined) this.cachedIsSimpleObject = this._elementsAreSimpleObjects();\n    return this.cachedIsSimpleObject;\n  }\n\n  _elementsAreSimpleObjects(): boolean {\n    if (this.values.isTop()) return false;\n    let result;\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      if (result === undefined) {\n        result = element.isSimpleObject();\n      } else if (result !== element.isSimpleObject()) {\n        AbstractValue.reportIntrospectionError(this);\n        throw new FatalError();\n      }\n    }\n    if (result === undefined) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n    return result;\n  }\n\n  isFinalObject(): boolean {\n    if (this.values.isTop()) return false;\n    let result;\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      if (result === undefined) {\n        result = element.isFinalObject();\n      } else if (result !== element.isFinalObject()) {\n        AbstractValue.reportIntrospectionError(this);\n        throw new FatalError();\n      }\n    }\n    if (result === undefined) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n    return result;\n  }\n\n  mightBeFalse(): boolean {\n    return false;\n  }\n\n  mightNotBeFalse(): boolean {\n    return true;\n  }\n\n  makeNotPartial(): void {\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      element.makeNotPartial();\n    }\n  }\n\n  makePartial(): void {\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      element.makePartial();\n    }\n  }\n\n  makeSimple(option?: string | Value): void {\n    if (this.values.isTop() && this.getType() === ObjectValue) {\n      let obj = new ObjectValue(this.$Realm, this.$Realm.intrinsics.ObjectPrototype);\n      obj.intrinsicName = this.intrinsicName;\n      obj.intrinsicNameGenerated = true;\n      obj.makePartial();\n      obj._templateFor = this;\n      this.values = new ValuesDomain(obj);\n    }\n    if (!this.values.isTop()) {\n      for (let element of this.values.getElements()) {\n        invariant(element instanceof ObjectValue);\n        element.makeSimple(option);\n      }\n    }\n    this.cachedIsSimpleObject = true;\n  }\n\n  // Use this only if it is known that only the string properties of the snapshot will be accessed.\n  getSnapshot(options?: { removeProperties: boolean }): AbstractObjectValue {\n    if (this.isIntrinsic()) return this; // already temporal\n    if (this.values.isTop()) return this; // always the same\n    if (this.kind === \"conditional\") {\n      let [c, l, r] = this.args;\n      invariant(l instanceof ObjectValue || l instanceof AbstractObjectValue);\n      let ls = l.getSnapshot(options);\n      invariant(r instanceof ObjectValue || r instanceof AbstractObjectValue);\n      let rs = r.getSnapshot(options);\n      invariant(c instanceof AbstractValue);\n      let absVal = AbstractValue.createFromConditionalOp(this.$Realm, c, ls, rs, this.expressionLocation);\n      invariant(absVal instanceof AbstractObjectValue);\n      return absVal;\n    }\n    // If this is some other kind of abstract object we don't know how to make a copy, so just make this final\n    this.makeFinal();\n    return this;\n  }\n\n  makeFinal(): void {\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      element.makeFinal();\n    }\n  }\n\n  throwIfNotObject(): AbstractObjectValue {\n    return this;\n  }\n\n  usesOrdinaryObjectInternalPrototypeMethods(): boolean {\n    return true;\n  }\n\n  // ECMA262 9.1.1\n  $GetPrototypeOf(): ObjectValue | AbstractObjectValue | NullValue {\n    let realm = this.$Realm;\n    if (this.values.isTop()) {\n      let error = new CompilerDiagnostic(\n        \"prototype access on unknown object\",\n        this.$Realm.currentLocation,\n        \"PP0032\",\n        \"FatalError\"\n      );\n      this.$Realm.handleError(error);\n      throw new FatalError();\n    }\n    invariant(this.kind !== \"widened\", \"widening currently always leads to top values\");\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$GetPrototypeOf();\n      }\n      invariant(false);\n    } else if (this.kind === \"conditional\") {\n      // this is the join of two concrete/abstract objects\n      // use this join condition for the join of the two property values\n      let [cond, ob1, ob2] = this.args;\n      invariant(cond instanceof AbstractValue);\n      invariant(ob1 instanceof ObjectValue || ob1 instanceof AbstractObjectValue);\n      invariant(ob2 instanceof ObjectValue || ob2 instanceof AbstractObjectValue);\n      let p1 = ob1.$GetPrototypeOf();\n      let p2 = ob2.$GetPrototypeOf();\n      let joinedObject = Join.joinValuesAsConditional(realm, cond, p1, p2);\n      invariant(joinedObject instanceof AbstractObjectValue);\n      return joinedObject;\n    } else if (this.kind === \"explicit conversion to object\") {\n      let primitiveValue = this.args[0];\n      invariant(!Value.isTypeCompatibleWith(primitiveValue.getType(), PrimitiveValue));\n      let result = AbstractValue.createFromBuildFunction(realm, ObjectValue, [primitiveValue], ([p]) => {\n        invariant(realm.preludeGenerator !== undefined);\n        let getPrototypeOf = realm.preludeGenerator.memoizeReference(\"Object.getPrototypeOf\");\n        return realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) || realm.isCompatibleWith(\"mobile\")\n          ? t.memberExpression(p, protoExpression)\n          : t.callExpression(getPrototypeOf, [p]);\n      });\n      invariant(result instanceof AbstractObjectValue);\n      return result;\n    } else {\n      let joinedObject;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let p = cv.$GetPrototypeOf();\n        if (joinedObject === undefined) {\n          joinedObject = p;\n        } else {\n          let cond = AbstractValue.createFromBinaryOp(realm, \"===\", this, cv, this.expressionLocation);\n          joinedObject = Join.joinValuesAsConditional(realm, cond, p, joinedObject);\n        }\n      }\n      invariant(joinedObject instanceof AbstractObjectValue);\n      return joinedObject;\n    }\n  }\n\n  // ECMA262 9.1.3\n  $IsExtensible(): boolean {\n    return false;\n  }\n\n  // ECMA262 9.1.5\n  $GetOwnProperty(P: PropertyKeyValue): Descriptor | void {\n    if (P instanceof StringValue) P = P.value;\n\n    if (this.values.isTop()) {\n      let error = new CompilerDiagnostic(\n        \"property access on unknown object\",\n        this.$Realm.currentLocation,\n        \"PP0031\",\n        \"FatalError\"\n      );\n      this.$Realm.handleError(error);\n      throw new FatalError();\n    }\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$GetOwnProperty(P, cv);\n      }\n      invariant(false);\n    } else if (this.kind === \"conditional\") {\n      // this is the join of two concrete/abstract objects\n      // use this join condition for the join of the two property values\n      let [cond, ob1, ob2] = this.args;\n      invariant(cond instanceof AbstractValue);\n      invariant(ob1 instanceof ObjectValue || ob1 instanceof AbstractObjectValue);\n      invariant(ob2 instanceof ObjectValue || ob2 instanceof AbstractObjectValue);\n      let d1 = ob1.$GetOwnProperty(P);\n      let d2 = ob2.$GetOwnProperty(P);\n      if (d1 === undefined || d2 === undefined || !equalDescriptors(d1, d2)) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      let desc = cloneDescriptor(d1);\n      invariant(desc !== undefined);\n      if (IsDataDescriptor(this.$Realm, desc)) {\n        let d1Value = d1.value;\n        invariant(d1Value === undefined || d1Value instanceof Value);\n        let d2Value = d2.value;\n        invariant(d2Value === undefined || d2Value instanceof Value);\n        desc.value = Join.joinValuesAsConditional(this.$Realm, cond, d1Value, d2Value);\n      }\n      return desc;\n    } else if (this.kind === \"widened\") {\n      // This abstract object was created by repeated assignments of freshly allocated objects to the same binding inside a loop\n      let [ob1, ob2] = this.args; // ob1: summary of iterations 1...n, ob2: summary of iteration n+1\n      invariant(ob1 instanceof ObjectValue);\n      invariant(ob2 instanceof ObjectValue);\n      let d1 = ob1.$GetOwnProperty(P);\n      let d2 = ob2.$GetOwnProperty(P);\n      if (d1 === undefined || d2 === undefined || !equalDescriptors(d1, d2)) {\n        // We do not handle the case where different loop iterations result in different kinds of propperties\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      let desc = cloneDescriptor(d1);\n      invariant(desc !== undefined);\n      if (IsDataDescriptor(this.$Realm, desc)) {\n        // Values may be different, i.e. values may be loop variant, so the widened value summarizes the entire loop\n        // equalDescriptors guarantees that both have value props and if you have a value prop is value is defined.\n        let d1Value = d1.value;\n        invariant(d1Value instanceof Value);\n        let d2Value = d2.value;\n        invariant(d2Value instanceof Value);\n        desc.value = Widen.widenValues(this.$Realm, d1Value, d2Value);\n      } else {\n        // In this case equalDescriptors guarantees exact equality betwee d1 and d2.\n        // Inlining the accessors will eventually bring in data properties if the accessors have loop variant behavior\n      }\n      return desc;\n    } else {\n      let hasProp = false;\n      let doesNotHaveProp = false;\n      let desc;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let d = cv.$GetOwnProperty(P);\n        if (d === undefined) doesNotHaveProp = true;\n        else {\n          hasProp = true;\n          if (desc === undefined) {\n            desc = cloneDescriptor(d);\n            invariant(desc !== undefined);\n            if (!IsDataDescriptor(this.$Realm, d)) continue;\n          } else {\n            if (!equalDescriptors(d, desc)) {\n              AbstractValue.reportIntrospectionError(this, P);\n              throw new FatalError();\n            }\n            if (!IsDataDescriptor(this.$Realm, desc)) continue;\n            // values may be different\n            let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", this, cv, this.expressionLocation);\n            desc.value = Join.joinValuesAsConditional(this.$Realm, cond, d.value, desc.value);\n          }\n        }\n      }\n      if (hasProp && doesNotHaveProp) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      return desc;\n    }\n  }\n\n  // ECMA262 9.1.6\n  $DefineOwnProperty(P: PropertyKeyValue, Desc: Descriptor): boolean {\n    if (P instanceof StringValue) P = P.value;\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this, P);\n      throw new FatalError();\n    }\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$DefineOwnProperty(P, Desc);\n      }\n      invariant(false);\n    } else {\n      if (!IsDataDescriptor(this.$Realm, Desc)) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      let desc = {\n        value: \"value\" in Desc ? Desc.value : this.$Realm.intrinsics.undefined,\n        writable: \"writable\" in Desc ? Desc.writable : false,\n        enumerable: \"enumerable\" in Desc ? Desc.enumerable : false,\n        configurable: \"configurable\" in Desc ? Desc.configurable : false,\n      };\n      let new_val = desc.value;\n      invariant(new_val instanceof Value);\n      let sawTrue = false;\n      let sawFalse = false;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let d = cv.$GetOwnProperty(P);\n        if (d !== undefined && !equalDescriptors(d, desc)) {\n          AbstractValue.reportIntrospectionError(this, P);\n          throw new FatalError();\n        }\n        let dval = d === undefined || d.vale === undefined ? this.$Realm.intrinsics.empty : d.value;\n        invariant(dval instanceof Value);\n        let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", this, cv, this.expressionLocation);\n        desc.value = Join.joinValuesAsConditional(this.$Realm, cond, new_val, dval);\n        if (cv.$DefineOwnProperty(P, desc)) {\n          sawTrue = true;\n        } else sawFalse = true;\n      }\n      if (sawTrue && sawFalse) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      return sawTrue;\n    }\n  }\n\n  // ECMA262 9.1.7\n  $HasProperty(P: PropertyKeyValue): boolean {\n    if (P instanceof StringValue) P = P.value;\n    if (this.values.isTop()) {\n      let error = new CompilerDiagnostic(\n        \"property access on unknown object\",\n        this.$Realm.currentLocation,\n        \"PP0031\",\n        \"FatalError\"\n      );\n      this.$Realm.handleError(error);\n      throw new FatalError();\n    }\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$HasProperty(P, cv);\n      }\n      invariant(false);\n    } else {\n      let hasProp = false;\n      let doesNotHaveProp = false;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        if (cv.$HasProperty(P)) hasProp = true;\n        else doesNotHaveProp = true;\n      }\n      if (hasProp && doesNotHaveProp) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      return hasProp;\n    }\n  }\n\n  // ECMA262 9.1.8\n  $Get(P: PropertyKeyValue, Receiver: Value): Value {\n    if (P instanceof StringValue) P = P.value;\n\n    if (this.values.isTop()) {\n      let generateAbstractGet = () => {\n        let ob = this;\n        if (this.kind === \"explicit conversion to object\") ob = this.args[0];\n        let type = Value;\n        if (P === \"length\" && Value.isTypeCompatibleWith(this.getType(), ArrayValue)) type = NumberValue;\n        return AbstractValue.createTemporalFromBuildFunction(\n          this.$Realm,\n          type,\n          [ob],\n          ([o]) => {\n            invariant(typeof P === \"string\");\n            return t.isValidIdentifier(P)\n              ? t.memberExpression(o, t.identifier(P), false)\n              : t.memberExpression(o, t.stringLiteral(P), true);\n          },\n          {\n            skipInvariant: true,\n          }\n        );\n      };\n      if (this.isSimpleObject() && this.isIntrinsic()) {\n        return generateAbstractGet();\n      } else if (this.$Realm.isInPureScope()) {\n        // This object might have leaked to a getter.\n        Havoc.value(this.$Realm, this);\n        // The getter might throw anything.\n        return this.$Realm.evaluateWithPossibleThrowCompletion(\n          generateAbstractGet,\n          TypesDomain.topVal,\n          ValuesDomain.topVal\n        );\n      }\n      let error = new CompilerDiagnostic(\n        \"property access on unknown object\",\n        this.$Realm.currentLocation,\n        \"PP0031\",\n        \"FatalError\"\n      );\n      this.$Realm.handleError(error);\n      throw new FatalError();\n    }\n\n    let $GetHelper = ob => {\n      if (ob instanceof ArrayValue && ArrayValue.isIntrinsicAndHasWidenedNumericProperty(ob) && typeof P === \"string\") {\n        return {\n          object: ob,\n          key: P,\n          value: GetFromArrayWithWidenedNumericProperty(this.$Realm, ob, P),\n        };\n      }\n      let d = ob.$GetOwnProperty(P);\n      if (d !== undefined) return d;\n      let proto = ob.$GetPrototypeOf();\n      return proto instanceof NullValue ? undefined : $GetHelper(proto);\n    };\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$Get(P, Receiver);\n      }\n      invariant(false);\n    } else if (this.kind === \"conditional\") {\n      // this is the join of two concrete/abstract objects\n      // use this join condition for the join of the two property values\n      let [cond, ob1, ob2] = this.args;\n      invariant(cond instanceof AbstractValue);\n      invariant(ob1 instanceof ObjectValue || ob1 instanceof AbstractObjectValue);\n      invariant(ob2 instanceof ObjectValue || ob2 instanceof AbstractObjectValue);\n      let d1 = $GetHelper(ob1);\n      let d1val =\n        d1 === undefined ? this.$Realm.intrinsics.undefined : IsDataDescriptor(this.$Realm, d1) ? d1.value : undefined;\n      let d2 = $GetHelper(ob2);\n      let d2val =\n        d2 === undefined ? this.$Realm.intrinsics.undefined : IsDataDescriptor(this.$Realm, d2) ? d2.value : undefined;\n      // We do not currently join property getters\n      if (d1val === undefined || d2val === undefined) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      invariant(d1val instanceof Value);\n      invariant(d2val instanceof Value);\n      return Join.joinValuesAsConditional(this.$Realm, cond, d1val, d2val);\n    } else {\n      let result;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let d = $GetHelper(cv);\n        // We do not currently join property getters\n        if (d !== undefined && !IsDataDescriptor(this.$Realm, d)) {\n          AbstractValue.reportIntrospectionError(this, P);\n          throw new FatalError();\n        }\n        let cvVal = d === undefined ? this.$Realm.intrinsics.undefined : d.value;\n        invariant(cvVal instanceof Value);\n        if (result === undefined) result = cvVal;\n        else {\n          let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", this, cv, this.expressionLocation);\n          result = Join.joinValuesAsConditional(this.$Realm, cond, cvVal, result);\n        }\n      }\n      invariant(result !== undefined);\n      return result;\n    }\n  }\n\n  $GetPartial(P: AbstractValue | PropertyKeyValue, Receiver: Value): Value {\n    if (!(P instanceof AbstractValue)) return this.$Get(P, Receiver);\n    if (this.values.isTop()) {\n      if (this.isSimpleObject() && this.isIntrinsic()) {\n        return AbstractValue.createTemporalFromBuildFunction(this.$Realm, Value, [this, P], ([o, p]) =>\n          t.memberExpression(o, p, true)\n        );\n      }\n      if (this.$Realm.isInPureScope()) {\n        // If we're in a pure scope, we can havoc the key and the instance,\n        // and leave the residual property access in place.\n        // We assume that if the receiver is different than this object,\n        // then we only got here because there can be no other keys with\n        // this name on earlier parts of the prototype chain.\n        // We have to havoc since the property may be a getter or setter,\n        // which can run unknown code that has access to Receiver and\n        // (even in pure mode) can modify it in unknown ways.\n        Havoc.value(this.$Realm, Receiver);\n        // Coercion can only have effects on anything reachable from the key.\n        Havoc.value(this.$Realm, P);\n        return AbstractValue.createTemporalFromBuildFunction(this.$Realm, Value, [Receiver, P], ([o, p]) =>\n          t.memberExpression(o, p, true)\n        );\n      }\n      let error = new CompilerDiagnostic(\n        \"property access on unknown object\",\n        this.$Realm.currentLocation,\n        \"PP0031\",\n        \"FatalError\"\n      );\n      this.$Realm.handleError(error);\n      throw new FatalError();\n    }\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        return cv.$GetPartial(P, Receiver === this ? cv : Receiver);\n      }\n      invariant(false);\n    } else {\n      let result;\n      for (let cv of elements) {\n        let cvVal = cv.$GetPartial(P, Receiver === this ? cv : Receiver);\n        if (result === undefined) result = cvVal;\n        else {\n          let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", this, cv, this.expressionLocation);\n          result = Join.joinValuesAsConditional(this.$Realm, cond, cvVal, result);\n        }\n      }\n      invariant(result !== undefined);\n      return result;\n    }\n  }\n\n  // ECMA262 9.1.9\n  $Set(P: PropertyKeyValue, V: Value, Receiver: Value): boolean {\n    if (this.values.isTop()) {\n      return this.$SetPartial(P, V, Receiver);\n    }\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$Set(P, V, Receiver === this ? cv : Receiver);\n      }\n      invariant(false);\n    } else {\n      let sawTrue = false;\n      let sawFalse = false;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let d = cv.$GetOwnProperty(P);\n        if (d !== undefined && !IsDataDescriptor(this.$Realm, d)) {\n          AbstractValue.reportIntrospectionError(this, P);\n          throw new FatalError();\n        }\n        let oldVal = d === undefined ? this.$Realm.intrinsics.empty : d.value;\n        let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", this, cv, this.expressionLocation);\n        let v = Join.joinValuesAsConditional(this.$Realm, cond, V, oldVal);\n        if (cv.$Set(P, v, cv)) sawTrue = true;\n        else sawFalse = true;\n      }\n      if (sawTrue && sawFalse) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      return sawTrue;\n    }\n  }\n\n  $SetPartial(P: AbstractValue | PropertyKeyValue, V: Value, Receiver: Value): boolean {\n    if (this.values.isTop()) {\n      if (this.$Realm.isInPureScope()) {\n        // If we're in a pure scope, we can havoc the key and the instance,\n        // and leave the residual property assignment in place.\n        // We assume that if the receiver is different than this object,\n        // then we only got here because there can be no other keys with\n        // this name on earlier parts of the prototype chain.\n        // We have to havoc since the property may be a getter or setter,\n        // which can run unknown code that has access to Receiver and\n        // (even in pure mode) can modify it in unknown ways.\n        Havoc.value(this.$Realm, Receiver);\n        // We also need to havoc the value since it might leak to a setter.\n        Havoc.value(this.$Realm, V);\n        this.$Realm.evaluateWithPossibleThrowCompletion(\n          () => {\n            let generator = this.$Realm.generator;\n            invariant(generator);\n\n            if (P instanceof StringValue) {\n              P = P.value;\n            }\n            if (typeof P === \"string\") {\n              let propName = generator.getAsPropertyNameExpression(P);\n              generator.emitStatement([Receiver, V], ([objectNode, valueNode]) =>\n                t.expressionStatement(\n                  t.assignmentExpression(\n                    \"=\",\n                    t.memberExpression(objectNode, propName, !t.isIdentifier(propName)),\n                    valueNode\n                  )\n                )\n              );\n            } else {\n              // Coercion can only have effects on anything reachable from the key.\n              Havoc.value(this.$Realm, P);\n              generator.emitStatement([Receiver, P, V], ([objectNode, keyNode, valueNode]) =>\n                t.expressionStatement(\n                  t.assignmentExpression(\"=\", t.memberExpression(objectNode, keyNode, true), valueNode)\n                )\n              );\n            }\n            return this.$Realm.intrinsics.undefined;\n          },\n          TypesDomain.topVal,\n          ValuesDomain.topVal\n        );\n        // The emitted assignment might throw at runtime but if it does, that\n        // is handled by evaluateWithPossibleThrowCompletion. Anything that\n        // happens after this, can assume we didn't throw and therefore,\n        // we return true here.\n        return true;\n      }\n      let error = new CompilerDiagnostic(\n        \"property access on unknown object\",\n        this.$Realm.currentLocation,\n        \"PP0031\",\n        \"FatalError\"\n      );\n      this.$Realm.handleError(error);\n      throw new FatalError();\n    }\n\n    if (!(P instanceof AbstractValue)) return this.$Set(P, V, Receiver);\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$SetPartial(P, V, Receiver === this ? cv : Receiver);\n      }\n      invariant(false);\n    } else {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let oldVal = this.$GetPartial(P, Receiver === this ? cv : Receiver);\n        let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", this, cv, this.expressionLocation);\n        let v = Join.joinValuesAsConditional(this.$Realm, cond, V, oldVal);\n        cv.$SetPartial(P, v, Receiver === this ? cv : Receiver);\n      }\n      return true;\n    }\n  }\n\n  // ECMA262 9.1.10\n  $Delete(P: PropertyKeyValue): boolean {\n    if (P instanceof StringValue) P = P.value;\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this, P);\n      throw new FatalError();\n    }\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$Delete(P);\n      }\n      invariant(false);\n    } else {\n      let sawTrue = false;\n      let sawFalse = false;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let d = cv.$GetOwnProperty(P);\n        if (d === undefined) continue;\n        if (!IsDataDescriptor(this.$Realm, d)) {\n          AbstractValue.reportIntrospectionError(this, P);\n          throw new FatalError();\n        }\n        let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", this, cv, this.expressionLocation);\n        let v = Join.joinValuesAsConditional(this.$Realm, cond, this.$Realm.intrinsics.empty, d.value);\n        if (cv.$Set(P, v, cv)) sawTrue = true;\n        else sawFalse = true;\n      }\n      if (sawTrue && sawFalse) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      return sawTrue;\n    }\n  }\n\n  $OwnPropertyKeys(): Array<PropertyKeyValue> {\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$OwnPropertyKeys();\n      }\n      invariant(false);\n    } else {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n  }\n}\n"]}