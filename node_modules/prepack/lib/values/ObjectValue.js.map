{"version":3,"sources":["../../src/values/ObjectValue.js"],"names":["t","isWidenedValue","v","kind","a","args","lengthTemplateSrc","lengthTemplate","ObjectValue","constructor","realm","proto","intrinsicName","refuseSerialization","recordNewObject","useAbstractInterpretation","setupBindings","getTrackedPropertyNames","$Prototype","intrinsics","null","$Extensible","true","_isPartial","false","_isHavoced","_isSimple","_simplicityIsTransitive","_isFinal","properties","Map","symbols","$IsClassPrototype","trackedPropertyNames","propertyNames","propName","propBindingName","trackedPropertyBindingNames","get","undefined","setupTrackedPropertyAccessors","set","Object","defineProperty","prototype","configurable","binding","descriptor","value","isHavocedObject","desc","writeable","object","key","internalSlot","$Realm","recordModifiedProperty","equals","x","getHash","hashValue","objectCount","temporalAlias","_temporalAlias","hasStringOrSymbolProperties","prop","values","mightBeFalse","mightNotBeObject","throwIfNotObject","makeNotPartial","makePartial","makeSimple","option","makeFinal","isPartialObject","mightBeTrue","isFinalObject","havoc","isSimpleObject","mightNotBeTrue","size","propertyBinding","writable","ObjectPrototype","isTransitivelySimple","getExtensible","throwIfNotConcreteBoolean","setExtensible","getKind","$SymbolData","$StringData","$NumberData","$BooleanData","$DateValue","$RegExpMatcher","$SetData","$MapData","$DataView","$ArrayBufferData","$WeakMapData","$WeakSetData","react","enabled","$TypedArrayName","defineNativeMethod","name","length","callback","fnValue","defineNativeProperty","$DefineOwnProperty","enumerable","defineNativeGetter","funcName","$Description","throwIfNotConcreteString","func","defineNativeConstant","getOwnPropertyKeysArray","unknownProperty","reportIntrospectionError","keyArray","Array","from","keys","filter","pb","pv","mightHaveBeenDeleted","callReportObjectGetOwnProperties","getSnapshot","options","template","copyKeys","$OwnPropertyKeys","result","createTemporalFromBuildFunction","skipInvariant","removeProperties","to","nextKey","$GetOwnProperty","ThrowIfMightHaveBeenDeleted","propValue","Set","_serialize","stack","obj","serializedDesc","serialize","usesOrdinaryObjectInternalPrototypeMethods","$GetPrototypeOf","$SetPrototypeOf","V","OrdinarySetPrototypeOf","$IsExtensible","$PreventExtensions","P","OrdinaryGetOwnProperty","Desc","OrdinaryDefineOwnProperty","$HasProperty","$Get","Receiver","val","isIntrinsicAndHasWidenedNumericProperty","specializeJoin","_SafeGetDataPropertyValue","savedInvariantLevel","invariantLevel","$GetPartial","getType","createFromTemplate","mightNotBeString","mightNotBeNumber","isInPureScope","error","currentLocation","handleError","o","p","memberExpression","ToStringAbstract","createFromType","cond","createFromBinaryOp","joinValuesAsConditional","absVal","ob","pName","pNumber","generic_cond","specializeCond","arg1","arg2","createFromConditionalOp","expressionLocation","$Set","OrdinarySet","$SetPartial","pIsLoopVar","pIsNumeric","isTypeCompatibleWith","evaluateWithPossibleThrowCompletion","generator","emitStatement","objectNode","keyNode","valueNode","expressionStatement","assignmentExpression","topVal","createTemplate","newVal","sentinel","oldVal","savedUnknownProperty","delete","empty","$Delete","OrdinaryDelete"],"mappings":";;;;;;kQAAA;;;;;;;;;AAYA;;AACA;;AAWA;;AAeA;;AACA;;;;AAEA;;AAWA;;AACA;;;;AAEA;;IAAYA,C;;;;;;AAEZ,SAASC,cAAT,CAAwBC,CAAxB,EAAyC;AACvC,MAAI,EAAEA,kCAAF,CAAJ,EAAmC,OAAO,KAAP;AACnC,MAAIA,EAAEC,IAAF,KAAW,SAAX,IAAwBD,EAAEC,IAAF,KAAW,kBAAvC,EAA2D,OAAO,IAAP;AAC3D,OAAK,IAAIC,CAAT,IAAcF,EAAEG,IAAhB,EAAsB;AACpB,QAAIJ,eAAeG,CAAf,CAAJ,EAAuB,OAAO,IAAP;AACxB;AACD,SAAO,KAAP;AACD;;AAED,MAAME,oBAAoB,YAA1B;AACA,MAAMC,iBAAiB,uBAAwBD,iBAAxB,CAAvB;;AAEe,MAAME,WAAN,+BAAwC;AACrDC,cACEC,KADF,EAEEC,KAFF,EAGEC,aAHF,EAIEC,sBAA+B,KAJjC,EAKE;AACA,UAAMH,KAAN,EAAaE,aAAb;AACAF,UAAMI,eAAN,CAAsB,IAAtB;AACA,QAAIJ,MAAMK,yBAAV,EAAqC,KAAKC,aAAL,CAAmB,KAAKC,uBAAL,EAAnB;AACrC,SAAKC,UAAL,GAAkBP,SAASD,MAAMS,UAAN,CAAiBC,IAA5C;AACA,SAAKC,WAAL,GAAmBX,MAAMS,UAAN,CAAiBG,IAApC;AACA,SAAKC,UAAL,GAAkBb,MAAMS,UAAN,CAAiBK,KAAnC;AACA,SAAKC,UAAL,GAAkBf,MAAMS,UAAN,CAAiBK,KAAnC;AACA,SAAKE,SAAL,GAAiBhB,MAAMS,UAAN,CAAiBK,KAAlC;AACA,SAAKG,uBAAL,GAA+BjB,MAAMS,UAAN,CAAiBK,KAAhD;AACA,SAAKI,QAAL,GAAgBlB,MAAMS,UAAN,CAAiBK,KAAjC;AACA,SAAKK,UAAL,GAAkB,IAAIC,GAAJ,EAAlB;AACA,SAAKC,OAAL,GAAe,IAAID,GAAJ,EAAf;AACA,SAAKjB,mBAAL,GAA2BA,mBAA3B;;AAEA;AACA;AACA;AACA,SAAKmB,iBAAL,GAAyB,KAAzB;AACD;;AA4BDf,4BAAyC;AACvC,WAAOT,YAAYyB,oBAAnB;AACD;;AAEDjB,gBAAckB,aAAd,EAA4C;AAC1C,SAAK,IAAIC,QAAT,IAAqBD,aAArB,EAAoC;AAClC,UAAIE,kBAAkB5B,YAAY6B,2BAAZ,CAAwCC,GAAxC,CAA4CH,QAA5C,CAAtB;AACA,+BAAUC,oBAAoBG,SAA9B;AACC,UAAD,CAAYH,eAAZ,IAA+BG,SAA/B;AACD;AACF;;AAED,SAAOC,6BAAP,CAAqCN,aAArC,EAAmE;AACjE,SAAK,IAAIC,QAAT,IAAqBD,aAArB,EAAoC;AAClC,UAAIE,kBAAkB5B,YAAY6B,2BAAZ,CAAwCC,GAAxC,CAA4CH,QAA5C,CAAtB;AACA,UAAIC,oBAAoBG,SAAxB,EACE/B,YAAY6B,2BAAZ,CAAwCI,GAAxC,CAA4CN,QAA5C,EAAuDC,kBAAkBD,WAAW,UAApF;AACFO,aAAOC,cAAP,CAAsBnC,YAAYoC,SAAlC,EAA6CT,QAA7C,EAAuD;AACrDU,sBAAc,IADuC;AAErDP,aAAK,YAAW;AACd,cAAIQ,UAAU,KAAKV,eAAL,CAAd;AACA,iBAAOU,YAAYP,SAAZ,GAAwBA,SAAxB,GAAoCO,QAAQC,UAAR,CAAmBC,KAA9D;AACD,SALoD;AAMrDP,aAAK,UAASvC,CAAT,EAAY;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACA,eAAK8B,iBAAL,KAA2BO,SAA3B;AACE;AACA,WAAC,KAAKU,eAAL,EAFH;AAGE;AACA;AACA;AACA;AACAb,8BAAoB,oBATxB,EAUE,gCAVF;AAYA,cAAIU,UAAU,KAAKV,eAAL,CAAd;AACA,cAAIU,YAAYP,SAAhB,EAA2B;AACzB,gBAAIW,OAAO,EAAEC,WAAW,IAAb,EAAmBH,OAAOT,SAA1B,EAAX;AACA,iBAAKH,eAAL,IAAwBU,UAAU;AAChCC,0BAAYG,IADoB;AAEhCE,sBAAQ,IAFwB;AAGhCC,mBAAKlB,QAH2B;AAIhCmB,4BAAc;AAJkB,aAAlC;AAMD;AACD,eAAKC,MAAL,CAAYC,sBAAZ,CAAmCV,OAAnC;AACAA,kBAAQC,UAAR,CAAmBC,KAAnB,GAA2B9C,CAA3B;AACD;AAtCoD,OAAvD;AAwCD;AACF,GA/GoD,CAoHlB;;;AAMnC;;;AAYA;;;AAIA;;;AAOA;;;AAKA;;;AAMA;;;AAGA;;;AAMA;;;AAGA;;;AAGA;AACgD;;AAEhD;;;AAKA;;;AAKA;;;AAIA;;;AAMA;;;AAIA;;;AAIA;;;AAKA;;;AAGA;;;AAGA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;;;AAGA;AACA;;;AAQA;AACA;AACA;;;AAIA;;;AAGA;;;AAGA;AACA;;;AAGAuD,SAAOC,CAAP,EAA0B;AACxB,WAAO,SAASA,CAAhB;AACD;;AAEDC,YAAkB;AAChB,QAAI,CAAC,KAAKC,SAAV,EAAqB;AACnB,WAAKA,SAAL,GAAiB,EAAE,KAAKL,MAAL,CAAYM,WAA/B;AACD;AACD,WAAO,KAAKD,SAAZ;AACD;;AAED,MAAIE,aAAJ,GAAgD;AAC9C,WAAO,KAAKC,cAAZ;AACD;;AAED,MAAID,aAAJ,CAAkBd,KAAlB,EAA8C;AAC5C,SAAKe,cAAL,GAAsBf,KAAtB;AACD;;AAEDgB,gCAAuC;AACrC,SAAK,IAAIC,IAAT,IAAiB,KAAKpC,UAAL,CAAgBqC,MAAhB,EAAjB,EAA2C;AACzC,UAAID,KAAKlB,UAAL,KAAoBR,SAAxB,EAAmC;AACnC,aAAO,IAAP;AACD;AACD,SAAK,IAAI0B,IAAT,IAAiB,KAAKlC,OAAL,CAAamC,MAAb,EAAjB,EAAwC;AACtC,UAAID,KAAKlB,UAAL,KAAoBR,SAAxB,EAAmC;AACnC,aAAO,IAAP;AACD;AACD,WAAO,KAAP;AACD;;AAED4B,iBAAwB;AACtB,WAAO,KAAP;AACD;;AAEDC,qBAA4B;AAC1B,WAAO,KAAP;AACD;;AAEDC,qBAAgC;AAC9B,WAAO,IAAP;AACD;;AAEDC,mBAAuB;AACrB,SAAK/C,UAAL,GAAkB,KAAKgC,MAAL,CAAYpC,UAAZ,CAAuBK,KAAzC;AACD;;AAED+C,gBAAoB;AAClB,SAAKhD,UAAL,GAAkB,KAAKgC,MAAL,CAAYpC,UAAZ,CAAuBG,IAAzC;AACD;;AAEDkD,aAAWC,MAAX,EAA0C;AACxC,SAAK/C,SAAL,GAAiB,KAAK6B,MAAL,CAAYpC,UAAZ,CAAuBG,IAAxC;AACA,SAAKK,uBAAL,GAA+B,yBAC7B,KAAK4B,MADwB,EAE7BkB,WAAW,YAAX,IAA4BA,yCAAiCA,OAAOzB,KAAP,KAAiB,YAFjD,CAA/B;AAID;;AAED0B,cAAkB;AAChB,SAAK9C,QAAL,GAAgB,KAAK2B,MAAL,CAAYpC,UAAZ,CAAuBG,IAAvC;AACD;;AAEDqD,oBAA2B;AACzB,WAAO,KAAKpD,UAAL,CAAgBqD,WAAhB,EAAP;AACD;;AAEDC,kBAAyB;AACvB,WAAO,KAAKjD,QAAL,CAAcgD,WAAd,EAAP;AACD;;AAEDE,UAAc;AACZ,SAAKrD,UAAL,GAAkB,KAAK8B,MAAL,CAAYpC,UAAZ,CAAuBG,IAAzC;AACD;;AAED2B,oBAA2B;AACzB,WAAO,KAAKxB,UAAL,CAAgBmD,WAAhB,EAAP;AACD;;AAEDG,mBAA0B;AACxB,QAAI,CAAC,KAAKrD,SAAL,CAAesD,cAAf,EAAL,EAAsC,OAAO,IAAP;AACtC,QAAI,KAAKL,eAAL,EAAJ,EAA4B,OAAO,KAAP;AAC5B,QAAI,KAAK5C,OAAL,CAAakD,IAAb,GAAoB,CAAxB,EAA2B,OAAO,KAAP;AAC3B,SAAK,IAAIC,eAAT,IAA4B,KAAKrD,UAAL,CAAgBqC,MAAhB,EAA5B,EAAsD;AACpD,UAAIhB,OAAOgC,gBAAgBnC,UAA3B;AACA,UAAIG,SAASX,SAAb,EAAwB,SAF4B,CAElB;AAClC,UAAI,CAAC,8BAAiB,KAAKgB,MAAtB,EAA8BL,IAA9B,CAAL,EAA0C,OAAO,KAAP;AAC1C,UAAI,CAACA,KAAKiC,QAAV,EAAoB,OAAO,KAAP;AACrB;AACD,QAAI,KAAKjE,UAAL,6BAAJ,EAA0C,OAAO,IAAP;AAC1C,QAAI,KAAKA,UAAL,KAAoB,KAAKqC,MAAL,CAAYpC,UAAZ,CAAuBiE,eAA/C,EAAgE,OAAO,IAAP;AAChE,6BAAU,KAAKlE,UAAf;AACA,WAAO,KAAKA,UAAL,CAAgB6D,cAAhB,EAAP;AACD;;AAEDM,yBAAgC;AAC9B,WAAO,CAAC,KAAK1D,uBAAL,CAA6BqD,cAA7B,EAAR;AACD;;AAEDM,kBAAyB;AACvB,WAAO,KAAKjE,WAAL,CAAiBkE,yBAAjB,GAA6CvC,KAApD;AACD;;AAEDwC,gBAActF,CAAd,EAA0B;AACxB,SAAKmB,WAAL,GAAmBnB,IAAI,KAAKqD,MAAL,CAAYpC,UAAZ,CAAuBG,IAA3B,GAAkC,KAAKiC,MAAL,CAAYpC,UAAZ,CAAuBK,KAA5E;AACD;;AAEDiE,YAAsB;AACpB;AACA,QAAI,KAAKC,WAAL,KAAqBnD,SAAzB,EAAoC,OAAO,QAAP;AACpC,QAAI,KAAKoD,WAAL,KAAqBpD,SAAzB,EAAoC,OAAO,QAAP;AACpC,QAAI,KAAKqD,WAAL,KAAqBrD,SAAzB,EAAoC,OAAO,QAAP;AACpC,QAAI,KAAKsD,YAAL,KAAsBtD,SAA1B,EAAqC,OAAO,SAAP;AACrC,QAAI,KAAKuD,UAAL,KAAoBvD,SAAxB,EAAmC,OAAO,MAAP;AACnC,QAAI,KAAKwD,cAAL,KAAwBxD,SAA5B,EAAuC,OAAO,QAAP;AACvC,QAAI,KAAKyD,QAAL,KAAkBzD,SAAtB,EAAiC,OAAO,KAAP;AACjC,QAAI,KAAK0D,QAAL,KAAkB1D,SAAtB,EAAiC,OAAO,KAAP;AACjC,QAAI,KAAK2D,SAAL,KAAmB3D,SAAvB,EAAkC,OAAO,UAAP;AAClC,QAAI,KAAK4D,gBAAL,KAA0B5D,SAA9B,EAAyC,OAAO,aAAP;AACzC,QAAI,KAAK6D,YAAL,KAAsB7D,SAA1B,EAAqC,OAAO,SAAP;AACrC,QAAI,KAAK8D,YAAL,KAAsB9D,SAA1B,EAAqC,OAAO,SAAP;AACrC,QAAI,2BAAe,IAAf,KAAwB,KAAKgB,MAAL,CAAY+C,KAAZ,CAAkBC,OAA9C,EAAuD,OAAO,cAAP;AACvD,QAAI,KAAKC,eAAL,KAAyBjE,SAA7B,EAAwC,OAAO,KAAKiE,eAAZ;AACxC;AACA,WAAO,QAAP;AACD;;AAEDC,qBACEC,IADF,EAEEC,MAFF,EAGEC,QAHF,EAIE1D,OAAoB,EAJtB,EAKS;AACP,QAAItC,aAAJ;AACA,QAAI,OAAO8F,IAAP,KAAgB,QAApB,EAA8B;AAC5B,UAAI,KAAK9F,aAAT,EAAwBA,gBAAiB,GAAE,KAAKA,aAAc,IAAG8F,IAAK,EAA9C;AACzB,KAFD,MAEO,IAAIA,mCAAJ,EAAiC;AACtC,UAAI,KAAK9F,aAAL,IAAsB8F,KAAK9F,aAA/B,EAA8CA,gBAAiB,GAAE,KAAKA,aAAc,IAAG8F,KAAK9F,aAAc,GAA5D;AAC/C,KAFM,MAEA;AACL,+BAAU,KAAV;AACD;AACD,QAAIiG,UAAU,gCAAwB,KAAKtD,MAA7B,EAAqC3C,aAArC,EAAoD8F,IAApD,EAA0DC,MAA1D,EAAkEC,QAAlE,EAA4E,KAA5E,CAAd;AACA,SAAKE,oBAAL,CAA0BJ,IAA1B,EAAgCG,OAAhC,EAAyC3D,IAAzC;AACA,WAAO2D,OAAP;AACD;;AAEDC,uBAAqBJ,IAArB,EAAiD1D,KAAjD,EAA+EE,OAAoB,EAAnG,EAAuG;AACrG,6BAAU,CAACF,KAAD,IAAUA,8BAApB;AACA,SAAK+D,kBAAL,CAAwBL,IAAxB;AACE1D,WADF;AAEEmC,gBAAU,IAFZ;AAGE6B,kBAAY,KAHd;AAIEnE,oBAAc;AAJhB,OAKKK,IALL;AAOD;;AAED+D,qBAAmBP,IAAnB,EAA+CE,QAA/C,EAAiF1D,OAAoB,EAArG,EAAyG;AACvG,QAAItC,aAAJ,EAAmBsG,QAAnB;AACA,QAAI,OAAOR,IAAP,KAAgB,QAApB,EAA8B;AAC5BQ,iBAAY,OAAMR,IAAK,EAAvB;AACA,UAAI,KAAK9F,aAAT,EAAwBA,gBAAiB,GAAE,KAAKA,aAAc,IAAG8F,IAAK,EAA9C;AACzB,KAHD,MAGO,IAAIA,mCAAJ,EAAiC;AACtCQ,iBACER,KAAKS,YAAL,4BACK,QAAOT,KAAKS,YAAL,CAAkBC,wBAAlB,GAA6CpE,KAAM,GAD/D,GAEK,QAAO,GAAI,GAHlB;AAIA,UAAI,KAAKpC,aAAL,IAAsB8F,KAAK9F,aAA/B,EAA8CA,gBAAiB,GAAE,KAAKA,aAAc,IAAG8F,KAAK9F,aAAc,GAA5D;AAC/C,KANM,MAMA;AACL,+BAAU,KAAV;AACD;;AAED,QAAIyG,OAAO,gCAAwB,KAAK9D,MAA7B,EAAqC3C,aAArC,EAAoDsG,QAApD,EAA8D,CAA9D,EAAiEN,QAAjE,CAAX;AACA,SAAKG,kBAAL,CAAwBL,IAAxB;AACEpE,WAAK+E,IADP;AAEE5E,WAAK,KAAKc,MAAL,CAAYpC,UAAZ,CAAuBoB,SAF9B;AAGEyE,kBAAY,KAHd;AAIEnE,oBAAc;AAJhB,OAKKK,IALL;AAOD;;AAEDoE,uBAAqBZ,IAArB,EAAiD1D,KAAjD,EAA+EE,OAAoB,EAAnG,EAAuG;AACrG,6BAAU,CAACF,KAAD,IAAUA,8BAApB;AACA,SAAK+D,kBAAL,CAAwBL,IAAxB;AACE1D,WADF;AAEEmC,gBAAU,KAFZ;AAGE6B,kBAAY,KAHd;AAIEnE,oBAAc;AAJhB,OAKKK,IALL;AAOD;;AAEDqE,4BAAyC;AACvC,QAAI,KAAK5C,eAAL,MAA0B,KAAK1B,eAAL,EAA1B,IAAoD,KAAKuE,eAAL,KAAyBjF,SAAjF,EAA4F;AAC1F,4BAAckF,wBAAd,CAAuC,IAAvC;AACA,YAAM,wBAAN;AACD;;AAED,QAAIC,WAAWC,MAAMC,IAAN,CAAW,KAAK/F,UAAL,CAAgBgG,IAAhB,EAAX,CAAf;AACAH,eAAWA,SAASI,MAAT,CAAgBpE,KAAK;AAC9B,UAAIqE,KAAK,KAAKlG,UAAL,CAAgBS,GAAhB,CAAoBoB,CAApB,CAAT;AACA,UAAI,CAACqE,EAAD,IAAOA,GAAGhF,UAAH,KAAkBR,SAA7B,EAAwC,OAAO,KAAP;AACxC,UAAIyF,KAAKD,GAAGhF,UAAH,CAAcC,KAAvB;AACA,UAAIgF,OAAOzF,SAAX,EAAsB,OAAO,IAAP;AACtB,+BAAUyF,2BAAV;AACA,UAAI,CAACA,GAAGC,oBAAH,EAAL,EAAgC,OAAO,IAAP;AAChC;AACA;AACA;AACA,+BAAUD,mCAAV;AACA,4BAAcP,wBAAd,CAAuCO,EAAvC;AACA,YAAM,wBAAN;AACD,KAbU,CAAX;AAcA,SAAKzE,MAAL,CAAY2E,gCAAZ,CAA6C,IAA7C;AACA,WAAOR,QAAP;AACD;;AAED;AACAS,cAAYC,OAAZ,EAA0E;AACxE,QAAI;AACF,UAAI,KAAKtE,aAAL,KAAuBvB,SAA3B,EAAsC,OAAO,KAAKuB,aAAZ;AACtC,+BAAU,CAAC,KAAKa,eAAL,EAAX;AACA,UAAI0D,WAAW,IAAI7H,WAAJ,CAAgB,KAAK+C,MAArB,EAA6B,KAAKA,MAAL,CAAYpC,UAAZ,CAAuBiE,eAApD,CAAf;AACA,WAAKkD,QAAL,CAAc,KAAKC,gBAAL,EAAd,EAAuC,IAAvC,EAA6CF,QAA7C;AACA,UAAIG,SAAS,sBAAcC,+BAAd,CAA8C,KAAKlF,MAAnD,EAA2D/C,WAA3D,EAAwE,CAAC6H,QAAD,CAAxE,EAAoF,CAAC,CAAC3E,CAAD,CAAD,KAASA,CAA7F,EAAgG;AAC3GgF,uBAAe;AAD4F,OAAhG,CAAb;AAGA,+BAAUF,6CAAV;AACAA,aAAOtE,MAAP,GAAgB,wBAAiBmE,QAAjB,CAAhB;AACA,aAAOG,MAAP;AACD,KAXD,SAWU;AACR,UAAIJ,WAAWA,QAAQO,gBAAvB,EAAyC;AACvC,aAAK9G,UAAL,GAAkB,IAAIC,GAAJ,EAAlB;AACA,aAAKC,OAAL,GAAe,IAAID,GAAJ,EAAf;AACA,aAAK0F,eAAL,GAAuBjF,SAAvB;AACD;AACF;AACF;;AAED+F,WAAST,IAAT,EAAwCD,IAAxC,EAA2DgB,EAA3D,EAA4E;AAC1E;AACA,SAAK,IAAIC,OAAT,IAAoBhB,IAApB,EAA0B;AACxB;AACA,UAAI3E,OAAO0E,KAAKkB,eAAL,CAAqBD,OAArB,CAAX;;AAEA;AACA,UAAI3F,QAAQA,KAAK8D,UAAjB,EAA6B;AAC3B,+BAAW+B,2BAAX,CAAuC7F,KAAKF,KAA5C;;AAEA;AACA,YAAIgG,YAAY,iBAAI,KAAKzF,MAAT,EAAiBqE,IAAjB,EAAuBiB,OAAvB,CAAhB;;AAEA;AACA,+BAAWI,GAAX,CAAe,KAAK1F,MAApB,EAA4BqF,EAA5B,EAAgCC,OAAhC,EAAyCG,SAAzC,EAAoD,IAApD;AACD;AACF;AACF;;AAEDE,aAAWzG,GAAX,EAA0B0G,KAA1B,EAAuD;AACrD,QAAIC,MAAM3G,IAAI,EAAJ,CAAV;;AAEA,SAAK,IAAI,CAACY,GAAD,EAAM6B,eAAN,CAAT,IAAmC,KAAKrD,UAAxC,EAAoD;AAClD,UAAIqB,OAAOgC,gBAAgBnC,UAA3B;AACA,UAAIG,SAASX,SAAb,EAAwB,SAF0B,CAEhB;AAClC,6BAAWwG,2BAAX,CAAuC7F,KAAKF,KAA5C;AACA,UAAIqG,iBAAsB,EAAErC,YAAY9D,KAAK8D,UAAnB,EAA+BnE,cAAcK,KAAKL,YAAlD,EAA1B;AACA,UAAIK,KAAKF,KAAT,EAAgB;AACdqG,uBAAelE,QAAf,GAA0BjC,KAAKiC,QAA/B;AACA,iCAAUjC,KAAKF,KAAL,yBAAV;AACAqG,uBAAerG,KAAf,GAAuBE,KAAKF,KAAL,CAAWsG,SAAX,CAAqBH,KAArB,CAAvB;AACD,OAJD,MAIO;AACL,iCAAUjG,KAAKZ,GAAL,KAAaC,SAAvB;AACA8G,uBAAe/G,GAAf,GAAqBY,KAAKZ,GAAL,CAASgH,SAAT,CAAmBH,KAAnB,CAArB;AACA,iCAAUjG,KAAKT,GAAL,KAAaF,SAAvB;AACA8G,uBAAe5G,GAAf,GAAqBS,KAAKT,GAAL,CAAS6G,SAAT,CAAmBH,KAAnB,CAArB;AACD;AACDzG,aAAOC,cAAP,CAAsByG,GAAtB,EAA2B/F,GAA3B,EAAgCgG,cAAhC;AACD;AACD,WAAOD,GAAP;AACD;;AAED;AACA;AACA;AACAG,+CAAsD;AACpD,WAAO,IAAP;AACD;;AAED;AACAC,oBAAiE;AAC/D,WAAO,KAAKtI,UAAZ;AACD;;AAED;AACAuI,kBAAgBC,CAAhB,EAAqD;AACnD;AACA,WAAO,uBAAWC,sBAAX,CAAkC,KAAKpG,MAAvC,EAA+C,IAA/C,EAAqDmG,CAArD,CAAP;AACD;;AAED;AACAE,kBAAyB;AACvB;AACA,WAAO,kCAAqB,KAAKrG,MAA1B,EAAkC,IAAlC,CAAP;AACD;;AAED;AACAsG,uBAA8B;AAC5B;AACA,WAAO,uCAA0B,KAAKtG,MAA/B,EAAuC,IAAvC,CAAP;AACD;;AAED;AACAuF,kBAAgBgB,CAAhB,EAAwD;AACtD;AACA,WAAO,uBAAWC,sBAAX,CAAkC,KAAKxG,MAAvC,EAA+C,IAA/C,EAAqDuG,CAArD,CAAP;AACD;;AAED;AACA/C,qBAAmB+C,CAAnB,EAAwCE,IAAxC,EAAmE;AACjE;AACA,WAAO,uBAAWC,yBAAX,CAAqC,KAAK1G,MAA1C,EAAkD,IAAlD,EAAwDuG,CAAxD,EAA2DE,IAA3D,CAAP;AACD;;AAED;AACAE,eAAaJ,CAAb,EAA2C;AACzC,QAAI,KAAKtC,eAAL,KAAyBjF,SAAzB,IAAsC,KAAKuG,eAAL,CAAqBgB,CAArB,MAA4BvH,SAAtE,EAAiF;AAC/E,4BAAckF,wBAAd,CAAuC,IAAvC,EAA6CqC,CAA7C;AACA,YAAM,wBAAN;AACD;;AAED,WAAO,iCAAoB,KAAKvG,MAAzB,EAAiC,IAAjC,EAAuCuG,CAAvC,CAAP;AACD;;AAED;AACAK,OAAKL,CAAL,EAA0BM,QAA1B,EAAkD;AAChD,QAAInG,OAAO,KAAKuD,eAAhB;AACA,QAAIvD,SAAS1B,SAAT,IAAsB0B,KAAKlB,UAAL,KAAoBR,SAA1C,IAAuD,KAAKuG,eAAL,CAAqBgB,CAArB,MAA4BvH,SAAvF,EAAkG;AAChG,UAAIW,OAAOe,KAAKlB,UAAhB;AACA,+BAAUG,SAASX,SAAnB;AACA,UAAI8H,MAAMnH,KAAKF,KAAf;AACA,+BAAUqH,oCAAV;AACA,UAAIrB,SAAJ;AACA,UAAIc,gCAAJ,EAA8B;AAC5Bd,oBAAYc,CAAZ;AACD,OAFD,MAEO,IAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B;AAChCd,oBAAY,wBAAgB,KAAKzF,MAArB,EAA6BuG,CAA7B,CAAZ;AACD;;AAED,UAAIO,IAAIlK,IAAJ,KAAa,0BAAjB,EAA6C;AAC3C,iCAAUiK,0CAAkC,mBAAWE,uCAAX,CAAmDF,QAAnD,CAA5C;AACA,YAAIjI,QAAJ;AACA,YAAI2H,gCAAJ,EAA8B;AAC5B3H,qBAAW2H,EAAE9G,KAAb;AACD,SAFD,MAEO;AACLb,qBAAW2H,CAAX;AACD;AACD,eAAO,oDAAuC,KAAKvG,MAA5C,EAAoD6G,QAApD,EAA8DjI,QAA9D,CAAP;AACD,OATD,MASO,IAAI,CAAC6G,SAAL,EAAgB;AACrB,8BAAcvB,wBAAd,CAAuC4C,GAAvC,EAA4C,iCAA5C;AACA,cAAM,wBAAN;AACD;AACD,aAAO,KAAKE,cAAL,CAAoBF,GAApB,EAAyBrB,SAAzB,CAAP;AACD;;AAED;AACA,WAAO,yBAAY,KAAKzF,MAAjB,EAAyB,IAAzB,EAA+BuG,CAA/B,EAAkCM,QAAlC,CAAP;AACD;;AAEDI,4BAA0BV,CAA1B,EAAsD;AACpD,QAAIW,sBAAsB,KAAKlH,MAAL,CAAYmH,cAAtC;AACA,QAAI;AACF,WAAKnH,MAAL,CAAYmH,cAAZ,GAA6B,CAA7B;AACA,UAAIxH,OAAO,KAAK4F,eAAL,CAAqBgB,CAArB,CAAX;AACA,aAAO5G,SAASX,SAAT,IAAsBW,KAAKF,KAAL,yBAAtB,GAAoDE,KAAKF,KAAzD,GAAiE,KAAKO,MAAL,CAAYpC,UAAZ,CAAuBoB,SAA/F;AACD,KAJD,SAIU;AACR,WAAKgB,MAAL,CAAYmH,cAAZ,GAA6BD,mBAA7B;AACD;AACF;;AAEDE,cAAYb,CAAZ,EAAiDM,QAAjD,EAAyE;AACvE,QAAIA,6CAAqCA,SAASQ,OAAT,0BAArC,IAA2Ed,MAAM,QAArF,EAA+F;AAC7F,aAAO,sBAAce,kBAAd,CAAiC,KAAKtH,MAAtC,EAA8ChD,cAA9C,uBAA2E,CAAC6J,QAAD,CAA3E,EAAuF9J,iBAAvF,CAAP;AACD;;AAED,QAAI,EAAEwJ,kCAAF,CAAJ,EAAmC,OAAO,KAAKK,IAAL,CAAUL,CAAV,EAAaM,QAAb,CAAP;;AAEnC;AACA;AACA;AACA,QAAIN,EAAEgB,gBAAF,MAAwBhB,EAAEiB,gBAAF,EAAxB,IAAgD,CAACjB,EAAE/E,cAAF,EAArD,EAAyE;AACvE,UAAI,KAAKxB,MAAL,CAAYyH,aAAZ,EAAJ,EAAiC;AAC/B;AACA;AACA,0BAAMhI,KAAN,CAAY,KAAKO,MAAjB,EAAyBuG,CAAzB;AACD,OAJD,MAIO;AACL,YAAImB,QAAQ,+BACV,oEADU,EAEV,KAAK1H,MAAL,CAAY2H,eAFF,EAGV,QAHU,EAIV,kBAJU,CAAZ;AAMA,YAAI,KAAK3H,MAAL,CAAY4H,WAAZ,CAAwBF,KAAxB,MAAmC,SAAvC,EAAkD;AAChD,gBAAM,wBAAN;AACD;AACF;AACF;;AAED;AACA,QAAI,CAAC,KAAKlG,cAAL,EAAL,EAA4B;AAC1B,UAAI,KAAKxB,MAAL,CAAYyH,aAAZ,EAAJ,EAAiC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,0BAAMhI,KAAN,CAAY,KAAKO,MAAjB,EAAyB6G,QAAzB;AACA,eAAO,sBAAc3B,+BAAd,CAA8C,KAAKlF,MAAnD,iBAAkE,CAAC6G,QAAD,EAAWN,CAAX,CAAlE,EAAiF,CAAC,CAACsB,CAAD,EAAIC,CAAJ,CAAD,KACtFrL,EAAEsL,gBAAF,CAAmBF,CAAnB,EAAsBC,CAAtB,EAAyB,IAAzB,CADK,CAAP;AAGD,OAXD,MAWO;AACL,YAAIJ,QAAQ,+BACV,uDADU,EAEV,KAAK1H,MAAL,CAAY2H,eAFF,EAGV,QAHU,EAIV,kBAJU,CAAZ;AAMA,YAAI,KAAK3H,MAAL,CAAY4H,WAAZ,CAAwBF,KAAxB,MAAmC,SAAvC,EAAkD;AAChD,gBAAM,wBAAN;AACD;AACF;AACF;;AAEDnB,QAAI,eAAGyB,gBAAH,CAAoB,KAAKhI,MAAzB,EAAiCuG,CAAjC,CAAJ;;AAEA;AACA;AACA,QAAItB,MAAJ;AACA,QAAI,KAAK7D,eAAL,EAAJ,EAA4B;AAC1B,UAAI1E,eAAe6J,CAAf,CAAJ,EAAuB;AACrB;AACA,eAAO,sBAAcrB,+BAAd,CAA8C,KAAKlF,MAAnD,iBAAkE,CAAC,IAAD,EAAOuG,CAAP,CAAlE,EAA6E,CAAC,CAACsB,CAAD,EAAIC,CAAJ,CAAD,KAClFrL,EAAEsL,gBAAF,CAAmBF,CAAnB,EAAsBC,CAAtB,EAAyB,IAAzB,CADK,CAAP;AAGD;AACD7C,eAAS,sBAAcgD,cAAd,CAA6B,KAAKjI,MAAlC,iBAAiD,4BAAjD,EAA+E,CAAC,IAAD,EAAOuG,CAAP,CAA/E,CAAT;AACD,KARD,MAQO;AACLtB,eAAS,sBAAcC,+BAAd,CAA8C,KAAKlF,MAAnD,iBAAkE,CAAC,IAAD,EAAOuG,CAAP,CAAlE,EAA6E,CAAC,CAACsB,CAAD,EAAIC,CAAJ,CAAD,KACpFrL,EAAEsL,gBAAF,CAAmBF,CAAnB,EAAsBC,CAAtB,EAAyB,IAAzB,CADO,CAAT;AAGD;;AAED;AACA;AACA,QAAIpH,OAAO,KAAKuD,eAAhB;AACA,QAAIvD,SAAS1B,SAAb,EAAwB;AACtB,UAAIW,OAAOe,KAAKlB,UAAhB;AACA,UAAIG,SAASX,SAAb,EAAwB;AACtB,YAAI8H,MAAMnH,KAAKF,KAAf;AACA,iCAAUqH,oCAAV;AACA7B,iBAAS,KAAK+B,cAAL,CAAoBF,GAApB,EAAyBP,CAAzB,CAAT;AACD;AACF;AACD;AACA;AACA,SAAK,IAAI,CAACzG,GAAD,EAAM6B,eAAN,CAAT,IAAmC,KAAKrD,UAAxC,EAAoD;AAClD,UAAIqB,OAAOgC,gBAAgBnC,UAA3B;AACA,UAAIG,SAASX,SAAb,EAAwB,SAF0B,CAEhB;AAClC,+BAAUW,KAAKF,KAAL,KAAeT,SAAzB,EAHkD,CAGb;AACrC,UAAI8H,MAAMnH,KAAKF,KAAf;AACA,+BAAUqH,4BAAV;AACA,UAAIoB,OAAO,sBAAcC,kBAAd,CACT,KAAKnI,MADI,EAET,KAFS,EAGTuG,CAHS,EAIT,wBAAgB,KAAKvG,MAArB,EAA6BF,GAA7B,CAJS,EAKTd,SALS,EAMT,0BANS,CAAX;AAQAiG,eAAS,iBAAKmD,uBAAL,CAA6B,KAAKpI,MAAlC,EAA0CkI,IAA1C,EAAgDpB,GAAhD,EAAqD7B,MAArD,CAAT;AACD;AACD,WAAOA,MAAP;AACD;;AAED+B,iBAAeqB,MAAf,EAAsCzJ,QAAtC,EAA8D;AAC5D,QAAIyJ,OAAOzL,IAAP,KAAgB,kBAApB,EAAwC;AACtC,UAAI0L,KAAKD,OAAOvL,IAAP,CAAY,CAAZ,CAAT;AACA,UAAI8B,uCAAJ,EAAqC;AACnC,YAAI2J,QAAQ3J,SAASa,KAArB;AACA,YAAI+I,UAAU,CAACD,KAAf;AACA,YAAIA,UAAUC,UAAU,EAAxB,EAA4B5J,WAAW,wBAAgB,KAAKoB,MAArB,EAA6BwI,OAA7B,CAAX;AAC7B;AACD,aAAO,sBAActD,+BAAd,CAA8C,KAAKlF,MAAnD,EAA2DqI,OAAOhB,OAAP,EAA3D,EAA6E,CAACiB,EAAD,EAAK1J,QAAL,CAA7E,EAA6F,CAAC,CAACiJ,CAAD,EAAIC,CAAJ,CAAD,KAAY;AAC9G,eAAOrL,EAAEsL,gBAAF,CAAmBF,CAAnB,EAAsBC,CAAtB,EAAyB,IAAzB,CAAP;AACD,OAFM,CAAP;AAGD;AACD,6BAAUO,OAAOvL,IAAP,CAAYsG,MAAZ,KAAuB,CAAvB,IAA4BiF,OAAOzL,IAAP,KAAgB,aAAtD;AACA,QAAI6L,eAAeJ,OAAOvL,IAAP,CAAY,CAAZ,CAAnB;AACA,6BAAU2L,6CAAV;AACA,QAAIP,OAAO,KAAKQ,cAAL,CAAoBD,YAApB,EAAkC7J,QAAlC,CAAX;AACA,QAAI+J,OAAON,OAAOvL,IAAP,CAAY,CAAZ,CAAX;AACA,QAAI6L,yCAAiCA,KAAK7L,IAAL,CAAUsG,MAAV,KAAqB,CAA1D,EAA6DuF,OAAO,KAAK3B,cAAL,CAAoB2B,IAApB,EAA0B/J,QAA1B,CAAP;AAC7D,QAAIgK,OAAOP,OAAOvL,IAAP,CAAY,CAAZ,CAAX;AACA,QAAI8L,qCAAJ,EAAmC;AACjC,UAAIA,KAAKhM,IAAL,KAAc,0CAAlB,EAA8D;AAC5D,YAAI0L,KAAKM,KAAK9L,IAAL,CAAU,CAAV,CAAT;AACA8L,eAAO,sBAAc1D,+BAAd,CAA8C,KAAKlF,MAAnD,EAA2DqI,OAAOhB,OAAP,EAA3D,EAA6E,CAACiB,EAAD,EAAK1J,QAAL,CAA7E,EAA6F,CAAC,CAACiJ,CAAD,EAAIC,CAAJ,CAAD,KAClGrL,EAAEsL,gBAAF,CAAmBF,CAAnB,EAAsBC,CAAtB,EAAyB,IAAzB,CADK,CAAP;AAGD,OALD,MAKO,IAAIc,KAAK9L,IAAL,CAAUsG,MAAV,KAAqB,CAAzB,EAA4B;AACjCwF,eAAO,KAAK5B,cAAL,CAAoB4B,IAApB,EAA0BhK,QAA1B,CAAP;AACD;AACF;AACD,WAAO,sBAAciK,uBAAd,CAAsC,KAAK7I,MAA3C,EAAmDkI,IAAnD,EAAyDS,IAAzD,EAA+DC,IAA/D,EAAqEP,OAAOS,kBAA5E,CAAP;AACD;;AAEDJ,iBAAeL,MAAf,EAAsCzJ,QAAtC,EAA8D;AAC5D,QAAIyJ,OAAOzL,IAAP,KAAgB,sCAApB,EACE,OAAO,sBAAcuL,kBAAd,CAAiC,KAAKnI,MAAtC,EAA8C,KAA9C,EAAqDqI,OAAOvL,IAAP,CAAY,CAAZ,CAArD,EAAqE8B,QAArE,CAAP;AACF,WAAOyJ,MAAP;AACD;;AAED;AACAU,OAAKxC,CAAL,EAA0BJ,CAA1B,EAAoCU,QAApC,EAA8D;AAC5D;AACA,WAAO,uBAAWmC,WAAX,CAAuB,KAAKhJ,MAA5B,EAAoC,IAApC,EAA0CuG,CAA1C,EAA6CJ,CAA7C,EAAgDU,QAAhD,CAAP;AACD;;AAEDoC,cAAY1C,CAAZ,EAAiDJ,CAAjD,EAA2DU,QAA3D,EAAqF;AACnF,QAAI,EAAEN,kCAAF,CAAJ,EAAmC,OAAO,KAAKwC,IAAL,CAAUxC,CAAV,EAAaJ,CAAb,EAAgBU,QAAhB,CAAP;AACnC,QAAIqC,aAAaxM,eAAe6J,CAAf,CAAjB;AACA,QAAI4C,aAAa,cAAMC,oBAAN,CAA2B7C,EAAEc,OAAF,EAA3B,sBAAjB;;AAEA;AACA;AACA;AACA,QAAId,EAAEgB,gBAAF,MAAwBhB,EAAEiB,gBAAF,EAAxB,IAAgD,CAACjB,EAAE/E,cAAF,EAArD,EAAyE;AACvE,UAAI,KAAKxB,MAAL,CAAYyH,aAAZ,EAAJ,EAAiC;AAC/B;AACA;AACA,0BAAMhI,KAAN,CAAY,KAAKO,MAAjB,EAAyBuG,CAAzB;AACD,OAJD,MAIO;AACL,YAAImB,QAAQ,+BACV,oEADU,EAEV,KAAK1H,MAAL,CAAY2H,eAFF,EAGV,QAHU,EAIV,kBAJU,CAAZ;AAMA,YAAI,KAAK3H,MAAL,CAAY4H,WAAZ,CAAwBF,KAAxB,MAAmC,SAAvC,EAAkD;AAChD,gBAAM,wBAAN;AACD;AACF;AACF;;AAED;AACA;AACA,QAAI,CAAC,KAAKlG,cAAL,EAAL,EAA4B;AAC1B,UAAI,KAAKxB,MAAL,CAAYyH,aAAZ,EAAJ,EAAiC;AAC/B;AACA;AACA,0BAAMhI,KAAN,CAAY,KAAKO,MAAjB,EAAyB6G,QAAzB;AACA;AACA,0BAAMpH,KAAN,CAAY,KAAKO,MAAjB,EAAyBmG,CAAzB;AACA,aAAKnG,MAAL,CAAYqJ,mCAAZ,CACE,MAAM;AACJ,cAAIC,YAAY,KAAKtJ,MAAL,CAAYsJ,SAA5B;AACA,mCAAUA,SAAV;AACA,mCAAU/C,kCAAV;AACA+C,oBAAUC,aAAV,CAAwB,CAAC1C,QAAD,EAAWN,CAAX,EAAcJ,CAAd,CAAxB,EAA0C,CAAC,CAACqD,UAAD,EAAaC,OAAb,EAAsBC,SAAtB,CAAD,KACxCjN,EAAEkN,mBAAF,CACElN,EAAEmN,oBAAF,CAAuB,GAAvB,EAA4BnN,EAAEsL,gBAAF,CAAmByB,UAAnB,EAA+BC,OAA/B,EAAwC,IAAxC,CAA5B,EAA2EC,SAA3E,CADF,CADF;AAKA,iBAAO,KAAK1J,MAAL,CAAYpC,UAAZ,CAAuBoB,SAA9B;AACD,SAXH,EAYE,mBAAY6K,MAZd,EAaE,oBAAaA,MAbf;AAeA;AACA;AACA;AACA;AACA,eAAO,IAAP;AACD,OA1BD,MA0BO;AACL,YAAInC,QAAQ,+BACV,uDADU,EAEV,KAAK1H,MAAL,CAAY2H,eAFF,EAGV,QAHU,EAIV,kBAJU,CAAZ;AAMA,YAAI,KAAK3H,MAAL,CAAY4H,WAAZ,CAAwBF,KAAxB,MAAmC,SAAvC,EAAkD;AAChD,gBAAM,wBAAN;AACD;AACF;AACF;;AAED;AACA;AACA;AACA;AACA,6BAAU,SAASb,QAAT,IAAqB,+BAAkBA,QAAlB,yBAA/B;;AAEAN,QAAI,eAAGyB,gBAAH,CAAoB,KAAKhI,MAAzB,EAAiCuG,CAAjC,CAAJ;;AAEA,aAASuD,cAAT,CAAwB3M,KAAxB,EAAsCyB,QAAtC,EAA+D;AAC7D,aAAO,sBAAcuJ,kBAAd,CACLhL,KADK,EAEL,KAFK,EAGLyB,QAHK,EAIL,wBAAgBzB,KAAhB,EAAuB,EAAvB,CAJK,EAKL6B,SALK,EAML,sCANK,CAAP;AAQD;;AAED,QAAI0B,IAAJ;AACA,QAAI,KAAKuD,eAAL,KAAyBjF,SAA7B,EAAwC;AACtC0B,aAAO;AACLlB,oBAAYR,SADP;AAELa,gBAAQ,IAFH;AAGLC,aAAKyG;AAHA,OAAP;AAKA,WAAKtC,eAAL,GAAuBvD,IAAvB;AACD,KAPD,MAOO;AACLA,aAAO,KAAKuD,eAAZ;AACD;AACD,SAAKjE,MAAL,CAAYC,sBAAZ,CAAmCS,IAAnC;AACA,QAAIf,OAAOe,KAAKlB,UAAhB;AACA,QAAIG,SAASX,SAAb,EAAwB;AACtB,UAAI+K,SAAS5D,CAAb;AACA,UAAI,EAAEA,mCAAF,KAAkC,CAACzJ,eAAe6J,CAAf,CAAvC,EAA0D;AACxD;AACA,YAAI2B,OAAO4B,eAAe,KAAK9J,MAApB,EAA4BuG,CAA5B,CAAX;AACA,YAAIyD,WAAW,sBAAc/B,cAAd,CAA6B,KAAKjI,MAAlC,iBAAiD,0CAAjD,EAA6F,CAC1G6G,QAD0G,EAE1GN,CAF0G,CAA7F,CAAf;AAIAwD,iBAAS,iBAAK3B,uBAAL,CAA6B,KAAKpI,MAAlC,EAA0CkI,IAA1C,EAAgD/B,CAAhD,EAAmD6D,QAAnD,CAAT;AACD;AACDtJ,WAAKlB,UAAL,GAAkB;AAChBoC,kBAAU,IADM;AAEhB6B,oBAAY,IAFI;AAGhBnE,sBAAc,IAHE;AAIhBG,eAAOsK;AAJS,OAAlB;AAMD,KAjBD,MAiBO;AACL;AACA,UAAIE,SAAStK,KAAKF,KAAlB;AACA,+BAAUwK,+BAAV;AACA,UAAIF,SAASE,MAAb;AACA,UAAI,EAAE9D,mCAAF,CAAJ,EAAoC;AAClC,YAAIzJ,eAAe6J,CAAf,CAAJ,EAAuB;AACrBwD,mBAAS5D,CAAT,CADqB,CACT;AACb,SAFD,MAEO;AACL,cAAI+B,OAAO4B,eAAe,KAAK9J,MAApB,EAA4BuG,CAA5B,CAAX;AACAwD,mBAAS,iBAAK3B,uBAAL,CAA6B,KAAKpI,MAAlC,EAA0CkI,IAA1C,EAAgD/B,CAAhD,EAAmD8D,MAAnD,CAAT;AACD;AACF;AACDtK,WAAKF,KAAL,GAAasK,MAAb;AACD;;AAED;AACA;AACA;AACA,QAAIG,uBAAuB,KAAKjG,eAAhC;AACA,SAAKA,eAAL,GAAuBjF,SAAvB;AACA,SAAK,IAAI,CAACc,GAAD,EAAM6B,eAAN,CAAT,IAAmC,KAAKrD,UAAxC,EAAoD;AAClD,UAAI4K,cAAcC,UAAlB,EAA8B;AAC5B;AACA,YAAIrJ,QAAQ,CAACA,GAAD,GAAO,EAAnB,EAAuB;AACvB,aAAKxB,UAAL,CAAgB6L,MAAhB,CAAuBrK,GAAvB;AACA;AACD;AACD,UAAImK,SAAS,KAAKjK,MAAL,CAAYpC,UAAZ,CAAuBwM,KAApC;AACA,UAAIzI,gBAAgBnC,UAAhB,IAA8BmC,gBAAgBnC,UAAhB,CAA2BC,KAA7D,EAAoE;AAClEwK,iBAAStI,gBAAgBnC,UAAhB,CAA2BC,KAApC;AACA,iCAAUwK,+BAAV,EAFkE,CAE9B;AACrC;AACD,UAAI/B,OAAO,sBAAcC,kBAAd,CAAiC,KAAKnI,MAAtC,EAA8C,KAA9C,EAAqDuG,CAArD,EAAwD,wBAAgB,KAAKvG,MAArB,EAA6BF,GAA7B,CAAxD,CAAX;AACA,UAAIiK,SAAS,iBAAK3B,uBAAL,CAA6B,KAAKpI,MAAlC,EAA0CkI,IAA1C,EAAgD/B,CAAhD,EAAmD8D,MAAnD,CAAb;AACA,6BAAWjB,WAAX,CAAuB,KAAKhJ,MAA5B,EAAoC,IAApC,EAA0CF,GAA1C,EAA+CiK,MAA/C,EAAuDlD,QAAvD;AACD;AACD,SAAK5C,eAAL,GAAuBiG,oBAAvB;;AAEA,WAAO,IAAP;AACD;;AAED;AACAG,UAAQ9D,CAAR,EAAsC;AACpC,QAAI,KAAKtC,eAAL,KAAyBjF,SAA7B,EAAwC;AACtC;AACA,4BAAckF,wBAAd,CAAuC,IAAvC,EAA6CqC,CAA7C;AACA,YAAM,wBAAN;AACD;;AAED;AACA,WAAO,uBAAW+D,cAAX,CAA0B,KAAKtK,MAA/B,EAAuC,IAAvC,EAA6CuG,CAA7C,CAAP;AACD;;AAED;AACAvB,qBAA4C;AAC1C,WAAO,qCAAwB,KAAKhF,MAA7B,EAAqC,IAArC,CAAP;AACD;AA/7BoD;kBAAlC/C,W;AAAAA,W,CA2BZyB,oB,GAAuB,CAC5B,YAD4B,EAE5B,YAF4B,EAG5B,WAH4B,EAI5B,UAJ4B,EAK5B,yBAL4B,EAM5B,gBAN4B,EAO5B,yBAP4B,EAQ5B,YAR4B,EAS5B,aAT4B,EAU5B,eAV4B,EAW5B,iBAX4B,EAY5B,cAZ4B,EAa5B,iBAb4B,EAc5B,MAd4B,EAe5B,UAf4B,EAgB5B,eAhB4B,EAiB5B,YAjB4B,EAkB5B,UAlB4B,EAmB5B,eAnB4B,EAoB5B,0BApB4B,EAqB5B,cArB4B,EAsB5B,cAtB4B,C;AA3BXzB,W,CAmDZ6B,2B,GAA8B,IAAIP,GAAJ,E","file":"ObjectValue.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm, ExecutionContext } from \"../realm.js\";\nimport { TypesDomain, ValuesDomain } from \"../domains/index.js\";\nimport { CompilerDiagnostic, FatalError } from \"../errors.js\";\nimport type {\n  DataBlock,\n  Descriptor,\n  IterationKind,\n  ObjectKind,\n  PromiseReaction,\n  PropertyBinding,\n  PropertyKeyValue,\n  TypedArrayKind,\n} from \"../types.js\";\nimport {\n  AbstractObjectValue,\n  AbstractValue,\n  ArrayValue,\n  BooleanValue,\n  ConcreteValue,\n  NativeFunctionValue,\n  NullValue,\n  NumberValue,\n  StringValue,\n  SymbolValue,\n  UndefinedValue,\n  Value,\n  PrimitiveValue,\n} from \"./index.js\";\nimport { isReactElement } from \"../react/utils.js\";\nimport buildExpressionTemplate from \"../utils/builder.js\";\nimport { ECMAScriptSourceFunctionValue, type NativeFunctionCallback } from \"./index.js\";\nimport {\n  Get,\n  GetFromArrayWithWidenedNumericProperty,\n  IsDataDescriptor,\n  OrdinaryOwnPropertyKeys,\n  OrdinaryGet,\n  OrdinaryHasProperty,\n  OrdinaryIsExtensible,\n  OrdinaryPreventExtensions,\n  HasCompatibleType,\n} from \"../methods/index.js\";\nimport { Havoc, Join, Properties, To } from \"../singletons.js\";\nimport invariant from \"../invariant.js\";\nimport type { typeAnnotation } from \"babel-types\";\nimport * as t from \"babel-types\";\n\nfunction isWidenedValue(v: void | Value) {\n  if (!(v instanceof AbstractValue)) return false;\n  if (v.kind === \"widened\" || v.kind === \"widened property\") return true;\n  for (let a of v.args) {\n    if (isWidenedValue(a)) return true;\n  }\n  return false;\n}\n\nconst lengthTemplateSrc = \"(A).length\";\nconst lengthTemplate = buildExpressionTemplate(lengthTemplateSrc);\n\nexport default class ObjectValue extends ConcreteValue {\n  constructor(\n    realm: Realm,\n    proto?: ObjectValue | NullValue,\n    intrinsicName?: string,\n    refuseSerialization: boolean = false\n  ) {\n    super(realm, intrinsicName);\n    realm.recordNewObject(this);\n    if (realm.useAbstractInterpretation) this.setupBindings(this.getTrackedPropertyNames());\n    this.$Prototype = proto || realm.intrinsics.null;\n    this.$Extensible = realm.intrinsics.true;\n    this._isPartial = realm.intrinsics.false;\n    this._isHavoced = realm.intrinsics.false;\n    this._isSimple = realm.intrinsics.false;\n    this._simplicityIsTransitive = realm.intrinsics.false;\n    this._isFinal = realm.intrinsics.false;\n    this.properties = new Map();\n    this.symbols = new Map();\n    this.refuseSerialization = refuseSerialization;\n\n    // this.$IsClassPrototype should be the last thing that gets initialized,\n    // as other code checks whether this.$IsClassPrototype === undefined\n    // as a proxy for whether initialization is still ongoing.\n    this.$IsClassPrototype = false;\n  }\n\n  static trackedPropertyNames = [\n    \"_isPartial\",\n    \"_isHavoced\",\n    \"_isSimple\",\n    \"_isFinal\",\n    \"_simplicityIsTransitive\",\n    \"_temporalAlias\",\n    \"$ArrayIteratorNextIndex\",\n    \"$DateValue\",\n    \"$Extensible\",\n    \"$IteratedList\",\n    \"$IteratedObject\",\n    \"$IteratedSet\",\n    \"$IteratedString\",\n    \"$Map\",\n    \"$MapData\",\n    \"$MapNextIndex\",\n    \"$Prototype\",\n    \"$SetData\",\n    \"$SetNextIndex\",\n    \"$StringIteratorNextIndex\",\n    \"$WeakMapData\",\n    \"$WeakSetData\",\n  ];\n  static trackedPropertyBindingNames = new Map();\n\n  getTrackedPropertyNames(): Array<string> {\n    return ObjectValue.trackedPropertyNames;\n  }\n\n  setupBindings(propertyNames: Array<string>) {\n    for (let propName of propertyNames) {\n      let propBindingName = ObjectValue.trackedPropertyBindingNames.get(propName);\n      invariant(propBindingName !== undefined);\n      (this: any)[propBindingName] = undefined;\n    }\n  }\n\n  static setupTrackedPropertyAccessors(propertyNames: Array<string>) {\n    for (let propName of propertyNames) {\n      let propBindingName = ObjectValue.trackedPropertyBindingNames.get(propName);\n      if (propBindingName === undefined)\n        ObjectValue.trackedPropertyBindingNames.set(propName, (propBindingName = propName + \"_binding\"));\n      Object.defineProperty(ObjectValue.prototype, propName, {\n        configurable: true,\n        get: function() {\n          let binding = this[propBindingName];\n          return binding === undefined ? undefined : binding.descriptor.value;\n        },\n        set: function(v) {\n          // Let's make sure that the object is not havoced.\n          // To that end, we'd like to call this.isHavocedObject().\n          // However, while the object is still being initialized,\n          // properties may be set, but this.isHavocedObject() may not be called yet.\n          // To check if we are still initializing, guard the call by looking at\n          // whether this.$IsClassPrototype has been initialized as a proxy for\n          // object initialization in general.\n          invariant(\n            // We're still initializing so we can set a property.\n            this.$IsClassPrototype === undefined ||\n              // It's not havoced so we can set a property.\n              !this.isHavocedObject() ||\n              // Object.assign() implementation needs to temporarily\n              // make potentially havoced objects non-partial and back.\n              // We don't gain anything from checking whether it's havoced\n              // before calling makePartial() so we'll whitelist this property.\n              propBindingName === \"_isPartial_binding\",\n            \"cannot mutate a havoced object\"\n          );\n          let binding = this[propBindingName];\n          if (binding === undefined) {\n            let desc = { writeable: true, value: undefined };\n            this[propBindingName] = binding = {\n              descriptor: desc,\n              object: this,\n              key: propName,\n              internalSlot: true,\n            };\n          }\n          this.$Realm.recordModifiedProperty(binding);\n          binding.descriptor.value = v;\n        },\n      });\n    }\n  }\n\n  $Prototype: ObjectValue | AbstractObjectValue | NullValue;\n  $Extensible: BooleanValue | AbstractValue;\n\n  $ParameterMap: void | ObjectValue; // undefined when the property is \"missing\"\n  $SymbolData: void | SymbolValue | AbstractValue;\n  $StringData: void | StringValue | AbstractValue;\n  $NumberData: void | NumberValue | AbstractValue;\n  $BooleanData: void | BooleanValue | AbstractValue;\n\n  // error\n  $ErrorData: void | {\n    // undefined when the property is \"missing\"\n    contextStack: Array<ExecutionContext>,\n    locationData: void | {\n      filename: string,\n      sourceCode: string,\n      loc: { line: number, column: number },\n      stackDecorated: boolean,\n    },\n  };\n\n  // function\n  $Call: void | ((thisArgument: Value, argumentsList: Array<Value>) => Value);\n  $Construct: void | ((argumentsList: Array<Value>, newTarget: ObjectValue) => ObjectValue);\n\n  // promise\n  $PromiseState: void | \"pending\" | \"fulfilled\" | \"rejected\";\n  $PromiseResult: void | Value;\n  $PromiseFulfillReactions: void | Array<PromiseReaction>;\n  $PromiseRejectReactions: void | Array<PromiseReaction>;\n  $PromiseIsHandled: void | boolean;\n\n  // iterator\n  $IteratedList: void | Array<Value>;\n  $ListIteratorNextIndex: void | number;\n  $IteratorNext: void | NativeFunctionValue;\n\n  // set\n  $SetIterationKind: void | IterationKind;\n  $SetNextIndex: void | number;\n  $IteratedSet: void | ObjectValue | UndefinedValue;\n  $SetData: void | Array<void | Value>;\n\n  // react\n  $SuperTypeParameters: void | typeAnnotation;\n\n  // map\n  $MapIterationKind: void | IterationKind;\n  $MapNextIndex: void | NumberValue;\n  $MapData: void | Array<{ $Key: void | Value, $Value: void | Value }>;\n  $Map: void | ObjectValue | UndefinedValue;\n\n  // weak map\n  $WeakMapData: void | Array<{ $Key: void | Value, $Value: void | Value }>;\n\n  // weak set\n  $WeakSetData: void | Array<void | Value>;\n\n  // date\n  $DateValue: void | NumberValue | AbstractValue; // of type number\n\n  // array\n  $ArrayIterationKind: void | IterationKind;\n  $ArrayIteratorNextIndex: void | NumberValue;\n  $IteratedObject: void | UndefinedValue | ObjectValue;\n\n  // regex\n  $OriginalSource: void | string;\n  $OriginalFlags: void | string;\n  $RegExpMatcher: void | ((S: string, lastIndex: number) => ?{ endIndex: number, captures: Array<any> });\n\n  // string\n  $StringIteratorNextIndex: void | number;\n  $IteratedString: void | StringValue;\n\n  // data view\n  $DataView: void | true;\n  $ViewedArrayBuffer: void | ObjectValue;\n  $ByteLength: void | number;\n  $ByteOffset: void | number;\n\n  // array buffer\n  $ArrayBufferData: void | null | DataBlock;\n  $ArrayBufferByteLength: void | number;\n\n  // generator\n  $GeneratorState: void | \"suspendedStart\" | \"executing\";\n  $GeneratorContext: void | ExecutionContext;\n\n  // typed array\n  $TypedArrayName: void | TypedArrayKind;\n  $ViewedArrayBuffer: void | ObjectValue;\n  $ArrayLength: void | number;\n\n  // backpointer to the constructor if this object was created its prototype object\n  originalConstructor: void | ECMAScriptSourceFunctionValue;\n\n  // partial objects\n  _isPartial: AbstractValue | BooleanValue;\n\n  // tainted objects\n  _isHavoced: AbstractValue | BooleanValue;\n\n  // If true, the object has no property getters or setters and it is safe\n  // to return AbstractValue for unknown properties.\n  _isSimple: AbstractValue | BooleanValue;\n\n  // If true, it is not safe to perform any more mutations that would change\n  // the object's serialized form.\n  _isFinal: AbstractValue | BooleanValue;\n\n  // Specifies whether the object is a template that needs to be created in a scope\n  // If set, this happened during object initialization and the value is never changed again, so not tracked.\n  _isScopedTemplate: void | true;\n\n  // If true, then unknown properties should return transitively simple abstract object values\n  _simplicityIsTransitive: AbstractValue | BooleanValue;\n\n  // The abstract object for which this object is the template.\n  // Use this instead of the object itself when deriving temporal values for object properties.\n  _templateFor: void | AbstractObjectValue;\n\n  properties: Map<string, PropertyBinding>;\n  symbols: Map<SymbolValue, PropertyBinding>;\n  unknownProperty: void | PropertyBinding;\n  _temporalAlias: void | AbstractObjectValue;\n\n  // An object value with an intrinsic name can either exist from the beginning of time,\n  // or it can be associated with a particular point in time by being used as a template\n  // when deriving an abstract value via a generator.\n  intrinsicNameGenerated: void | true;\n  hashValue: void | number;\n\n  // ReactElement\n  $BailOutReason: void | string;\n\n  // ES2015 classes\n  $IsClassPrototype: boolean;\n\n  // We track some internal state as properties on the global object, these should\n  // never be serialized.\n  refuseSerialization: boolean;\n\n  equals(x: Value): boolean {\n    return this === x;\n  }\n\n  getHash(): number {\n    if (!this.hashValue) {\n      this.hashValue = ++this.$Realm.objectCount;\n    }\n    return this.hashValue;\n  }\n\n  get temporalAlias(): void | AbstractObjectValue {\n    return this._temporalAlias;\n  }\n\n  set temporalAlias(value: AbstractObjectValue) {\n    this._temporalAlias = value;\n  }\n\n  hasStringOrSymbolProperties(): boolean {\n    for (let prop of this.properties.values()) {\n      if (prop.descriptor === undefined) continue;\n      return true;\n    }\n    for (let prop of this.symbols.values()) {\n      if (prop.descriptor === undefined) continue;\n      return true;\n    }\n    return false;\n  }\n\n  mightBeFalse(): boolean {\n    return false;\n  }\n\n  mightNotBeObject(): boolean {\n    return false;\n  }\n\n  throwIfNotObject(): ObjectValue {\n    return this;\n  }\n\n  makeNotPartial(): void {\n    this._isPartial = this.$Realm.intrinsics.false;\n  }\n\n  makePartial(): void {\n    this._isPartial = this.$Realm.intrinsics.true;\n  }\n\n  makeSimple(option?: string | Value): void {\n    this._isSimple = this.$Realm.intrinsics.true;\n    this._simplicityIsTransitive = new BooleanValue(\n      this.$Realm,\n      option === \"transitive\" || (option instanceof StringValue && option.value === \"transitive\")\n    );\n  }\n\n  makeFinal(): void {\n    this._isFinal = this.$Realm.intrinsics.true;\n  }\n\n  isPartialObject(): boolean {\n    return this._isPartial.mightBeTrue();\n  }\n\n  isFinalObject(): boolean {\n    return this._isFinal.mightBeTrue();\n  }\n\n  havoc(): void {\n    this._isHavoced = this.$Realm.intrinsics.true;\n  }\n\n  isHavocedObject(): boolean {\n    return this._isHavoced.mightBeTrue();\n  }\n\n  isSimpleObject(): boolean {\n    if (!this._isSimple.mightNotBeTrue()) return true;\n    if (this.isPartialObject()) return false;\n    if (this.symbols.size > 0) return false;\n    for (let propertyBinding of this.properties.values()) {\n      let desc = propertyBinding.descriptor;\n      if (desc === undefined) continue; // deleted\n      if (!IsDataDescriptor(this.$Realm, desc)) return false;\n      if (!desc.writable) return false;\n    }\n    if (this.$Prototype instanceof NullValue) return true;\n    if (this.$Prototype === this.$Realm.intrinsics.ObjectPrototype) return true;\n    invariant(this.$Prototype);\n    return this.$Prototype.isSimpleObject();\n  }\n\n  isTransitivelySimple(): boolean {\n    return !this._simplicityIsTransitive.mightNotBeTrue();\n  }\n\n  getExtensible(): boolean {\n    return this.$Extensible.throwIfNotConcreteBoolean().value;\n  }\n\n  setExtensible(v: boolean) {\n    this.$Extensible = v ? this.$Realm.intrinsics.true : this.$Realm.intrinsics.false;\n  }\n\n  getKind(): ObjectKind {\n    // we can deduce the natural prototype by checking whether the following internal slots are present\n    if (this.$SymbolData !== undefined) return \"Symbol\";\n    if (this.$StringData !== undefined) return \"String\";\n    if (this.$NumberData !== undefined) return \"Number\";\n    if (this.$BooleanData !== undefined) return \"Boolean\";\n    if (this.$DateValue !== undefined) return \"Date\";\n    if (this.$RegExpMatcher !== undefined) return \"RegExp\";\n    if (this.$SetData !== undefined) return \"Set\";\n    if (this.$MapData !== undefined) return \"Map\";\n    if (this.$DataView !== undefined) return \"DataView\";\n    if (this.$ArrayBufferData !== undefined) return \"ArrayBuffer\";\n    if (this.$WeakMapData !== undefined) return \"WeakMap\";\n    if (this.$WeakSetData !== undefined) return \"WeakSet\";\n    if (isReactElement(this) && this.$Realm.react.enabled) return \"ReactElement\";\n    if (this.$TypedArrayName !== undefined) return this.$TypedArrayName;\n    // TODO #26 #712: Promises. All kinds of iterators. Generators.\n    return \"Object\";\n  }\n\n  defineNativeMethod(\n    name: SymbolValue | string,\n    length: number,\n    callback: NativeFunctionCallback,\n    desc?: Descriptor = {}\n  ): Value {\n    let intrinsicName;\n    if (typeof name === \"string\") {\n      if (this.intrinsicName) intrinsicName = `${this.intrinsicName}.${name}`;\n    } else if (name instanceof SymbolValue) {\n      if (this.intrinsicName && name.intrinsicName) intrinsicName = `${this.intrinsicName}[${name.intrinsicName}]`;\n    } else {\n      invariant(false);\n    }\n    let fnValue = new NativeFunctionValue(this.$Realm, intrinsicName, name, length, callback, false);\n    this.defineNativeProperty(name, fnValue, desc);\n    return fnValue;\n  }\n\n  defineNativeProperty(name: SymbolValue | string, value?: Value | Array<Value>, desc?: Descriptor = {}) {\n    invariant(!value || value instanceof Value);\n    this.$DefineOwnProperty(name, {\n      value,\n      writable: true,\n      enumerable: false,\n      configurable: true,\n      ...desc,\n    });\n  }\n\n  defineNativeGetter(name: SymbolValue | string, callback: NativeFunctionCallback, desc?: Descriptor = {}) {\n    let intrinsicName, funcName;\n    if (typeof name === \"string\") {\n      funcName = `get ${name}`;\n      if (this.intrinsicName) intrinsicName = `${this.intrinsicName}.${name}`;\n    } else if (name instanceof SymbolValue) {\n      funcName =\n        name.$Description instanceof Value\n          ? `get [${name.$Description.throwIfNotConcreteString().value}]`\n          : `get [${\"?\"}]`;\n      if (this.intrinsicName && name.intrinsicName) intrinsicName = `${this.intrinsicName}[${name.intrinsicName}]`;\n    } else {\n      invariant(false);\n    }\n\n    let func = new NativeFunctionValue(this.$Realm, intrinsicName, funcName, 0, callback);\n    this.$DefineOwnProperty(name, {\n      get: func,\n      set: this.$Realm.intrinsics.undefined,\n      enumerable: false,\n      configurable: true,\n      ...desc,\n    });\n  }\n\n  defineNativeConstant(name: SymbolValue | string, value?: Value | Array<Value>, desc?: Descriptor = {}) {\n    invariant(!value || value instanceof Value);\n    this.$DefineOwnProperty(name, {\n      value,\n      writable: false,\n      enumerable: false,\n      configurable: false,\n      ...desc,\n    });\n  }\n\n  getOwnPropertyKeysArray(): Array<string> {\n    if (this.isPartialObject() || this.isHavocedObject() || this.unknownProperty !== undefined) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n\n    let keyArray = Array.from(this.properties.keys());\n    keyArray = keyArray.filter(x => {\n      let pb = this.properties.get(x);\n      if (!pb || pb.descriptor === undefined) return false;\n      let pv = pb.descriptor.value;\n      if (pv === undefined) return true;\n      invariant(pv instanceof Value);\n      if (!pv.mightHaveBeenDeleted()) return true;\n      // The property may or may not be there at runtime.\n      // We can at best return an abstract keys array.\n      // For now just terminate.\n      invariant(pv instanceof AbstractValue);\n      AbstractValue.reportIntrospectionError(pv);\n      throw new FatalError();\n    });\n    this.$Realm.callReportObjectGetOwnProperties(this);\n    return keyArray;\n  }\n\n  // Note that internal properties will not be copied to the snapshot, nor will they be removed.\n  getSnapshot(options?: { removeProperties: boolean }): AbstractObjectValue {\n    try {\n      if (this.temporalAlias !== undefined) return this.temporalAlias;\n      invariant(!this.isPartialObject());\n      let template = new ObjectValue(this.$Realm, this.$Realm.intrinsics.ObjectPrototype);\n      this.copyKeys(this.$OwnPropertyKeys(), this, template);\n      let result = AbstractValue.createTemporalFromBuildFunction(this.$Realm, ObjectValue, [template], ([x]) => x, {\n        skipInvariant: true,\n      });\n      invariant(result instanceof AbstractObjectValue);\n      result.values = new ValuesDomain(template);\n      return result;\n    } finally {\n      if (options && options.removeProperties) {\n        this.properties = new Map();\n        this.symbols = new Map();\n        this.unknownProperty = undefined;\n      }\n    }\n  }\n\n  copyKeys(keys: Array<PropertyKeyValue>, from: ObjectValue, to: ObjectValue) {\n    // c. Repeat for each element nextKey of keys in List order,\n    for (let nextKey of keys) {\n      // i. Let desc be ? from.[[GetOwnProperty]](nextKey).\n      let desc = from.$GetOwnProperty(nextKey);\n\n      // ii. If desc is not undefined and desc.[[Enumerable]] is true, then\n      if (desc && desc.enumerable) {\n        Properties.ThrowIfMightHaveBeenDeleted(desc.value);\n\n        // 1. Let propValue be ? Get(from, nextKey).\n        let propValue = Get(this.$Realm, from, nextKey);\n\n        // 2. Perform ? Set(to, nextKey, propValue, true).\n        Properties.Set(this.$Realm, to, nextKey, propValue, true);\n      }\n    }\n  }\n\n  _serialize(set: Function, stack: Map<Value, any>): any {\n    let obj = set({});\n\n    for (let [key, propertyBinding] of this.properties) {\n      let desc = propertyBinding.descriptor;\n      if (desc === undefined) continue; // deleted\n      Properties.ThrowIfMightHaveBeenDeleted(desc.value);\n      let serializedDesc: any = { enumerable: desc.enumerable, configurable: desc.configurable };\n      if (desc.value) {\n        serializedDesc.writable = desc.writable;\n        invariant(desc.value instanceof Value);\n        serializedDesc.value = desc.value.serialize(stack);\n      } else {\n        invariant(desc.get !== undefined);\n        serializedDesc.get = desc.get.serialize(stack);\n        invariant(desc.set !== undefined);\n        serializedDesc.set = desc.set.serialize(stack);\n      }\n      Object.defineProperty(obj, key, serializedDesc);\n    }\n    return obj;\n  }\n\n  // Whether [[{Get,Set}PrototypeOf]] delegate to Ordinary{Get,Set}PrototypeOf.\n  // E.g. ProxyValue overrides this to return false.\n  // See ECMA262 9.1.2.1 for an algorithm where this is relevant\n  usesOrdinaryObjectInternalPrototypeMethods(): boolean {\n    return true;\n  }\n\n  // ECMA262 9.1.1\n  $GetPrototypeOf(): ObjectValue | AbstractObjectValue | NullValue {\n    return this.$Prototype;\n  }\n\n  // ECMA262 9.1.2\n  $SetPrototypeOf(V: ObjectValue | NullValue): boolean {\n    // 1. Return ! OrdinarySetPrototypeOf(O, V).\n    return Properties.OrdinarySetPrototypeOf(this.$Realm, this, V);\n  }\n\n  // ECMA262 9.1.3\n  $IsExtensible(): boolean {\n    // 1. Return ! OrdinaryIsExtensible(O).\n    return OrdinaryIsExtensible(this.$Realm, this);\n  }\n\n  // ECMA262 9.1.4\n  $PreventExtensions(): boolean {\n    // 1. Return ! OrdinaryPreventExtensions(O).\n    return OrdinaryPreventExtensions(this.$Realm, this);\n  }\n\n  // ECMA262 9.1.5\n  $GetOwnProperty(P: PropertyKeyValue): Descriptor | void {\n    // 1. Return ! OrdinaryGetOwnProperty(O, P).\n    return Properties.OrdinaryGetOwnProperty(this.$Realm, this, P);\n  }\n\n  // ECMA262 9.1.6\n  $DefineOwnProperty(P: PropertyKeyValue, Desc: Descriptor): boolean {\n    // 1. Return ? OrdinaryDefineOwnProperty(O, P, Desc).\n    return Properties.OrdinaryDefineOwnProperty(this.$Realm, this, P, Desc);\n  }\n\n  // ECMA262 9.1.7\n  $HasProperty(P: PropertyKeyValue): boolean {\n    if (this.unknownProperty !== undefined && this.$GetOwnProperty(P) === undefined) {\n      AbstractValue.reportIntrospectionError(this, P);\n      throw new FatalError();\n    }\n\n    return OrdinaryHasProperty(this.$Realm, this, P);\n  }\n\n  // ECMA262 9.1.8\n  $Get(P: PropertyKeyValue, Receiver: Value): Value {\n    let prop = this.unknownProperty;\n    if (prop !== undefined && prop.descriptor !== undefined && this.$GetOwnProperty(P) === undefined) {\n      let desc = prop.descriptor;\n      invariant(desc !== undefined);\n      let val = desc.value;\n      invariant(val instanceof AbstractValue);\n      let propValue;\n      if (P instanceof StringValue) {\n        propValue = P;\n      } else if (typeof P === \"string\") {\n        propValue = new StringValue(this.$Realm, P);\n      }\n\n      if (val.kind === \"widened numeric property\") {\n        invariant(Receiver instanceof ArrayValue && ArrayValue.isIntrinsicAndHasWidenedNumericProperty(Receiver));\n        let propName;\n        if (P instanceof StringValue) {\n          propName = P.value;\n        } else {\n          propName = P;\n        }\n        return GetFromArrayWithWidenedNumericProperty(this.$Realm, Receiver, propName);\n      } else if (!propValue) {\n        AbstractValue.reportIntrospectionError(val, \"abstract computed property name\");\n        throw new FatalError();\n      }\n      return this.specializeJoin(val, propValue);\n    }\n\n    // 1. Return ? OrdinaryGet(O, P, Receiver).\n    return OrdinaryGet(this.$Realm, this, P, Receiver);\n  }\n\n  _SafeGetDataPropertyValue(P: PropertyKeyValue): Value {\n    let savedInvariantLevel = this.$Realm.invariantLevel;\n    try {\n      this.$Realm.invariantLevel = 0;\n      let desc = this.$GetOwnProperty(P);\n      return desc !== undefined && desc.value instanceof Value ? desc.value : this.$Realm.intrinsics.undefined;\n    } finally {\n      this.$Realm.invariantLevel = savedInvariantLevel;\n    }\n  }\n\n  $GetPartial(P: AbstractValue | PropertyKeyValue, Receiver: Value): Value {\n    if (Receiver instanceof AbstractValue && Receiver.getType() === StringValue && P === \"length\") {\n      return AbstractValue.createFromTemplate(this.$Realm, lengthTemplate, NumberValue, [Receiver], lengthTemplateSrc);\n    }\n\n    if (!(P instanceof AbstractValue)) return this.$Get(P, Receiver);\n\n    // A string coercion might have side-effects.\n    // TODO #1682: We assume that simple objects mean that they don't have a\n    // side-effectful valueOf and toString but that's not enforced.\n    if (P.mightNotBeString() && P.mightNotBeNumber() && !P.isSimpleObject()) {\n      if (this.$Realm.isInPureScope()) {\n        // If we're in pure scope, we can havoc the key and keep going.\n        // Coercion can only have effects on anything reachable from the key.\n        Havoc.value(this.$Realm, P);\n      } else {\n        let error = new CompilerDiagnostic(\n          \"property key might not have a well behaved toString or be a symbol\",\n          this.$Realm.currentLocation,\n          \"PP0002\",\n          \"RecoverableError\"\n        );\n        if (this.$Realm.handleError(error) !== \"Recover\") {\n          throw new FatalError();\n        }\n      }\n    }\n\n    // We assume that simple objects have no getter/setter properties.\n    if (!this.isSimpleObject()) {\n      if (this.$Realm.isInPureScope()) {\n        // If we're in pure scope, we can havoc the object. Coercion\n        // can only have effects on anything reachable from this object.\n        // We assume that if the receiver is different than this object,\n        // then we only got here because there were no other keys with\n        // this name on other parts of the prototype chain.\n        // TODO #1675: A fix to 1675 needs to take this into account.\n        Havoc.value(this.$Realm, Receiver);\n        return AbstractValue.createTemporalFromBuildFunction(this.$Realm, Value, [Receiver, P], ([o, p]) =>\n          t.memberExpression(o, p, true)\n        );\n      } else {\n        let error = new CompilerDiagnostic(\n          \"unknown property access might need to invoke a getter\",\n          this.$Realm.currentLocation,\n          \"PP0030\",\n          \"RecoverableError\"\n        );\n        if (this.$Realm.handleError(error) !== \"Recover\") {\n          throw new FatalError();\n        }\n      }\n    }\n\n    P = To.ToStringAbstract(this.$Realm, P);\n\n    // If all else fails, use this expression\n    // TODO #1675: Check the prototype chain for known properties too.\n    let result;\n    if (this.isPartialObject()) {\n      if (isWidenedValue(P)) {\n        // TODO #1678: Use a snapshot or havoc this object.\n        return AbstractValue.createTemporalFromBuildFunction(this.$Realm, Value, [this, P], ([o, p]) =>\n          t.memberExpression(o, p, true)\n        );\n      }\n      result = AbstractValue.createFromType(this.$Realm, Value, \"sentinel member expression\", [this, P]);\n    } else {\n      result = AbstractValue.createTemporalFromBuildFunction(this.$Realm, Value, [this, P], ([o, p]) =>\n        t.memberExpression(o, p, true)\n      );\n    }\n\n    // Get a specialization of the join of all values written to the object\n    // with abstract property names.\n    let prop = this.unknownProperty;\n    if (prop !== undefined) {\n      let desc = prop.descriptor;\n      if (desc !== undefined) {\n        let val = desc.value;\n        invariant(val instanceof AbstractValue);\n        result = this.specializeJoin(val, P);\n      }\n    }\n    // Join in all of the other values that were written to the object with\n    // concrete property names.\n    for (let [key, propertyBinding] of this.properties) {\n      let desc = propertyBinding.descriptor;\n      if (desc === undefined) continue; // deleted\n      invariant(desc.value !== undefined); // otherwise this is not simple\n      let val = desc.value;\n      invariant(val instanceof Value);\n      let cond = AbstractValue.createFromBinaryOp(\n        this.$Realm,\n        \"===\",\n        P,\n        new StringValue(this.$Realm, key),\n        undefined,\n        \"check for known property\"\n      );\n      result = Join.joinValuesAsConditional(this.$Realm, cond, val, result);\n    }\n    return result;\n  }\n\n  specializeJoin(absVal: AbstractValue, propName: Value): Value {\n    if (absVal.kind === \"widened property\") {\n      let ob = absVal.args[0];\n      if (propName instanceof StringValue) {\n        let pName = propName.value;\n        let pNumber = +pName;\n        if (pName === pNumber + \"\") propName = new NumberValue(this.$Realm, pNumber);\n      }\n      return AbstractValue.createTemporalFromBuildFunction(this.$Realm, absVal.getType(), [ob, propName], ([o, p]) => {\n        return t.memberExpression(o, p, true);\n      });\n    }\n    invariant(absVal.args.length === 3 && absVal.kind === \"conditional\");\n    let generic_cond = absVal.args[0];\n    invariant(generic_cond instanceof AbstractValue);\n    let cond = this.specializeCond(generic_cond, propName);\n    let arg1 = absVal.args[1];\n    if (arg1 instanceof AbstractValue && arg1.args.length === 3) arg1 = this.specializeJoin(arg1, propName);\n    let arg2 = absVal.args[2];\n    if (arg2 instanceof AbstractValue) {\n      if (arg2.kind === \"template for prototype member expression\") {\n        let ob = arg2.args[0];\n        arg2 = AbstractValue.createTemporalFromBuildFunction(this.$Realm, absVal.getType(), [ob, propName], ([o, p]) =>\n          t.memberExpression(o, p, true)\n        );\n      } else if (arg2.args.length === 3) {\n        arg2 = this.specializeJoin(arg2, propName);\n      }\n    }\n    return AbstractValue.createFromConditionalOp(this.$Realm, cond, arg1, arg2, absVal.expressionLocation);\n  }\n\n  specializeCond(absVal: AbstractValue, propName: Value): Value {\n    if (absVal.kind === \"template for property name condition\")\n      return AbstractValue.createFromBinaryOp(this.$Realm, \"===\", absVal.args[0], propName);\n    return absVal;\n  }\n\n  // ECMA262 9.1.9\n  $Set(P: PropertyKeyValue, V: Value, Receiver: Value): boolean {\n    // 1. Return ? OrdinarySet(O, P, V, Receiver).\n    return Properties.OrdinarySet(this.$Realm, this, P, V, Receiver);\n  }\n\n  $SetPartial(P: AbstractValue | PropertyKeyValue, V: Value, Receiver: Value): boolean {\n    if (!(P instanceof AbstractValue)) return this.$Set(P, V, Receiver);\n    let pIsLoopVar = isWidenedValue(P);\n    let pIsNumeric = Value.isTypeCompatibleWith(P.getType(), NumberValue);\n\n    // A string coercion might have side-effects.\n    // TODO #1682: We assume that simple objects mean that they don't have a\n    // side-effectful valueOf and toString but that's not enforced.\n    if (P.mightNotBeString() && P.mightNotBeNumber() && !P.isSimpleObject()) {\n      if (this.$Realm.isInPureScope()) {\n        // If we're in pure scope, we can havoc the key and keep going.\n        // Coercion can only have effects on anything reachable from the key.\n        Havoc.value(this.$Realm, P);\n      } else {\n        let error = new CompilerDiagnostic(\n          \"property key might not have a well behaved toString or be a symbol\",\n          this.$Realm.currentLocation,\n          \"PP0002\",\n          \"RecoverableError\"\n        );\n        if (this.$Realm.handleError(error) !== \"Recover\") {\n          throw new FatalError();\n        }\n      }\n    }\n\n    // We assume that simple objects have no getter/setter properties and\n    // that all properties are writable.\n    if (!this.isSimpleObject()) {\n      if (this.$Realm.isInPureScope()) {\n        // If we're in pure scope, we can havoc the object and leave an\n        // assignment in place.\n        Havoc.value(this.$Realm, Receiver);\n        // We also need to havoc the value since it might leak to a setter.\n        Havoc.value(this.$Realm, V);\n        this.$Realm.evaluateWithPossibleThrowCompletion(\n          () => {\n            let generator = this.$Realm.generator;\n            invariant(generator);\n            invariant(P instanceof AbstractValue);\n            generator.emitStatement([Receiver, P, V], ([objectNode, keyNode, valueNode]) =>\n              t.expressionStatement(\n                t.assignmentExpression(\"=\", t.memberExpression(objectNode, keyNode, true), valueNode)\n              )\n            );\n            return this.$Realm.intrinsics.undefined;\n          },\n          TypesDomain.topVal,\n          ValuesDomain.topVal\n        );\n        // The emitted assignment might throw at runtime but if it does, that\n        // is handled by evaluateWithPossibleThrowCompletion. Anything that\n        // happens after this, can assume we didn't throw and therefore,\n        // we return true here.\n        return true;\n      } else {\n        let error = new CompilerDiagnostic(\n          \"unknown property access might need to invoke a setter\",\n          this.$Realm.currentLocation,\n          \"PP0030\",\n          \"RecoverableError\"\n        );\n        if (this.$Realm.handleError(error) !== \"Recover\") {\n          throw new FatalError();\n        }\n      }\n    }\n\n    // We should never consult the prototype chain for unknown properties.\n    // If it was simple, it would've been an assignment to the receiver.\n    // The only case the Receiver isn't this, if this was a ToObject\n    // coercion from a PrimitiveValue.\n    invariant(this === Receiver || HasCompatibleType(Receiver, PrimitiveValue));\n\n    P = To.ToStringAbstract(this.$Realm, P);\n\n    function createTemplate(realm: Realm, propName: AbstractValue) {\n      return AbstractValue.createFromBinaryOp(\n        realm,\n        \"===\",\n        propName,\n        new StringValue(realm, \"\"),\n        undefined,\n        \"template for property name condition\"\n      );\n    }\n\n    let prop;\n    if (this.unknownProperty === undefined) {\n      prop = {\n        descriptor: undefined,\n        object: this,\n        key: P,\n      };\n      this.unknownProperty = prop;\n    } else {\n      prop = this.unknownProperty;\n    }\n    this.$Realm.recordModifiedProperty(prop);\n    let desc = prop.descriptor;\n    if (desc === undefined) {\n      let newVal = V;\n      if (!(V instanceof UndefinedValue) && !isWidenedValue(P)) {\n        // join V with sentinel, using a property name test as the condition\n        let cond = createTemplate(this.$Realm, P);\n        let sentinel = AbstractValue.createFromType(this.$Realm, Value, \"template for prototype member expression\", [\n          Receiver,\n          P,\n        ]);\n        newVal = Join.joinValuesAsConditional(this.$Realm, cond, V, sentinel);\n      }\n      prop.descriptor = {\n        writable: true,\n        enumerable: true,\n        configurable: true,\n        value: newVal,\n      };\n    } else {\n      // join V with current value of this.unknownProperty. I.e. weak update.\n      let oldVal = desc.value;\n      invariant(oldVal instanceof Value);\n      let newVal = oldVal;\n      if (!(V instanceof UndefinedValue)) {\n        if (isWidenedValue(P)) {\n          newVal = V; // It will be widened later on\n        } else {\n          let cond = createTemplate(this.$Realm, P);\n          newVal = Join.joinValuesAsConditional(this.$Realm, cond, V, oldVal);\n        }\n      }\n      desc.value = newVal;\n    }\n\n    // Since we don't know the name of the property we are writing to, we also need\n    // to perform weak updates of all of the known properties.\n    // First clear out this.unknownProperty so that helper routines know its OK to update the properties\n    let savedUnknownProperty = this.unknownProperty;\n    this.unknownProperty = undefined;\n    for (let [key, propertyBinding] of this.properties) {\n      if (pIsLoopVar && pIsNumeric) {\n        // Delete numeric properties and don't do weak updates on other properties.\n        if (key !== +key + \"\") continue;\n        this.properties.delete(key);\n        continue;\n      }\n      let oldVal = this.$Realm.intrinsics.empty;\n      if (propertyBinding.descriptor && propertyBinding.descriptor.value) {\n        oldVal = propertyBinding.descriptor.value;\n        invariant(oldVal instanceof Value); // otherwise this is not simple\n      }\n      let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", P, new StringValue(this.$Realm, key));\n      let newVal = Join.joinValuesAsConditional(this.$Realm, cond, V, oldVal);\n      Properties.OrdinarySet(this.$Realm, this, key, newVal, Receiver);\n    }\n    this.unknownProperty = savedUnknownProperty;\n\n    return true;\n  }\n\n  // ECMA262 9.1.10\n  $Delete(P: PropertyKeyValue): boolean {\n    if (this.unknownProperty !== undefined) {\n      // TODO #946: generate a delete from the object\n      AbstractValue.reportIntrospectionError(this, P);\n      throw new FatalError();\n    }\n\n    // 1. Return ? OrdinaryDelete(O, P).\n    return Properties.OrdinaryDelete(this.$Realm, this, P);\n  }\n\n  // ECMA262 9.1.11\n  $OwnPropertyKeys(): Array<PropertyKeyValue> {\n    return OrdinaryOwnPropertyKeys(this.$Realm, this);\n  }\n}\n"]}