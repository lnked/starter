{"version":3,"sources":["../../src/values/SymbolValue.js"],"names":["SymbolValue","constructor","realm","desc","intrinsicName","$Description","equals","x","getHash","hashValue","$Realm","symbolCount","mightBeFalse","throwIfNotConcreteSymbol","_serialize","Symbol","toDisplayString"],"mappings":";;;;;;AAWA;;AAGe,MAAMA,WAAN,+BAAyC;AACtDC,cAAYC,KAAZ,EAA0BC,IAA1B,EAA8CC,aAA9C,EAAsE;AACpE,UAAMF,KAAN,EAAaE,aAAb;AACA,SAAKC,YAAL,GAAoBF,IAApB;AACD;;AAMDG,SAAOC,CAAP,EAA0B;AACxB,WAAO,SAASA,CAAhB;AACD;;AAEDC,YAAkB;AAChB,QAAI,CAAC,KAAKC,SAAV,EAAqB;AACnB,WAAKA,SAAL,GAAiB,EAAE,KAAKC,MAAL,CAAYC,WAA/B;AACD;AACD,WAAO,KAAKF,SAAZ;AACD;;AAEDG,iBAAwB;AACtB,WAAO,KAAP;AACD;;AAEDC,6BAAwC;AACtC,WAAO,IAAP;AACD;;AAEDC,eAAqB;AACnB,WAAOC,OAAO,KAAKV,YAAZ,CAAP;AACD;;AAEDW,oBAA0B;AACxB,QAAI,KAAKX,YAAT,EAAuB;AACrB,UAAI,KAAKA,YAAL,iCAAJ,EAAiD;AAC/C,eAAQ,UAAS,KAAKA,YAAL,CAAkBW,eAAlB,EAAoC,GAArD;AACD;AACF;AACD,WAAO,yBAAP;AACD;AAxCqD;kBAAnChB,W,EAdrB","file":"SymbolValue.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { PrimitiveValue, Value } from \"./index.js\";\nimport type { Realm } from \"../realm.js\";\n\nexport default class SymbolValue extends PrimitiveValue {\n  constructor(realm: Realm, desc: void | Value, intrinsicName?: string) {\n    super(realm, intrinsicName);\n    this.$Description = desc;\n  }\n\n  $Description: void | Value;\n\n  hashValue: void | number;\n\n  equals(x: Value): boolean {\n    return this === x;\n  }\n\n  getHash(): number {\n    if (!this.hashValue) {\n      this.hashValue = ++this.$Realm.symbolCount;\n    }\n    return this.hashValue;\n  }\n\n  mightBeFalse(): boolean {\n    return false;\n  }\n\n  throwIfNotConcreteSymbol(): SymbolValue {\n    return this;\n  }\n\n  _serialize(): Symbol {\n    return Symbol(this.$Description);\n  }\n\n  toDisplayString(): string {\n    if (this.$Description) {\n      if (this.$Description instanceof PrimitiveValue) {\n        return `Symbol(${this.$Description.toDisplayString()})`;\n      }\n    }\n    return \"Symbol(to be supported)\";\n  }\n}\n"]}