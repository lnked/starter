{"version":3,"sources":["../src/realm.js"],"names":["construct_empty_effects","t","effects_uid","Effects","constructor","result","generator","bindings","propertyBindings","createdObjects","modifiedBindings","modifiedProperties","canBeApplied","_id","Tracer","beginEvaluateForEffects","state","endEvaluateForEffects","effects","detourCall","F","thisArgument","argumentsList","newTarget","performCall","beforeCall","afterCall","ExecutionContext","setCaller","context","caller","setFunction","isStrict","$Strict","function","setLocation","loc","setRealm","realm","setReadOnly","value","oldReadOnly","isReadOnly","variableEnvironment","environmentRecord","lexicalEnvironment","suspend","resume","intrinsics","undefined","empty","Map","Set","Realm","opts","statistics","contextStack","MOBILE_JSC_VERSION","suppressDiagnostics","objectCount","symbolCount","functionBodyUniqueTagSeed","nextGeneratorId","useAbstractInterpretation","serialize","residual","check","ignoreLeakLogic","isInPureTryStatement","mathRandomSeed","mathRandomGenerator","strictlyMonotonicDateNow","abstractValueImpliesMax","abstractValueImpliesCounter","inSimplificationPath","timeout","timeoutCounter","timeoutCounterThreshold","start","Date","now","compatibility","maxStackDepth","invariantLevel","invariantMode","emitConcreteModel","$TemplateMap","preludeGenerator","debugNames","uniqueSuffix","pathConditions","setupTrackedPropertyAccessors","trackedPropertyNames","tracers","$GlobalObject","evaluators","Object","create","partialEvaluators","$GlobalEnv","react","abstractHints","WeakMap","optimizedNestedClosuresToWrite","arrayHints","classComponentMetadata","currentOwner","enabled","reactEnabled","hoistableFunctions","hoistableReactElements","noopFunction","output","reactOutput","reactElements","WeakSet","symbols","verbose","reactVerbose","alreadyDescribedLocations","stripFlow","fbLibraries","other","reactDom","reactDomServer","reactRelay","errorHandler","globalSymbolRegistry","activeLexicalEnvironments","_abstractValuesDefined","_checkedObjectIds","isCompatibleWith","getGlobalLetBinding","key","globrec","dclrec","$DeclarativeRecord","HasBinding","GetBindingValue","e","readOnlyValue","forEach","ctx","testTimeout","total","error","currentLocation","handleError","hasRunningContext","length","getRunningContext","clearBlockBindings","b","keys","name","delete","clearBlockBindingsFromCompletion","completion","alternateEffects","consequentEffects","savedEffects","alternate","consequent","onDestroyScope","has","savedCompletion","destroy","pushContext","push","clearFunctionBindings","funcVal","environment","$FunctionObject","clearFunctionBindingsFromCompletion","popContext","c","pop","wrapInGlobalEnv","callback","assignToGlobal","deleteGlobalBinding","DeleteBinding","neverCheckProperty","object","P","startsWith","intrinsicName","_getCheckedBindings","globalObject","binding","properties","get","checkedBindingsObject","descriptor","markPropertyAsChecked","objectId","set","size","id","checkedBindings","$Set","true","hasBindingBeenChecked","mightNotBeTrue","evaluatePure","f","reportSideEffectFunc","saved_createdObjectsTrackedForLeaks","createdObjectsTrackedForLeaks","saved_reportSideEffectCallback","reportSideEffectCallback","isInPureScope","evaluateWithoutLeakLogic","evaluateWithPossibleThrowCompletion","thrownTypes","thrownValues","diag","evaluateNodeForEffects","ast","strictCode","env","generatorName","evaluateForEffects","evaluateCompletionDeref","evaluateForEffectsInGlobalEnv","func","withEffectsAppliedInGlobalEnv","applyEffects","restoreBindings","restoreProperties","evaluateNodeForEffectsInGlobalEnv","node","partiallyEvaluateNodeForEffects","nodeAst","nodeIO","partialEval","partiallyEvaluateCompletionDeref","savedBindings","savedProperties","getAndResetModifiedMaps","saved_generator","saved_createdObjects","saved_completion","t1","GetValue","incorporateSavedCompletion","subsequentEffects","getCapturedEffects","stopEffectCaptureAndUndoEffects","updatePossiblyNormalCompletionWithSubsequentEffects","astGenerator","astBindings","astProperties","astCreatedObjects","t2","evaluateWithUndo","defaultValue","oldErrorHandler","d","severity","evaluateWithUndoForDiagnostic","savedHandler","diagnostic","resultVal","composeWithSavedCompletion","evaluateForFixpointEffects","iteration","test","effects1","effects2","containsEffects","e2","_applyPropertiesToNewlyCreatedObjects","_emitPropertAssignments","_emitLocalAssignments","cond","deriveAbstract","types","values","n","skipInvariant","widenEffects","evaluateWithAbstractConditional","condValue","consequentEffectsFunc","alternateEffectsFunc","withCondition","withInverseCondition","joinedEffects","joinEffects","newlyCreatedObjects","desc","propertyBinding","m","gen","tvalFor","map","val","_buildNode","tval","phiNode","emitStatement","v","buildNode","expressionStatement","assignmentExpression","pbindings","isSelfReferential","pathNode","args","refuseSerialization","o","mightHaveBeenDeleted","inTest","binaryExpression","stringLiteral","addEmpty","conditionalExpression","logicalExpression","path","mightBeUndefined","keyKey","lh","identifier","r","emptyTest","undefinedTest","unaryExpression","guard","deleteIt","ifStatement","p","composeEffects","priorEffects","composeGenerators","ob","a","add","updateAbruptCompletions","wrapSavedCompletion","captureEffects","savedPathConditions","concat","composePossiblyNormalCompletions","pushPathConditionsLeadingToNormalCompletion","pushInverseAndRefine","joinCondition","pushAndRefine","incorporatePriorSavedCompletion","priorCompletion","stopEffectCapture","leadingComment","appendGenerator","realmModifiedBindings","realmModifiedProperties","realmCreatedObjects","outputToConsole","method","emitConsoleLog","console","getString","res","next","shift","nextString","ToString","recordModifiedBinding","isDefinedInsidePureFn","root","parent","expressionLocation","hasLeaked","callReportObjectGetOwnProperties","reportObjectGetOwnProperties","callReportPropertyAccess","reportPropertyAccess","recordModifiedProperty","isNewObject","recordNewObject","l","setModifiedMaps","rebuildObjectProperty","propertyValue","kind","absVal","find","isIntrinsic","memberExpression","rebuildNestedProperties","abstractValue","isTop","template","getTemplate","intrinsicNameGenerated","ThrowIfMightHaveBeenDeleted","reportIntrospectionError","createExecutionContext","nextContextLocation","setNextExecutionContextLocation","message","createErrorThrowCompletion","type","__IntrospectionError","realmGenerator","evaluateForEffectsWithPriorEffects","priorEffect","callStack","Error","stack","_SafeGetDataPropertyValue","msg","errorCode","location","loc_start","loc_end","end","line","column","log","warn","saveNameString","nameString","isNameStringUnique"],"mappings":";;;;;;QA0LgBA,uB,GAAAA,uB;;AAtKhB;;AACA;;AAOA;;AAiBA;;AAQA;;AACA;;AAQA;;;;AACA;;;;AACA;;AACA;;AACA;;AAGA;;IAAYC,C;;;;;;AAWZ,IAAIC,cAAc,CAAlB,C,CAhFA;;;;;;;;;AAkFO,MAAMC,OAAN,CAAc;AACnBC,cACEC,MADF,EAEEC,SAFF,EAGEC,QAHF,EAIEC,gBAJF,EAKEC,cALF,EAME;AACA,SAAKJ,MAAL,GAAcA,MAAd;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKI,gBAAL,GAAwBH,QAAxB;AACA,SAAKI,kBAAL,GAA0BH,gBAA1B;AACA,SAAKC,cAAL,GAAsBA,cAAtB;;AAEA,SAAKG,YAAL,GAAoB,IAApB;AACA,SAAKC,GAAL,GAAWX,aAAX;AACD;;AAhBkB;;QAARC,O,GAAAA,O;AA2BN,MAAMW,MAAN,CAAa;AAClBC,0BAAwBC,KAAxB,EAAoC,CAAE;AACtCC,wBAAsBD,KAAtB,EAAkCE,OAAlC,EAA2D,CAAE;AAC7DC,aACEC,CADF,EAEEC,YAFF,EAGEC,aAHF,EAIEC,SAJF,EAKEC,WALF,EAMgB,CAAE;AAClBC,aACEL,CADF,EAEEC,YAFF,EAGEC,aAHF,EAIEC,SAJF,EAKE,CAAE;AACJG,YACEN,CADF,EAEEC,YAFF,EAGEC,aAHF,EAIEC,SAJF,EAKElB,MALF,EAME,CAAE;AAtBc;;QAAPS,M,GAAAA,M;AAyBN,MAAMa,gBAAN,CAAuB;;AAW5BC,YAAUC,OAAV,EAA2C;AACzC,SAAKC,MAAL,GAAcD,OAAd;AACD;;AAEDE,cAAYX,CAAZ,EAAqC;AACnC,QAAIA,iDAAJ,EAAgD,KAAKY,QAAL,GAAgBZ,EAAEa,OAAlB;AAChD,SAAKC,QAAL,GAAgBd,CAAhB;AACD;;AAEDe,cAAYC,GAAZ,EAAiD;AAC/C,QAAI,CAACA,GAAL,EAAU;AACV,SAAKA,GAAL,GAAWA,GAAX;AACD;;AAEDC,WAASC,KAAT,EAA6B;AAC3B,SAAKA,KAAL,GAAaA,KAAb;AACD;;AAED;;;;;AAKAC,cAAYC,KAAZ,EAAqC;AACnC,QAAIC,cAAc,KAAKC,UAAvB;AACA,QAAI,KAAKC,mBAAT,EAA8B,KAAKA,mBAAL,CAAyBC,iBAAzB,CAA2CF,UAA3C,GAAwDF,KAAxD;AAC9B,QAAI,KAAKK,kBAAT,EAA6B,KAAKA,kBAAL,CAAwBD,iBAAxB,CAA0CF,UAA1C,GAAuDF,KAAvD;AAC7B,SAAKE,UAAL,GAAkBF,KAAlB;AACA,WAAOC,WAAP;AACD;;AAEDK,YAAgB;AACd;AACD;;AAEDC,WAAgB;AACd;AACA,WAAO,KAAKT,KAAL,CAAWU,UAAX,CAAsBC,SAA7B;AACD;AAjD2B;;QAAjBtB,gB,GAAAA,gB;AAoDN,SAAS3B,uBAAT,CAAiCsC,KAAjC,EAAwD;AAC7D,SAAO,IAAInC,OAAJ,CACLmC,MAAMU,UAAN,CAAiBE,KADZ,EAEL,yBAAcZ,KAAd,EAAqB,yBAArB,CAFK,EAGL,IAAIa,GAAJ,EAHK,EAIL,IAAIA,GAAJ,EAJK,EAKL,IAAIC,GAAJ,EALK,CAAP;AAOD;;AAEM,MAAMC,KAAN,CAAY;AACjBjD,cAAYkD,IAAZ,EAAgCC,UAAhC,EAA6D;AAAA,SA4H7DC,YA5H6D,GA4HrB,EA5HqB;AAAA,SAkM7DC,kBAlM6D,GAkMxC,gBAlMwC;AAAA,SAqM7DC,mBArM6D,GAqMvC,KArMuC;AAAA,SAsM7DC,WAtM6D,GAsM/C,CAtM+C;AAAA,SAuM7DC,WAvM6D,GAuM/C,eAvM+C;AAAA,SA2M7DC,yBA3M6D,GA2MjC,CA3MiC;AAAA,SAiN7DC,eAjN6D,GAiNnC,CAjNmC;;AAC3D,SAAKP,UAAL,GAAkBA,UAAlB;AACA,SAAKb,UAAL,GAAkB,KAAlB;AACA,SAAKqB,yBAAL,GAAiC,CAAC,CAACT,KAAKU,SAAP,IAAoB,CAAC,CAACV,KAAKW,QAA3B,IAAuC,CAAC,CAACX,KAAKY,KAA/E;AACA,SAAKC,eAAL,GAAuB,KAAvB;AACA,SAAKC,oBAAL,GAA4B,KAA5B;AACA,QAAId,KAAKe,cAAL,KAAwBpB,SAA5B,EAAuC;AACrC,WAAKqB,mBAAL,GAA2B,0BAAWhB,KAAKe,cAAhB,CAA3B;AACD;AACD,SAAKE,wBAAL,GAAgC,CAAC,CAACjB,KAAKiB,wBAAvC;;AAEA;AACA,SAAKC,uBAAL,GAA+BlB,KAAKkB,uBAAL,IAAgC,CAA/D;AACA,SAAKC,2BAAL,GAAmC,CAAnC;AACA,SAAKC,oBAAL,GAA4B,KAA5B;;AAEA,SAAKC,OAAL,GAAerB,KAAKqB,OAApB;AACA,QAAI,KAAKA,OAAT,EAAkB;AAChB;AACA;AACA,WAAKC,cAAL,GAAsB,KAAKC,uBAAL,GAA+B,IAArD;AACD;;AAED,SAAKC,KAAL,GAAaC,KAAKC,GAAL,EAAb;AACA,SAAKC,aAAL,GAAqB3B,KAAK2B,aAAL,IAAsB,SAA3C;AACA,SAAKC,aAAL,GAAqB5B,KAAK4B,aAAL,IAAsB,GAA3C;AACA,SAAKC,cAAL,GAAsB7B,KAAK6B,cAAL,IAAuB,CAA7C;AACA,SAAKC,aAAL,GAAqB9B,KAAK8B,aAAL,IAAsB,OAA3C;AACA,SAAKC,iBAAL,GAAyB,CAAC,CAAC/B,KAAK+B,iBAAhC;;AAEA,SAAKC,YAAL,GAAoB,EAApB;;AAEA,QAAI,KAAKvB,yBAAT,EAAoC;AAClC,WAAKwB,gBAAL,GAAwB,gCAAqBjC,KAAKkC,UAA1B,EAAsClC,KAAKmC,YAA3C,CAAxB;AACA,WAAKC,cAAL,GAAsB,EAAtB;AACA,yBAAYC,6BAAZ,CAA0C,mBAAYC,oBAAtD;AACA,yBAAYD,6BAAZ,CAA0C,2BAAoBC,oBAA9D;AACA,yBAAYD,6BAAZ,CAA0C,kBAAWC,oBAArD;AACD;;AAED,SAAKC,OAAL,GAAe,EAAf;;AAEA;AACA,SAAK7C,UAAL,GAAmB,EAAnB;AACA,SAAK8C,aAAL,GAAuB,EAAvB;AACA,SAAKC,UAAL,GAAmBC,OAAOC,MAAP,CAAc,IAAd,CAAnB;AACA,SAAKC,iBAAL,GAA0BF,OAAOC,MAAP,CAAc,IAAd,CAA1B;AACA,SAAKE,UAAL,GAAoBlD,SAApB;;AAEA,SAAKmD,KAAL,GAAa;AACXC,qBAAe,IAAIC,OAAJ,EADJ;AAEXC,sCAAgC,EAFrB;AAGXC,kBAAY,IAAIF,OAAJ,EAHD;AAIXG,8BAAwB,IAAItD,GAAJ,EAJb;AAKXuD,oBAAczD,SALH;AAMX0D,eAASrD,KAAKsD,YAAL,IAAqB,KANnB;AAOXC,0BAAoB,IAAIP,OAAJ,EAPT;AAQXQ,8BAAwB,IAAIR,OAAJ,EARb;AASXS,oBAAc9D,SATH;AAUX+D,cAAQ1D,KAAK2D,WAAL,IAAoB,gBAVjB;AAWXC,qBAAe,IAAIC,OAAJ,EAXJ;AAYXC,eAAS,IAAIjE,GAAJ,EAZE;AAaXkE,eAAS/D,KAAKgE,YAAL,IAAqB;AAbnB,KAAb;;AAgBA,SAAKC,yBAAL,GAAiC,IAAIjB,OAAJ,EAAjC;AACA,SAAKkB,SAAL,GAAiBlE,KAAKkE,SAAL,IAAkB,KAAnC;;AAEA,SAAKC,WAAL,GAAmB;AACjBC,aAAO,IAAIvE,GAAJ,EADU;AAEjBiD,aAAOnD,SAFU;AAGjB0E,gBAAU1E,SAHO;AAIjB2E,sBAAgB3E,SAJC;AAKjB4E,kBAAY5E;AALK,KAAnB;;AAQA,SAAK6E,YAAL,GAAoBxE,KAAKwE,YAAzB;;AAEA,SAAKC,oBAAL,GAA4B,EAA5B;AACA,SAAKC,yBAAL,GAAiC,IAAI5E,GAAJ,EAAjC;AACA,SAAK6E,sBAAL,GAA8B,IAAI7E,GAAJ,EAA9B,CAhF2D,CAgFlB;AACzC,SAAKoC,UAAL,GAAkBlC,KAAKkC,UAAvB;AACA,SAAK0C,iBAAL,GAAyB,IAAI/E,GAAJ,EAAzB;AACD,GApFgB,CA4Fc;;;AA2B/B;AACA;;AAiFA;AACA;AACA;;;AAWA;AACAgF,mBAAiBlD,aAAjB,EAAwD;AACtD,WAAOA,kBAAkB,KAAKA,aAA9B;AACD;;AAED;AACA;AACAmD,sBAAoBC,GAApB,EAA+C;AAC7C,QAAIC,UAAU,KAAKnC,UAAL,CAAgBvD,iBAA9B;AACA;AACA,6BAAU0F,uDAAV;AACA,QAAIC,SAASD,QAAQE,kBAArB;;AAEA,QAAI;AACF,aAAOD,OAAOE,UAAP,CAAkBJ,GAAlB,IAAyBE,OAAOG,eAAP,CAAuBL,GAAvB,EAA4B,KAA5B,CAAzB,GAA8DpF,SAArE;AACD,KAFD,CAEE,OAAO0F,CAAP,EAAU;AACV,UAAIA,+BAAJ,EAA6B,OAAO1F,SAAP;AAC7B,YAAM0F,CAAN;AACD;AACF;;AAED;;;;;;;;AAQApG,cAAYqG,aAAZ,EAAoC;AAClC,SAAKlG,UAAL,GAAkBkG,aAAlB;AACA,SAAKzC,UAAL,CAAgBvD,iBAAhB,CAAkCF,UAAlC,GAA+CkG,aAA/C;AACA,SAAKpF,YAAL,CAAkBqF,OAAlB,CAA0BC,OAAO;AAC/BA,UAAIvG,WAAJ,CAAgBqG,aAAhB;AACD,KAFD;AAGD;;AAEDG,gBAAc;AACZ,QAAIpE,UAAU,KAAKA,OAAnB;AACA,QAAIA,WAAW,CAAC,GAAE,KAAKC,cAAvB,EAAuC;AACrC,WAAKA,cAAL,GAAsB,KAAKC,uBAA3B;AACA,UAAImE,QAAQjE,KAAKC,GAAL,KAAa,KAAKF,KAA9B;AACA,UAAIkE,QAAQrE,OAAZ,EAAqB;AACnB,YAAIsE,QAAQ,+BACT,6CAA4CtE,OAAQ,EAD3C,EAEV,KAAKuE,eAFK,EAGV,QAHU,EAIV,YAJU,CAAZ;AAMA,aAAKC,WAAL,CAAiBF,KAAjB;AACA,cAAM,wBAAN;AACD;AACF;AACF;;AAEDG,sBAA6B;AAC3B,WAAO,KAAK5F,YAAL,CAAkB6F,MAAlB,KAA6B,CAApC;AACD;;AAEDC,sBAAsC;AACpC,QAAIzH,UAAU,KAAK2B,YAAL,CAAkB,KAAKA,YAAL,CAAkB6F,MAAlB,GAA2B,CAA7C,CAAd;AACA,6BAAUxH,OAAV,EAAmB,sCAAnB;AACA,WAAOA,OAAP;AACD;;AAED0H,qBAAmB7I,gBAAnB,EAAsDkC,iBAAtD,EAAuG;AACrG,QAAIlC,qBAAqBuC,SAAzB,EAAoC;AACpC,SAAK,IAAIuG,CAAT,IAAc9I,iBAAiB+I,IAAjB,EAAd,EACE,IAAI7G,kBAAkBrC,QAAlB,CAA2BiJ,EAAEE,IAA7B,KAAsC9G,kBAAkBrC,QAAlB,CAA2BiJ,EAAEE,IAA7B,MAAuCF,CAAjF,EAAoF9I,iBAAiBiJ,MAAjB,CAAwBH,CAAxB;AACvF;;AAEDI,mCAAiCC,UAAjC,EAAyDjH,iBAAzD,EAA0G;AACxG,QAAIiH,2DAAJ,EAAoD;AAClD,WAAKN,kBAAL,CAAwBM,WAAWC,gBAAX,CAA4BpJ,gBAApD,EAAsEkC,iBAAtE;AACA,WAAK2G,kBAAL,CAAwBM,WAAWE,iBAAX,CAA6BrJ,gBAArD,EAAuEkC,iBAAvE;AACA,UAAIiH,WAAWG,YAAX,KAA4B/G,SAAhC,EACE,KAAKsG,kBAAL,CAAwBM,WAAWG,YAAX,CAAwBtJ,gBAAhD,EAAkEkC,iBAAlE;AACF,UAAIiH,WAAWI,SAAX,mCAAJ,EACE,KAAKL,gCAAL,CAAsCC,WAAWI,SAAjD,EAA4DrH,iBAA5D;AACF,UAAIiH,WAAWK,UAAX,mCAAJ,EACE,KAAKN,gCAAL,CAAsCC,WAAWK,UAAjD,EAA6DtH,iBAA7D;AACH,KATD,MASO,IAAIiH,0DAAJ,EAAmD;AACxD,WAAKN,kBAAL,CAAwBM,WAAWC,gBAAX,CAA4BpJ,gBAApD,EAAsEkC,iBAAtE;AACA,WAAK2G,kBAAL,CAAwBM,WAAWE,iBAAX,CAA6BrJ,gBAArD,EAAuEkC,iBAAvE;AACA,UAAIiH,WAAWI,SAAX,mCAAJ,EACE,KAAKL,gCAAL,CAAsCC,WAAWI,SAAjD,EAA4DrH,iBAA5D;AACF,UAAIiH,WAAWK,UAAX,mCAAJ,EACE,KAAKN,gCAAL,CAAsCC,WAAWK,UAAjD,EAA6DtH,iBAA7D;AACH;AACF;;AAED;AACA;AACAuH,iBAAetH,kBAAf,EAAuD;AACrD,6BAAU,KAAKmF,yBAAL,CAA+BoC,GAA/B,CAAmCvH,kBAAnC,CAAV;AACA,QAAInC,mBAAmB,KAAKA,gBAA5B;AACA,QAAIA,gBAAJ,EAAsB;AACpB;AACA,UAAIkC,oBAAoBC,mBAAmBD,iBAA3C;AACA,UAAIA,sEAAJ,EAA+D;AAC7D,aAAK2G,kBAAL,CAAwB7I,gBAAxB,EAA0CkC,iBAA1C;AACA,YAAI,KAAKyH,eAAL,KAAyBpH,SAA7B,EACE,KAAK2G,gCAAL,CAAsC,KAAKS,eAA3C,EAA4DzH,iBAA5D;AACH;AACF;;AAED;AACA,SAAKoF,yBAAL,CAA+B2B,MAA/B,CAAsC9G,kBAAtC;AACAA,uBAAmByH,OAAnB;AACD;;AAEDC,cAAY1I,OAAZ,EAA6C;AAC3C,QAAI,KAAK2B,YAAL,CAAkB6F,MAAlB,IAA4B,KAAKnE,aAArC,EAAoD;AAClD,YAAM,uBAAe,8BAAf,CAAN;AACD;AACD,SAAK1B,YAAL,CAAkBgH,IAAlB,CAAuB3I,OAAvB;AACD;;AAED4I,wBAAsB/J,gBAAtB,EAAyDgK,OAAzD,EAAiF;AAC/E,QAAIhK,qBAAqBuC,SAAzB,EAAoC;AACpC,SAAK,IAAIuG,CAAT,IAAc9I,iBAAiB+I,IAAjB,EAAd,EAAuC;AACrC,UAAID,EAAEmB,WAAF,sDAAsDnB,EAAEmB,WAAF,CAAcC,eAAd,KAAkCF,OAA5F,EACEhK,iBAAiBiJ,MAAjB,CAAwBH,CAAxB;AACH;AACF;;AAEDqB,sCAAoChB,UAApC,EAA4Da,OAA5D,EAAoF;AAClF,QAAIb,2DAAJ,EAAoD;AAClD,WAAKY,qBAAL,CAA2BZ,WAAWC,gBAAX,CAA4BpJ,gBAAvD,EAAyEgK,OAAzE;AACA,WAAKD,qBAAL,CAA2BZ,WAAWE,iBAAX,CAA6BrJ,gBAAxD,EAA0EgK,OAA1E;AACA,UAAIb,WAAWG,YAAX,KAA4B/G,SAAhC,EACE,KAAKwH,qBAAL,CAA2BZ,WAAWG,YAAX,CAAwBtJ,gBAAnD,EAAqEgK,OAArE;AACF,UAAIb,WAAWI,SAAX,mCAAJ,EACE,KAAKY,mCAAL,CAAyChB,WAAWI,SAApD,EAA+DS,OAA/D;AACF,UAAIb,WAAWK,UAAX,mCAAJ,EACE,KAAKW,mCAAL,CAAyChB,WAAWK,UAApD,EAAgEQ,OAAhE;AACH,KATD,MASO,IAAIb,0DAAJ,EAAmD;AACxD,WAAKY,qBAAL,CAA2BZ,WAAWC,gBAAX,CAA4BpJ,gBAAvD,EAAyEgK,OAAzE;AACA,WAAKD,qBAAL,CAA2BZ,WAAWE,iBAAX,CAA6BrJ,gBAAxD,EAA0EgK,OAA1E;AACA,UAAIb,WAAWI,SAAX,mCAAJ,EACE,KAAKY,mCAAL,CAAyChB,WAAWI,SAApD,EAA+DS,OAA/D;AACF,UAAIb,WAAWK,UAAX,mCAAJ,EACE,KAAKW,mCAAL,CAAyChB,WAAWK,UAApD,EAAgEQ,OAAhE;AACH;AACF;;AAEDI,aAAWjJ,OAAX,EAA4C;AAC1C,QAAI6I,UAAU7I,QAAQK,QAAtB;AACA,QAAIwI,OAAJ,EAAa;AACX,WAAKD,qBAAL,CAA2B,KAAK/J,gBAAhC,EAAkDgK,OAAlD;AACA,UAAI,KAAKL,eAAL,KAAyBpH,SAA7B,EAAwC,KAAK4H,mCAAL,CAAyC,KAAKR,eAA9C,EAA+DK,OAA/D;AACzC;AACD,QAAIK,IAAI,KAAKvH,YAAL,CAAkBwH,GAAlB,EAAR;AACA,6BAAUD,MAAMlJ,OAAhB;AACD;;AAEDoJ,kBAAmBC,QAAnB,EAAyC;AACvC,QAAIrJ,UAAU,IAAIF,gBAAJ,EAAd;AACAE,YAAQG,QAAR,GAAmB,KAAKA,QAAxB;AACAH,YAAQgB,kBAAR,GAA6B,KAAKsD,UAAlC;AACAtE,YAAQc,mBAAR,GAA8B,KAAKwD,UAAnC;AACAtE,YAAQS,KAAR,GAAgB,IAAhB;;AAEA,SAAKiI,WAAL,CAAiB1I,OAAjB;AACA,QAAI;AACF,aAAOqJ,UAAP;AACD,KAFD,SAEU;AACR,WAAKJ,UAAL,CAAgBjJ,OAAhB;AACD;AACF;;AAEDsJ,iBAAezB,IAAf,EAAoClH,KAApC,EAAkD;AAChD,SAAKyI,eAAL,CAAqB,MAAM,KAAK9E,UAAL,CAAgBgF,cAAhB,CAA+BzB,IAA/B,EAAqClH,KAArC,CAA3B;AACD;;AAED4I,sBAAoB1B,IAApB,EAAkC;AAChC,SAAKvD,UAAL,CAAgBvD,iBAAhB,CAAkCyI,aAAlC,CAAgD3B,IAAhD;AACD;;AAED4B,qBAAmBC,MAAnB,EAA8DC,CAA9D,EAAyE;AACvE,WACEA,EAAEC,UAAF,CAAa,IAAb,KACCF,WAAW,KAAKzF,aAAhB,IAAiC0F,MAAM,QADxC,IAECD,OAAOG,aAAP,KAAyBzI,SAAzB,IAAsCsI,OAAOG,aAAP,CAAqBD,UAArB,CAAgC,IAAhC,CAHzC;AAKD;;AAEDE,wBAAmC;AACjC,QAAIC,eAAe,KAAK9F,aAAxB;AACA,6BAAU8F,0CAAV;AACA,QAAIC,UAAUD,aAAaE,UAAb,CAAwBC,GAAxB,CAA4B,mBAA5B,CAAd;AACA,6BAAUF,YAAY5I,SAAtB;AACA,QAAI+I,wBAAwBH,QAAQI,UAAR,IAAsBJ,QAAQI,UAAR,CAAmBzJ,KAArE;AACA,6BAAUwJ,mDAAV;AACA,WAAOA,qBAAP;AACD;;AAEDE,wBAAsBX,MAAtB,EAAiEC,CAAjE,EAA4E;AAC1E,6BAAU,CAAC,KAAKF,kBAAL,CAAwBC,MAAxB,EAAgCC,CAAhC,CAAX;AACA,QAAIW,WAAW,KAAKjE,iBAAL,CAAuB6D,GAAvB,CAA2BR,MAA3B,CAAf;AACA,QAAIY,aAAalJ,SAAjB,EAA4B,KAAKiF,iBAAL,CAAuBkE,GAAvB,CAA2Bb,MAA3B,EAAoCY,WAAW,KAAKjE,iBAAL,CAAuBmE,IAAtE;AAC5B,QAAIC,KAAM,KAAIH,QAAS,IAAGX,CAAE,EAA5B;AACA,QAAIe,kBAAkB,KAAKZ,mBAAL,EAAtB;AACAY,oBAAgBC,IAAhB,CAAqBF,EAArB,EAAyB,KAAKtJ,UAAL,CAAgByJ,IAAzC,EAA+CF,eAA/C;AACD;;AAEDG,wBAAsBnB,MAAtB,EAAiEC,CAAjE,EAA4F;AAC1F,QAAI,KAAKF,kBAAL,CAAwBC,MAAxB,EAAgCC,CAAhC,CAAJ,EAAwC,OAAO,IAAP;AACxC,QAAIW,WAAW,KAAKjE,iBAAL,CAAuB6D,GAAvB,CAA2BR,MAA3B,CAAf;AACA,QAAIY,aAAalJ,SAAjB,EAA4B,OAAO,KAAP;AAC5B,QAAIqJ,KAAM,KAAIH,QAAS,IAAGX,CAAE,EAA5B;AACA,QAAIK,UAAU,KAAKF,mBAAL,GAA2BG,UAA3B,CAAsCC,GAAtC,CAA0CO,EAA1C,CAAd;AACA,QAAIT,YAAY5I,SAAhB,EAA2B,OAAO,KAAP;AAC3B,QAAIT,QAAQqJ,QAAQI,UAAR,IAAsBJ,QAAQI,UAAR,CAAmBzJ,KAArD;AACA,WAAOA,iCAA0B,CAACA,MAAMmK,cAAN,EAAlC;AACD;;AAED;AACA;AACA;AACA;AACAC,eACEC,CADF,EAEEC,oBAFF,EAOE;AACA,QAAIC,sCAAsC,KAAKC,6BAA/C;AACA,QAAIC,iCAAiC,KAAKC,wBAA1C;AACA;AACA;AACA;AACA;AACA,SAAKF,6BAAL,GAAqC,IAAI5J,GAAJ,EAArC;AACA,SAAK8J,wBAAL,GAAgCJ,oBAAhC;AACA,QAAI;AACF,aAAOD,GAAP;AACD,KAFD,SAEU;AACR,WAAKG,6BAAL,GAAqCD,mCAArC;AACA,WAAKG,wBAAL,GAAgCD,8BAAhC;AACD;AACF;;AAEDE,kBAAgB;AACd,WAAO,CAAC,CAAC,KAAKH,6BAAd;AACD;;AAEDI,2BAAyBP,CAAzB,EAAgD;AAC9C,6BAAU,CAAC,KAAK1I,eAAhB,EAAiC,4DAAjC;AACA,SAAKA,eAAL,GAAuB,IAAvB;AACA,QAAI;AACF,aAAO0I,GAAP;AACD,KAFD,SAEU;AACR,WAAK1I,eAAL,GAAuB,KAAvB;AACD;AACF;;AAED;AACA;AACA;AACAkJ,sCAAoCR,CAApC,EAAoDS,WAApD,EAA8EC,YAA9E,EAAiH;AAC/G;AACA;AACA;AACA;AACA,6BAAU,KAAKJ,aAAL,EAAV,EAAgC,mDAAhC;;AAEA;AACA;AACA;AACA;AACA,QAAI3K,QAAQqK,GAAZ;AACA,QAAI,KAAKzI,oBAAT,EAA+B;AAC7B,UAAIoJ,OAAO,+BACT,sDADS,EAET,KAAKtE,eAFI,EAGT,QAHS,EAIT,kBAJS,CAAX;AAMA,UAAI,KAAKC,WAAL,CAAiBqE,IAAjB,MAA2B,SAA/B,EAA0C,MAAM,wBAAN;AAC3C;AACD,WAAOhL,KAAP;AACD;;AAED;AACA;AACA;AACAiL,yBACEC,GADF,EAEEC,UAFF,EAGEC,GAHF,EAIE5M,KAJF,EAKE6M,aALF,EAMW;AACT,WAAO,KAAKC,kBAAL,CACL,MAAMF,IAAIG,uBAAJ,CAA4BL,GAA5B,EAAiCC,UAAjC,CADD,EAEL3M,KAFK,EAGL6M,iBAAiB,wBAHZ,CAAP;AAKD;;AAEDG,gCAA8BC,IAA9B,EAAiDjN,KAAjD,EAA8D6M,aAA9D,EAA+F;AAC7F,WAAO,KAAK5C,eAAL,CAAqB,MAC1B,KAAK6C,kBAAL,CAAwBG,IAAxB,EAA8BjN,KAA9B,EAAqC6M,iBAAiB,+BAAtD,CADK,CAAP;AAGD;;AAED;AACA;AACAK,gCAAiCD,IAAjC,EAAqD/M,OAArD,EAA0E;AACxE,QAAIb,MAAJ;AACA,SAAK2N,6BAAL,CAAmC,MAAM;AACvC,UAAI;AACF,aAAKG,YAAL,CAAkBjN,OAAlB,EAA2B,EAA3B,EAA+B,KAA/B;AACAb,iBAAS4N,KAAK/M,OAAL,CAAT;AACA,eAAO,KAAK8B,UAAL,CAAgBC,SAAvB;AACD,OAJD,SAIU;AACR,aAAKmL,eAAL,CAAqBlN,QAAQR,gBAA7B;AACA,aAAK2N,iBAAL,CAAuBnN,QAAQP,kBAA/B;AACA,iCAAU,CAACO,QAAQN,YAAnB;AACAM,gBAAQN,YAAR,GAAuB,IAAvB;AACD;AACF,KAXD;AAYA,6BAAUP,WAAW4C,SAArB,EAAgC,oDAAhC;AACA,WAAO5C,MAAP;AACD;;AAEDiO,oCAAkCC,IAAlC,EAAmDvN,KAAnD,EAAgE6M,aAAhE,EAAiG;AAC/F,WAAO,KAAK5C,eAAL,CAAqB,MAAM,KAAKwC,sBAAL,CAA4Bc,IAA5B,EAAkC,KAAlC,EAAyC,KAAKpI,UAA9C,EAA0DnF,KAA1D,EAAiE6M,aAAjE,CAA3B,CAAP;AACD;;AAEDW,kCACEd,GADF,EAEEC,UAFF,EAGEC,GAHF,EAImD;AACjD,QAAIa,OAAJ,EAAaC,MAAb;AACA,aAASC,WAAT,GAAuB;AACrB,UAAItO,MAAJ;AACA,OAACA,MAAD,EAASoO,OAAT,EAAkBC,MAAlB,IAA4Bd,IAAIgB,gCAAJ,CAAqClB,GAArC,EAA0CC,UAA1C,CAA5B;AACA,aAAOtN,MAAP;AACD;AACD,QAAIa,UAAU,KAAK4M,kBAAL,CAAwBa,WAAxB,EAAqC1L,SAArC,EAAgD,iCAAhD,CAAd;AACA,6BAAUwL,YAAYxL,SAAZ,IAAyByL,WAAWzL,SAA9C;AACA,WAAO,CAAC/B,OAAD,EAAUuN,OAAV,EAAmBC,MAAnB,CAAP;AACD;;AAEDZ,qBAAmBjB,CAAnB,EAAgD7L,KAAhD,EAA4D6M,aAA5D,EAA4F;AAC1F;AACA,QAAI,CAACgB,aAAD,EAAgBC,eAAhB,IAAmC,KAAKC,uBAAL,EAAvC;AACA,QAAIC,kBAAkB,KAAK1O,SAA3B;AACA,QAAI2O,uBAAuB,KAAKxO,cAAhC;AACA,QAAIyO,mBAAmB,KAAK7E,eAA5B;AACA,SAAK/J,SAAL,GAAiB,yBAAc,IAAd,EAAoBuN,aAApB,CAAjB;AACA,SAAKpN,cAAL,GAAsB,IAAI2C,GAAJ,EAAtB;AACA,SAAKiH,eAAL,GAAuBpH,SAAvB,CAR0F,CAQxD;;AAElC,QAAI5C,MAAJ;AACA,QAAI;AACF,WAAK,IAAI8O,EAAT,IAAe,KAAKtJ,OAApB,EAA6BsJ,GAAGpO,uBAAH,CAA2BC,KAA3B;;AAE7B,UAAI+J,CAAJ;AACA,UAAI;AACF,YAAI;AACFA,cAAI8B,GAAJ;AACA,cAAI9B,mCAAJ,EAA4BA,IAAI,wBAAYqE,QAAZ,CAAqB,IAArB,EAA2BrE,CAA3B,CAAJ;AAC7B,SAHD,CAGE,OAAOpC,CAAP,EAAU;AACV,cAAIA,0CAAJ,EAAmCoC,IAAIpC,CAAJ,CAAnC,KACK,MAAMA,CAAN;AACN;AACD;AACA,YAAIoC,6BAAsBA,0CAA1B,EAAyDA,IAAI,sBAAUsE,0BAAV,CAAqC,IAArC,EAA2CtE,CAA3C,CAAJ;AACzD,iCAAUA,MAAM9H,SAAhB;AACA,YAAI8H,kDAAJ,EAA2C;AACzC;AACA;AACA,cAAIuE,oBAAoB,KAAKC,kBAAL,CAAwBxE,CAAxB,EAA2BA,EAAEvI,KAA7B,CAAxB;AACA,mCAAU8M,sBAAsBrM,SAAhC;AACA,eAAKuM,+BAAL,CAAqCzE,CAArC;AACA,2BAAK0E,mDAAL,CAAyD,IAAzD,EAA+D1E,CAA/D,EAAkEuE,iBAAlE;AACA,eAAKjF,eAAL,GAAuBpH,SAAvB;AACD;;AAED,iCAAU,KAAK3C,SAAL,KAAmB2C,SAA7B;AACA,iCAAU,KAAKvC,gBAAL,KAA0BuC,SAApC;AACA,iCAAU,KAAKtC,kBAAL,KAA4BsC,SAAtC;AACA,iCAAU,KAAKxC,cAAL,KAAwBwC,SAAlC;AACA,YAAIyM,eAAe,KAAKpP,SAAxB;AACA,YAAIqP,cAAc,KAAKjP,gBAAvB;AACA,YAAIkP,gBAAgB,KAAKjP,kBAAzB;AACA,YAAIkP,oBAAoB,KAAKpP,cAA7B;;AAEA;;;;;;;;AASA;AACAJ,iBAAS,IAAIF,OAAJ,CAAY4K,CAAZ,EAAe2E,YAAf,EAA6BC,WAA7B,EAA0CC,aAA1C,EAAyDC,iBAAzD,CAAT;AACA,eAAOxP,MAAP;AACD,OA1CD,SA0CU;AACR;AACA,YAAI,KAAKgK,eAAL,KAAyBpH,SAA7B,EAAwC,KAAKuM,+BAAL,CAAqC,KAAKnF,eAA1C;AACxC,YAAIhK,WAAW4C,SAAf,EAA0B;AACxB,eAAKmL,eAAL,CAAqB/N,OAAOK,gBAA5B;AACA,eAAK2N,iBAAL,CAAuBhO,OAAOM,kBAA9B;AACD,SAHD,MAGO;AACL,eAAKyN,eAAL,CAAqB,KAAK1N,gBAA1B;AACA,eAAK2N,iBAAL,CAAuB,KAAK1N,kBAA5B;AACD;AACD,aAAKL,SAAL,GAAiB0O,eAAjB;AACA,aAAKtO,gBAAL,GAAwBmO,aAAxB;AACA,aAAKlO,kBAAL,GAA0BmO,eAA1B;AACA,aAAKrO,cAAL,GAAsBwO,oBAAtB;AACA,aAAK5E,eAAL,GAAuB6E,gBAAvB;AACD;AACF,KA9DD,SA8DU;AACR,WAAK,IAAIY,EAAT,IAAe,KAAKjK,OAApB,EAA6BiK,GAAG7O,qBAAH,CAAyBD,KAAzB,EAAgCX,MAAhC;AAC9B;AACF;;AAED0P,mBAAiBlD,CAAjB,EAAiCmD,eAAsB,KAAKhN,UAAL,CAAgBC,SAAvE,EAAyF;AACvF,QAAI,CAAC,KAAKc,yBAAV,EAAqC,OAAO8I,GAAP;AACrC,QAAIoD,kBAAkB,KAAKnI,YAA3B;AACA,SAAKA,YAAL,GAAoBoI,KAAK;AACvB,UAAIA,EAAEC,QAAF,KAAe,aAAf,IAAgCD,EAAEC,QAAF,KAAe,SAAnD,EAA8D,OAAO,SAAP;AAC9D,aAAO,MAAP;AACD,KAHD;AAIA,QAAI;AACF,UAAIjP,UAAU,KAAK4M,kBAAL,CACZ,MAAM;AACJ,YAAI;AACF,iBAAOjB,GAAP;AACD,SAFD,CAEE,OAAOlE,CAAP,EAAU;AACV,cAAIA,oCAAJ,EAA6B;AAC3B,mBAAOqH,YAAP;AACD,WAFD,MAEO,IAAIrH,+BAAJ,EAA6B;AAClC,mBAAOqH,YAAP;AACD,WAFM,MAEA;AACL,kBAAMrH,CAAN;AACD;AACF;AACF,OAbW,EAcZ1F,SAdY,EAeZ,kBAfY,CAAd;AAiBA,aAAO/B,QAAQb,MAAR,2BAAkCa,QAAQb,MAA1C,GAAmD2P,YAA1D;AACD,KAnBD,SAmBU;AACR,WAAKlI,YAAL,GAAoBmI,eAApB;AACD;AACF;;AAEDG,gCAA8BvD,CAA9B,EAA0E;AACxE,QAAI,CAAC,KAAK9I,yBAAV,EAAqC,OAAO8I,GAAP;AACrC,QAAIwD,eAAe,KAAKvI,YAAxB;AACA,QAAIwI,UAAJ;AACA,QAAI;AACF,WAAKxI,YAAL,GAAoBoI,KAAK;AACvBI,qBAAaJ,CAAb;AACA,eAAO,MAAP;AACD,OAHD;AAIA,UAAIhP,UAAU,KAAK4M,kBAAL,CAAwBjB,CAAxB,EAA2B5J,SAA3B,EAAsC,+BAAtC,CAAd;AACA,WAAKkL,YAAL,CAAkBjN,OAAlB;AACA,UAAIqP,YAAYrP,QAAQb,MAAxB;AACA,UAAIkQ,kDAAJ,EAA2C,MAAMA,SAAN;AAC3C,UAAIA,0DAAJ,EAAmD;AACjD;AACA;AACA;AACA;AACAA,oBAAY,KAAKC,0BAAL,CAAgCD,SAAhC,CAAZ;AACD;AACD,+BAAUA,iCAAV;AACA,aAAOA,SAAP;AACD,KAlBD,CAkBE,OAAO5H,CAAP,EAAU;AACV,UAAI2H,eAAerN,SAAnB,EAA8B,OAAOqN,UAAP;AAC9B,YAAM3H,CAAN;AACD,KArBD,SAqBU;AACR,WAAKb,YAAL,GAAoBuI,YAApB;AACD;AACF;;AAEDI,6BAA2BC,SAA3B,EAAiH;AAC/G,QAAI;AACF,UAAIC,IAAJ;AACA,UAAI9D,IAAI,MAAM;AACZ,YAAIxM,MAAJ;AACA,SAACsQ,IAAD,EAAOtQ,MAAP,IAAiBqQ,WAAjB;AACA,YAAI,EAAEC,oCAAF,CAAJ,EAAsC,MAAM,uBAAe,oCAAf,CAAN;AACtC,iCAAUtQ,6CAAgCA,8BAA1C;AACA,eAAOA,MAAP;AACD,OAND;AAOA,UAAIuQ,WAAW,KAAK9C,kBAAL,CAAwBjB,CAAxB,EAA2B5J,SAA3B,EAAsC,8BAAtC,CAAf;AACA,aAAO,IAAP,EAAa;AACX,aAAKmL,eAAL,CAAqBwC,SAASlQ,gBAA9B;AACA,aAAK2N,iBAAL,CAAuBuC,SAASjQ,kBAAhC;AACA,YAAIkQ,WAAW,KAAK/C,kBAAL,CAAwBjB,CAAxB,EAA2B5J,SAA3B,EAAsC,8BAAtC,CAAf;AACA,aAAKmL,eAAL,CAAqBwC,SAASlQ,gBAA9B;AACA,aAAK2N,iBAAL,CAAuBuC,SAASjQ,kBAAhC;AACA,YAAI,kBAAMmQ,eAAN,CAAsBF,QAAtB,EAAgCC,QAAhC,CAAJ,EAA+C;AAC7C;AACA;AACA;AACA,gBAAME,KAAKF,QAAX;AACA,eAAKG,qCAAL,CAA2CD,GAAGpQ,kBAA9C,EAAkEoQ,GAAGtQ,cAArE;AACA,eAAKwQ,uBAAL,CAA6BF,GAAGzQ,SAAhC,EAA2CyQ,GAAGpQ,kBAA9C,EAAkEoQ,GAAGtQ,cAArE;AACA,eAAKyQ,qBAAL,CAA2BH,GAAGzQ,SAA9B,EAAyCyQ,GAAGrQ,gBAA5C,EAA8DqQ,GAAGtQ,cAAjE;AACA,mCAAUkQ,oCAAV;AACA,cAAIQ,OAAOJ,GAAGzQ,SAAH,CAAa8Q,cAAb,CAA4BT,KAAKU,KAAjC,EAAwCV,KAAKW,MAA7C,EAAqD,CAACX,IAAD,CAArD,EAA6D,CAAC,CAACY,CAAD,CAAD,KAASA,CAAtE,EAAyE;AAClFC,2BAAe;AADmE,WAAzE,CAAX;AAGA,iBAAO,CAACZ,QAAD,EAAWC,QAAX,EAAqBM,IAArB,CAAP;AACD;AACDP,mBAAW,kBAAMa,YAAN,CAAmB,IAAnB,EAAyBb,QAAzB,EAAmCC,QAAnC,CAAX;AACD;AACF,KAhCD,CAgCE,OAAOlI,CAAP,EAAU;AACV,aAAO1F,SAAP;AACD;AACF;;AAEDyO,kCACEC,SADF,EAEEC,qBAFF,EAGEC,oBAHF,EAIS;AACP;AACA,QAAIjB,QAAJ;AACA,QAAI;AACFA,iBAAW,iBAAKkB,aAAL,CAAmBH,SAAnB,EAA8BC,qBAA9B,CAAX;AACD,KAFD,CAEE,OAAOjJ,CAAP,EAAU;AACV,UAAI,EAAEA,wCAAF,CAAJ,EAAyC,MAAMA,CAAN;AAC1C;;AAED,QAAIkI,QAAJ;AACA,QAAI;AACFA,iBAAW,iBAAKkB,oBAAL,CAA0BJ,SAA1B,EAAqCE,oBAArC,CAAX;AACD,KAFD,CAEE,OAAOlJ,CAAP,EAAU;AACV,UAAI,EAAEA,wCAAF,CAAJ,EAAyC,MAAMA,CAAN;AAC1C;;AAED,QAAIqJ,aAAJ,EAAmBnI,UAAnB;AACA,QAAI+G,aAAa3N,SAAb,IAA0B4N,aAAa5N,SAA3C,EAAsD;AACpD,UAAI2N,aAAa3N,SAAb,IAA0B4N,aAAa5N,SAA3C,EAAsD,MAAM,iCAAN;AACtD+O,sBAAgBpB,YAAYC,QAA5B;AACA,+BAAUmB,kBAAkB/O,SAA5B;AACA4G,mBAAamI,cAAc3R,MAA3B;AACA,WAAK8N,YAAL,CAAkB6D,aAAlB,EAAiC,iCAAjC;AACD,KAND,MAMO;AACL;AACA;AACAA,sBAAgB,iBAAKC,WAAL,CAAiB,IAAjB,EAAuBN,SAAvB,EAAkCf,QAAlC,EAA4CC,QAA5C,CAAhB;AACAhH,mBAAamI,cAAc3R,MAA3B;AACA,UAAIwJ,0DAAJ,EAAmD;AACjD;AACA,cAAMA,UAAN;AACD;AACD,UAAIA,2DAAJ,EAAoD;AAClD;AACA;AACA;AACA;AACAA,qBAAa,KAAK2G,0BAAL,CAAgC3G,UAAhC,CAAb;AACA,aAAKsE,YAAL,CAAkB6D,aAAlB,EAAiC,iCAAjC,EAAoE,KAApE;AACD,OAPD,MAOO;AACL,aAAK7D,YAAL,CAAkB6D,aAAlB,EAAiC,iCAAjC;AACD;AACF;;AAED;AACA,QAAInI,mDAAJ,EAA4C,MAAMA,UAAN;AAC5C,6BAAUA,kCAAV;AACA,WAAOA,UAAP;AACD;;AAEDmH,wCACErQ,kBADF,EAEEuR,mBAFF,EAGE;AACA,QAAIvR,uBAAuBsC,SAA3B,EAAsC;AACtCtC,uBAAmBkI,OAAnB,CAA2B,CAACsJ,IAAD,EAAOC,eAAP,EAAwBC,CAAxB,KAA8B;AACvD,UAAID,gBAAgB7G,MAAhB,kCAAiD2G,oBAAoB9H,GAApB,CAAwBgI,gBAAgB7G,MAAxC,CAArD,EAAsG;AACpG6G,wBAAgBnG,UAAhB,GAA6BkG,IAA7B;AACD;AACF,KAJD;AAKD;;AAED;AACAjB,wBAAsBoB,GAAtB,EAAsC/R,QAAtC,EAA0D2R,mBAA1D,EAA+F;AAC7F,QAAIK,UAAmC,IAAIpP,GAAJ,EAAvC;AACA5C,aAASsI,OAAT,CAAiB,CAACgD,OAAD,EAAUxD,GAAV,EAAemK,GAAf,KAAuB;AACtC,UAAIC,MAAM5G,QAAQrJ,KAAlB;AACA,UAAIiQ,mCAAJ,EAAkC;AAChC,iCAAUA,IAAIC,UAAJ,KAAmBzP,SAA7B;AACA,YAAI0P,OAAOL,IAAIlB,cAAJ,CAAmBqB,IAAIpB,KAAvB,EAA8BoB,IAAInB,MAAlC,EAA0C,CAACmB,GAAD,CAA1C,EAAiD,CAAC,CAAClB,CAAD,CAAD,KAASA,CAA1D,EAA6D;AACtEC,yBAAe;AADuD,SAA7D,CAAX;AAGAe,gBAAQnG,GAAR,CAAY/D,GAAZ,EAAiBsK,IAAjB;AACD;AACF,KATD;AAUApS,aAASsI,OAAT,CAAiB,CAACgD,OAAD,EAAUxD,GAAV,EAAemK,GAAf,KAAuB;AACtC,UAAIC,MAAM5G,QAAQrJ,KAAlB;AACA,UAAIiQ,mCAAJ,EAAkC;AAChC,YAAIG,UAAUvK,IAAIuK,OAAlB;AACA,YAAID,OAAOJ,QAAQxG,GAAR,CAAY1D,GAAZ,CAAX;AACA,iCAAUsK,SAAS1P,SAAnB;AACAqP,YAAIO,aAAJ,CAAkB,CAACF,IAAD,CAAlB,EAA0B,CAAC,CAACG,CAAD,CAAD,KAAS;AACjC,mCAAUF,YAAY3P,SAAtB;AACA,cAAIqJ,KAAKsG,QAAQG,SAAR,CAAkB,EAAlB,CAAT;AACA,iBAAO9S,EAAE+S,mBAAF,CAAsB/S,EAAEgT,oBAAF,CAAuB,GAAvB,EAA6B3G,EAA7B,EAAuCwG,CAAvC,CAAtB,CAAP;AACD,SAJD;AAKD;;AAED,UAAIL,qCAA8BP,oBAAoB9H,GAApB,CAAwBqI,GAAxB,CAAlC,EAAgE;AAC9D,YAAIG,UAAUvK,IAAIuK,OAAlB;AACAN,YAAIO,aAAJ,CAAkB,CAACJ,GAAD,CAAlB,EAAyB,CAAC,CAACK,CAAD,CAAD,KAAS;AAChC,mCAAUF,YAAY3P,SAAtB;AACA,cAAIqJ,KAAKsG,QAAQG,SAAR,CAAkB,EAAlB,CAAT;AACA,iBAAO9S,EAAE+S,mBAAF,CAAsB/S,EAAEgT,oBAAF,CAAuB,GAAvB,EAA6B3G,EAA7B,EAAuCwG,CAAvC,CAAtB,CAAP;AACD,SAJD;AAKD;AACF,KArBD;AAsBD;;AAED;AACA7B,0BAAwBqB,GAAxB,EAAwCY,SAAxC,EAAqEhB,mBAArE,EAA0G;AACxG,aAASiB,iBAAT,CAA2B3Q,KAA3B,EAAyC4Q,QAAzC,EAAkF;AAChF,UAAI5Q,UAAU4Q,QAAd,EAAwB,OAAO,IAAP;AACxB,UAAI5Q,yCAAkC4Q,aAAanQ,SAAnD,EAA8D;AAC5D,aAAK,IAAI6P,CAAT,IAActQ,MAAM6Q,IAApB,EAA0B;AACxB,cAAIF,kBAAkBL,CAAlB,EAAqBM,QAArB,CAAJ,EAAoC,OAAO,IAAP;AACrC;AACF;AACD,aAAO,KAAP;AACD;;AAED,QAAIb,UAAmC,IAAIpP,GAAJ,EAAvC;AACA+P,cAAUrK,OAAV,CAAkB,CAAC4J,GAAD,EAAMpK,GAAN,EAAWmK,GAAX,KAAmB;AACnC,UACEnK,IAAIkD,MAAJ,mCACC2G,oBAAoB9H,GAApB,CAAwB/B,IAAIkD,MAA5B,KAAuClD,IAAIkD,MAAJ,CAAW+H,mBADnD,CADF,EAGE;AACA;AACD;AACD,UAAI9Q,QAAQiQ,OAAOA,IAAIjQ,KAAvB;AACA,UAAIA,qCAAJ,EAAoC;AAClC,iCAAUA,MAAMkQ,UAAN,KAAqBzP,SAA/B;AACA,YAAI0P,OAAOL,IAAIlB,cAAJ,CACT5O,MAAM6O,KADG,EAET7O,MAAM8O,MAFG,EAGT,CAACjJ,IAAIkD,MAAL,EAAa/I,KAAb,CAHS,EAIT,CAAC,CAAC+Q,CAAD,EAAIhC,CAAJ,CAAD,KAAY;AACV,mCAAU/O,6BAAV;AACA,cAAI,OAAO6F,IAAIA,GAAX,KAAmB,QAAnB,IAA+B7F,MAAMgR,oBAAN,EAA/B,IAA+DL,kBAAkB3Q,KAAlB,EAAyB6F,IAAI+K,QAA7B,CAAnE,EAA2G;AACzG,gBAAIK,SAASxT,EAAEyT,gBAAF,CAAmB,IAAnB,EAAyBzT,EAAE0T,aAAF,CAAgBtL,IAAIA,GAApB,CAAzB,EAAmDkL,CAAnD,CAAb;AACA,gBAAIK,WAAW3T,EAAE4T,qBAAF,CAAwBJ,MAAxB,EAAgClC,CAAhC,gCAAf;AACAA,gBAAItR,EAAE6T,iBAAF,CAAoB,IAApB,EAA0BvC,CAA1B,EAA6BqC,QAA7B,CAAJ;AACD;AACD,iBAAOrC,CAAP;AACD,SAZQ,EAaT;AACEC,yBAAe;AADjB,SAbS,CAAX;AAiBAe,gBAAQnG,GAAR,CAAY/D,GAAZ,EAAiBsK,IAAjB;AACD;AACF,KA7BD;AA8BAO,cAAUrK,OAAV,CAAkB,CAAC4J,GAAD,EAAMpK,GAAN,EAAWmK,GAAX,KAAmB;AACnC,UACEnK,IAAIkD,MAAJ,mCACC2G,oBAAoB9H,GAApB,CAAwB/B,IAAIkD,MAA5B,KAAuClD,IAAIkD,MAAJ,CAAW+H,mBADnD,CADF,EAGE;AACA;AACD;AACD,UAAIS,OAAO1L,IAAI+K,QAAf;AACA,UAAIT,OAAOJ,QAAQxG,GAAR,CAAY1D,GAAZ,CAAX;AACA,+BAAUoK,QAAQxP,SAAlB;AACA,UAAIT,QAAQiQ,IAAIjQ,KAAhB;AACA,+BAAUA,6BAAV;AACA,UAAIgR,uBAAuBhR,MAAMgR,oBAAN,EAA3B;AACA,UAAIQ,mBAAmBxR,MAAMwR,gBAAN,EAAvB;AACA,UAAIC,SAAS5L,IAAIA,GAAjB;AACA,UAAI,OAAO4L,MAAP,KAAkB,QAAtB,EAAgC;AAC9B3B,YAAIO,aAAJ,CAAkB,CAACxK,IAAIkD,MAAL,EAAaoH,QAAQnQ,KAArB,EAA4B,KAAKQ,UAAL,CAAgBE,KAA5C,CAAlB,EAAsE,CAAC,CAACqQ,CAAD,EAAIT,CAAJ,EAAOnK,CAAP,CAAD,KAAe;AACnF,mCAAUoL,SAAS9Q,SAAnB;AACA,mCAAU,OAAOgR,MAAP,KAAkB,QAA5B;AACA,cAAIC,KAAKH,KAAKhB,SAAL,CAAe,CAACQ,CAAD,EAAItT,EAAEkU,UAAF,CAAaF,MAAb,CAAJ,CAAf,CAAT;AACA,cAAIG,IAAInU,EAAE+S,mBAAF,CAAsB/S,EAAEgT,oBAAF,CAAuB,GAAvB,EAA6BiB,EAA7B,EAAuCpB,CAAvC,CAAtB,CAAR;AACA,cAAIU,oBAAJ,EAA0B;AACxB;AACA,gBAAIa,YAAYpU,EAAEyT,gBAAF,CAAmB,KAAnB,EAA0BZ,CAA1B,EAA6BnK,CAA7B,CAAhB;AACA,gBAAI2L,gBAAgBrU,EAAEyT,gBAAF,CAAmB,KAAnB,EAA0BZ,CAA1B,+BAApB;AACA,gBAAIW,SAASxT,EAAEsU,eAAF,CAAkB,GAAlB,EAAuBtU,EAAEyT,gBAAF,CAAmB,IAAnB,EAAyBzT,EAAE0T,aAAF,CAAgBM,MAAhB,CAAzB,EAAkDV,CAAlD,CAAvB,CAAb;AACA,gBAAIiB,QAAQvU,EAAE6T,iBAAF,CAAoB,IAApB,EAA0BO,SAA1B,EAAqCpU,EAAE6T,iBAAF,CAAoB,IAApB,EAA0BQ,aAA1B,EAAyCb,MAAzC,CAArC,CAAZ;AACA,gBAAIgB,WAAWxU,EAAE+S,mBAAF,CAAsB/S,EAAEsU,eAAF,CAAkB,QAAlB,EAA6BL,EAA7B,CAAtB,CAAf;AACA,mBAAOjU,EAAEyU,WAAF,CAAcV,mBAAmBK,SAAnB,GAA+BG,KAA7C,EAAoDC,QAApD,EAA8DL,CAA9D,CAAP;AACD;AACD,iBAAOA,CAAP;AACD,SAfD;AAgBD,OAjBD,MAiBO;AACL;AACA,iCAAUH,8BAAV;AACA3B,YAAIO,aAAJ,CAAkB,CAACxK,IAAIkD,MAAL,EAAa0I,MAAb,EAAqBtB,QAAQnQ,KAA7B,EAAoC,KAAKQ,UAAL,CAAgBE,KAApD,CAAlB,EAA8E,CAAC,CAACqQ,CAAD,EAAIoB,CAAJ,EAAO7B,CAAP,EAAUnK,CAAV,CAAD,KAAkB;AAC9F,mCAAUoL,SAAS9Q,SAAnB;AACA,cAAIiR,KAAKH,KAAKhB,SAAL,CAAe,CAACQ,CAAD,EAAIoB,CAAJ,CAAf,CAAT;AACA,iBAAO1U,EAAE+S,mBAAF,CAAsB/S,EAAEgT,oBAAF,CAAuB,GAAvB,EAA6BiB,EAA7B,EAAuCpB,CAAvC,CAAtB,CAAP;AACD,SAJD;AAKD;AACF,KAzCD;AA0CD;;AAED8B,iBAAeC,YAAf,EAAsCvF,iBAAtC,EAA2E;AACzE,QAAIjP,SAASL,wBAAwB,IAAxB,CAAb;;AAEAK,WAAOA,MAAP,GAAgBiP,kBAAkBjP,MAAlC;;AAEAA,WAAOC,SAAP,GAAmB,iBAAKwU,iBAAL,CACjB,IADiB,EAEjBD,aAAavU,SAAb,IAA0BD,OAAOC,SAFhB,EAGjBgP,kBAAkBhP,SAHD,CAAnB;;AAMA,QAAIuU,aAAanU,gBAAjB,EAAmC;AACjCmU,mBAAanU,gBAAb,CAA8BmI,OAA9B,CAAsC,CAAC4J,GAAD,EAAMpK,GAAN,EAAWgK,CAAX,KAAiBhS,OAAOK,gBAAP,CAAwB0L,GAAxB,CAA4B/D,GAA5B,EAAiCoK,GAAjC,CAAvD;AACD;AACDnD,sBAAkB5O,gBAAlB,CAAmCmI,OAAnC,CAA2C,CAAC4J,GAAD,EAAMpK,GAAN,EAAWgK,CAAX,KAAiBhS,OAAOK,gBAAP,CAAwB0L,GAAxB,CAA4B/D,GAA5B,EAAiCoK,GAAjC,CAA5D;;AAEA,QAAIoC,aAAalU,kBAAjB,EAAqC;AACnCkU,mBAAalU,kBAAb,CAAgCkI,OAAhC,CAAwC,CAACsJ,IAAD,EAAOC,eAAP,EAAwBC,CAAxB,KACtChS,OAAOM,kBAAP,CAA0ByL,GAA1B,CAA8BgG,eAA9B,EAA+CD,IAA/C,CADF;AAGD;AACD7C,sBAAkB3O,kBAAlB,CAAqCkI,OAArC,CAA6C,CAAC4J,GAAD,EAAMpK,GAAN,EAAWgK,CAAX,KAAiBhS,OAAOM,kBAAP,CAA0ByL,GAA1B,CAA8B/D,GAA9B,EAAmCoK,GAAnC,CAA9D;;AAEA,QAAIoC,aAAapU,cAAjB,EAAiC;AAC/BoU,mBAAapU,cAAb,CAA4BoI,OAA5B,CAAoC,CAACkM,EAAD,EAAKC,CAAL,KAAW3U,OAAOI,cAAP,CAAsBwU,GAAtB,CAA0BF,EAA1B,CAA/C;AACD;AACDzF,sBAAkB7O,cAAlB,CAAiCoI,OAAjC,CAAyC,CAACkM,EAAD,EAAKC,CAAL,KAAW3U,OAAOI,cAAP,CAAsBwU,GAAtB,CAA0BF,EAA1B,CAApD;;AAEA,WAAO1U,MAAP;AACD;;AAED6U,0BAAwBL,YAAxB,EAA+C9J,CAA/C,EAA4E;AAC1E,QAAIA,EAAEb,UAAF,yCAAJ,EAA8C;AAC5Ca,QAAEhB,iBAAF,GAAsB,KAAK6K,cAAL,CAAoBC,YAApB,EAAkC9J,EAAEhB,iBAApC,CAAtB;AACA,UAAIE,YAAYc,EAAEd,SAAlB;AACA,UAAIA,0DAAJ,EAAmD,KAAKiL,uBAAL,CAA6BL,YAA7B,EAA2C5K,SAA3C;AACpD,KAJD,MAIO;AACL,+BAAUc,EAAEd,SAAF,yCAAV;AACAc,QAAEjB,gBAAF,GAAqB,KAAK8K,cAAL,CAAoBC,YAApB,EAAkC9J,EAAEjB,gBAApC,CAArB;AACA,UAAII,aAAaa,EAAEb,UAAnB;AACA,UAAIA,2DAAJ,EAAoD,KAAKgL,uBAAL,CAA6BL,YAA7B,EAA2C3K,UAA3C;AACrD;AACF;;AAEDiL,sBAAoBtL,UAApB,EAA0D;AACxD,QAAI,KAAKQ,eAAL,KAAyBpH,SAA7B,EAAwC;AACtC,UAAI4G,WAAWK,UAAX,yCAAJ,EAAuD;AACrDL,mBAAWI,SAAX,GAAuB,KAAKI,eAA5B;AACD,OAFD,MAEO;AACLR,mBAAWK,UAAX,GAAwB,KAAKG,eAA7B;AACD;AACDR,iBAAWG,YAAX,GAA0B,KAAKK,eAAL,CAAqBL,YAA/C;AACD,KAPD,MAOO;AACL,WAAKoL,cAAL,CAAoBvL,UAApB;AACD;AACD,SAAKQ,eAAL,GAAuBR,UAAvB;AACD;;AAED2G,6BAA2B3G,UAA3B,EAAwE;AACtE,QAAI,KAAKQ,eAAL,KAAyBpH,SAA7B,EAAwC;AACtC,WAAKoH,eAAL,GAAuBR,UAAvB;AACA,WAAKQ,eAAL,CAAqBgL,mBAArB,GAA2C,KAAK3P,cAAhD;AACA,WAAKA,cAAL,GAAsB,GAAG4P,MAAH,CAAU,KAAK5P,cAAf,CAAtB;AACA,WAAK0P,cAAL,CAAoBvL,UAApB;AACD,KALD,MAKO;AACL,UAAIQ,kBAAkB,KAAKA,eAA3B;AACA,UAAI1B,IAAI,KAAK4G,kBAAL,CAAwBlF,eAAxB,CAAR;AACA,+BAAU1B,MAAM1F,SAAhB;AACA,WAAKuM,+BAAL,CAAqCnF,eAArC;AACAA,wBAAkB,iBAAKkL,gCAAL,CAAsC,IAAtC,EAA4ClL,eAA5C,EAA6DR,UAA7D,EAAyElB,CAAzE,CAAlB;AACA,WAAKwF,YAAL,CAAkBxF,CAAlB;AACA,WAAKyM,cAAL,CAAoB/K,eAApB;AACA,WAAKA,eAAL,GAAuBA,eAAvB;AACD;AACDmL,gDAA4C3L,UAA5C;AACA,WAAOA,WAAWrH,KAAlB;;AAEA,aAASgT,2CAAT,CAAqDzK,CAArD,EAAkF;AAChF,UAAIA,EAAEb,UAAF,yCAAJ,EAA8C;AAC5C,yBAAKuL,oBAAL,CAA0B1K,EAAE2K,aAA5B;AACA,YAAI3K,EAAEd,SAAF,iDAAJ,EAAqDuL,4CAA4CzK,EAAEd,SAA9C;AACtD,OAHD,MAGO,IAAIc,EAAEd,SAAF,yCAAJ,EAA6C;AAClD,yBAAK0L,aAAL,CAAmB5K,EAAE2K,aAArB;AACA,YAAI3K,EAAEb,UAAF,iDAAJ,EAAsDsL,4CAA4CzK,EAAEb,UAA9C;AACvD;AACF;AACF;;AAED0L,kCAAgCC,eAAhC,EAAkF;AAChF,QAAIA,oBAAoB5S,SAAxB,EAAmC;AACnC;AACA,6BAAU4S,gBAAgB7L,YAAhB,KAAiC/G,SAA3C;AACA,QAAI,KAAKoH,eAAL,KAAyBpH,SAA7B,EAAwC;AACtC;AACA;AACA;AACA;AACA;AACA,+BAAU,KAAKvC,gBAAL,KAA0BuC,SAApC;AACA,WAAKoH,eAAL,GAAuBwL,eAAvB;AACD,KARD,MAQO;AACL,UAAI7L,eAAe,KAAKK,eAAL,CAAqBL,YAAxC;AACA,+BAAUA,iBAAiB/G,SAA3B;AACA,WAAKmL,eAAL,CAAqBpE,aAAatJ,gBAAlC;AACA,WAAK2N,iBAAL,CAAuBrE,aAAarJ,kBAApC;AACA,uBAAK8O,mDAAL,CAAyD,IAAzD,EAA+DoG,eAA/D,EAAgF7L,YAAhF;AACA,WAAKoE,eAAL,CAAqBpE,aAAatJ,gBAAlC;AACA,WAAK2N,iBAAL,CAAuBrE,aAAarJ,kBAApC;AACA,+BAAU,KAAK0J,eAAL,KAAyBpH,SAAnC;AACA,WAAKoH,eAAL,CAAqBL,YAArB,GAAoC/G,SAApC;AACA,WAAKoH,eAAL,GAAuB,iBAAKkL,gCAAL,CAAsC,IAAtC,EAA4CM,eAA5C,EAA6D,KAAKxL,eAAlE,CAAvB;AACD;AACF;;AAED+K,iBAAevL,UAAf,EAAqD;AACnD,6BAAUA,WAAWG,YAAX,KAA4B/G,SAAtC;AACA4G,eAAWG,YAAX,GAA0B,IAAI7J,OAAJ,CACxB,KAAK6C,UAAL,CAAgBC,SADQ,EAEvB,KAAK3C,SAFkB,EAGvB,KAAKI,gBAHkB,EAIvB,KAAKC,kBAJkB,EAKvB,KAAKF,cALkB,CAA1B;AAOA,SAAKH,SAAL,GAAiB,yBAAc,IAAd,EAAoB,UAApB,CAAjB;AACA,SAAKI,gBAAL,GAAwB,IAAIyC,GAAJ,EAAxB;AACA,SAAKxC,kBAAL,GAA0B,IAAIwC,GAAJ,EAA1B;AACA,SAAK1C,cAAL,GAAsB,IAAI2C,GAAJ,EAAtB;AACD;;AAEDmM,qBAAmB1F,UAAnB,EAAyDiJ,CAAzD,EAAoF;AAClF,QAAIjJ,WAAWG,YAAX,KAA4B/G,SAAhC,EAA2C,OAAOA,SAAP;AAC3C,QAAI6P,MAAM7P,SAAV,EAAqB6P,IAAI,KAAK9P,UAAL,CAAgBC,SAApB;AACrB,6BAAU,KAAK3C,SAAL,KAAmB2C,SAA7B;AACA,6BAAU,KAAKvC,gBAAL,KAA0BuC,SAApC;AACA,6BAAU,KAAKtC,kBAAL,KAA4BsC,SAAtC;AACA,6BAAU,KAAKxC,cAAL,KAAwBwC,SAAlC;AACA,WAAO,IAAI9C,OAAJ,CAAY2S,CAAZ,EAAe,KAAKxS,SAApB,EAA+B,KAAKI,gBAApC,EAAsD,KAAKC,kBAA3D,EAA+E,KAAKF,cAApF,CAAP;AACD;;AAEDqV,oBAAkBjM,UAAlB,EAAwD;AACtD,QAAIlB,IAAI,KAAK4G,kBAAL,CAAwB1F,UAAxB,CAAR;AACA,QAAIlB,MAAM1F,SAAV,EAAqB;AACnB,WAAKuM,+BAAL,CAAqC3F,UAArC;AACA,WAAKsE,YAAL,CAAkBxF,CAAlB;AACD;AACF;;AAED6G,kCAAgC3F,UAAhC,EAAsE;AACpE;AACA,SAAKuE,eAAL,CAAqB,KAAK1N,gBAA1B;AACA,SAAK2N,iBAAL,CAAuB,KAAK1N,kBAA5B;;AAEA;AACA,QAAIkJ,WAAWG,YAAX,KAA4B/G,SAAhC,EAA2C;AACzC,YAAM+G,eAAeH,WAAWG,YAAhC;AACAH,iBAAWG,YAAX,GAA0B/G,SAA1B;AACA,WAAK3C,SAAL,GAAiB0J,aAAa1J,SAA9B;AACA,WAAKI,gBAAL,GAAwBsJ,aAAatJ,gBAArC;AACA,WAAKC,kBAAL,GAA0BqJ,aAAarJ,kBAAvC;AACA,WAAKF,cAAL,GAAsBuJ,aAAavJ,cAAnC;AACD,KAPD,MAOO;AACL,+BAAU,KAAV;AACD;AACF;;AAED;AACA0N,eAAajN,OAAb,EAA+B6U,iBAAyB,EAAxD,EAA4DC,kBAA2B,IAAvF,EAA6F;AAC3F,6BACE9U,QAAQN,YADV,EAEE,kGAFF;AAIAM,YAAQN,YAAR,GAAuB,KAAvB;AACA,QAAI,EAAEN,SAAF,EAAaI,gBAAb,EAA+BC,kBAA/B,EAAmDF,cAAnD,KAAsES,OAA1E;;AAEA;AACA,QAAI8U,eAAJ,EAAqB,KAAKA,eAAL,CAAqB1V,SAArB,EAAgCyV,cAAhC;;AAErB;AACA,SAAK3H,eAAL,CAAqB1N,gBAArB;AACA,SAAK2N,iBAAL,CAAuB1N,kBAAvB;;AAEA;AACA,QAAIsV,wBAAwB,KAAKvV,gBAAjC;AACA,QAAIuV,0BAA0BhT,SAA9B,EAAyC;AACvCvC,uBAAiBmI,OAAjB,CAAyB,CAAC4J,GAAD,EAAMpK,GAAN,EAAWgK,CAAX,KAAiB;AACxC,iCAAU4D,0BAA0BhT,SAApC;AACA,YAAI,CAACgT,sBAAsB7L,GAAtB,CAA0B/B,GAA1B,CAAL,EAAqC;AACnC4N,gCAAsB7J,GAAtB,CAA0B/D,GAA1B,EAA+BoK,GAA/B;AACD;AACF,OALD;AAMD;AACD,QAAIyD,0BAA0B,KAAKvV,kBAAnC;AACA,QAAIuV,4BAA4BjT,SAAhC,EAA2C;AACzCtC,yBAAmBkI,OAAnB,CAA2B,CAACsJ,IAAD,EAAOC,eAAP,EAAwBC,CAAxB,KAA8B;AACvD,iCAAU6D,4BAA4BjT,SAAtC;AACA,YAAI,CAACiT,wBAAwB9L,GAAxB,CAA4BgI,eAA5B,CAAL,EAAmD;AACjD8D,kCAAwB9J,GAAxB,CAA4BgG,eAA5B,EAA6CD,IAA7C;AACD;AACF,OALD;AAMD;;AAED;AACA,QAAI1R,eAAe4L,IAAf,GAAsB,CAA1B,EAA6B;AAC3B,UAAI8J,sBAAsB,KAAK1V,cAA/B;AACA,UAAI0V,wBAAwBlT,SAA5B,EAAuC,KAAKxC,cAAL,GAAsB,IAAI2C,GAAJ,CAAQ3C,cAAR,CAAtB,CAAvC,KACK;AACHA,uBAAeoI,OAAf,CAAuB,CAACkM,EAAD,EAAKC,CAAL,KAAW;AAChC,mCAAUmB,wBAAwBlT,SAAlC;AACAkT,8BAAoBlB,GAApB,CAAwBF,EAAxB;AACD,SAHD;AAID;AACF;AACF;;AAEDqB,kBAAgBC,MAAhB,EAA4ChD,IAA5C,EAAuF;AACrF,QAAI,KAAK3Q,UAAT,EAAqB;AACnB;AACA,YAAM,uBAAe,oDAAf,CAAN;AACD;AACD,QAAI,KAAKqB,yBAAT,EAAoC;AAClC,+BAAU,KAAKzD,SAAL,KAAmB2C,SAA7B;AACA,WAAK3C,SAAL,CAAegW,cAAf,CAA8BD,MAA9B,EAAsChD,IAAtC;AACD,KAHD,MAGO;AACL;AACAkD,cAAQF,MAAR,EAAgBG,UAAU,IAAV,EAAgBnD,IAAhB,CAAhB;AACD;;AAED,aAASmD,SAAT,CAAmBlU,KAAnB,EAAiCgP,MAAjC,EAAwE;AACtE,UAAImF,MAAM,EAAV;AACA,aAAOnF,OAAOjI,MAAd,EAAsB;AACpB,YAAIqN,OAAOpF,OAAOqF,KAAP,EAAX;AACA,YAAIC,aAAa,eAAGC,QAAH,CAAYvU,KAAZ,EAAmBoU,IAAnB,CAAjB;AACAD,eAAOG,UAAP;AACD;AACD,aAAOH,GAAP;AACD;AACF;;AAED;AACA;AACAK,wBAAsBjL,OAAtB,EAAwCrJ,KAAxC,EAAgE;AAC9D,UAAMuU,wBAAwBC,QAAQ;AACpC,UAAInV,UAAU,KAAKyH,iBAAL,EAAd;AACA,UAAI,EAAEzG,oBAAoB+K,GAAtB,EAA2B1L,UAAU+L,IAArC,KAA8CpM,OAAlD;;AAEA,+BAAUoM,oCAAV;AACA,UAAI+I,0DAA6C/I,SAAS+I,KAAKpM,eAA/D,EAAgF;AAC9E,eAAO,IAAP;AACD;AACD,UAAI,KAAKoC,6BAAL,KAAuC/J,SAAvC,IAAoD,CAAC,KAAK+J,6BAAL,CAAmC5C,GAAnC,CAAuC6D,IAAvC,CAAzD,EAAuG;AACrG,eAAO,KAAP;AACD;AACDL,YAAMA,IAAIqJ,MAAV;AACA,aAAOrJ,GAAP,EAAY;AACV,YAAIA,IAAIhL,iBAAJ,KAA0BoU,IAA9B,EAAoC;AAClC,iBAAO,IAAP;AACD;AACDpJ,cAAMA,IAAIqJ,MAAV;AACD;AACD,aAAO,KAAP;AACD,KAnBD;;AAqBA,QACE,KAAKvW,gBAAL,KAA0BuC,SAA1B,IACA,CAAC,KAAKvC,gBAAL,CAAsB0J,GAAtB,CAA0ByB,OAA1B,CADD,IAEArJ,UAAUS,SAFV,IAGA,KAAKkK,aAAL,EAHA,IAIA,KAAKD,wBAAL,KAAkCjK,SALpC,EAME;AACA,UAAI2K,MAAM/B,QAAQlB,WAAlB;;AAEA,UACE,EAAEiD,wDAAF,KACCA,4DAA+C,CAACmJ,sBAAsBnJ,GAAtB,CAFnD,EAGE;AACA,aAAKV,wBAAL,CAA8B,kBAA9B,EAAkDrB,OAAlD,EAA2DrJ,MAAM0U,kBAAjE;AACD;AACF;;AAED,QAAIrL,QAAQlB,WAAR,CAAoBjI,UAAxB,EAAoC;AAClC;AACA,YAAM,uBAAe,+CAAf,CAAN;AACD;;AAED,QAAI,KAAKhC,gBAAL,KAA0BuC,SAA1B,IAAuC,CAAC,KAAKvC,gBAAL,CAAsB0J,GAAtB,CAA0ByB,OAA1B,CAA5C,EAAgF;AAC9E,WAAKnL,gBAAL,CAAsB0L,GAAtB,CAA0BP,OAA1B,EAAmC;AACjCsL,mBAAWtL,QAAQsL,SADc;AAEjC3U,eAAOqJ,QAAQrJ;AAFkB,OAAnC;AAID;AACD,WAAOqJ,OAAP;AACD;;AAEDuL,mCAAiCrC,EAAjC,EAAwD;AACtD,QAAI,KAAKsC,4BAAL,KAAsCpU,SAA1C,EAAqD;AACnD,WAAKoU,4BAAL,CAAkCtC,EAAlC;AACD;AACF;;AAEDuC,2BAAyBzL,OAAzB,EAAyD;AACvD,QAAI,KAAK0L,oBAAL,KAA8BtU,SAAlC,EAA6C;AAC3C,WAAKsU,oBAAL,CAA0B1L,OAA1B;AACD;AACF;;AAED;AACA;AACA2L,yBAAuB3L,OAAvB,EAA8D;AAC5D,QAAIA,YAAY5I,SAAhB,EAA2B;AAC3B,QAAI,KAAKkK,aAAL,EAAJ,EAA0B;AACxB,UAAI5B,SAASM,QAAQN,MAArB;AACA,+BAAUA,oCAAV;AACA,YAAMyB,gCAAgC,KAAKA,6BAA3C;;AAEA,UAAIA,kCAAkC/J,SAAlC,IAA+C,CAAC+J,8BAA8B5C,GAA9B,CAAkCmB,MAAlC,CAApD,EAA+F;AAC7F,YAAIM,QAAQN,MAAR,KAAmB,KAAKzF,aAA5B,EAA2C;AACzC,eAAKoH,wBAAL,IACE,KAAKA,wBAAL,CAA8B,iBAA9B,EAAiDrB,OAAjD,EAA0DN,OAAO2L,kBAAjE,CADF;AAED,SAHD,MAGO;AACL,eAAKhK,wBAAL,IACE,KAAKA,wBAAL,CAA8B,mBAA9B,EAAmDrB,OAAnD,EAA4DN,OAAO2L,kBAAnE,CADF;AAED;AACF;AACF;AACD,QAAI,KAAKxU,UAAL,KAAoB,KAAK4G,iBAAL,GAAyB5G,UAAzB,IAAuC,CAAC,KAAK+U,WAAL,CAAiB5L,QAAQN,MAAzB,CAA5D,CAAJ,EAAmG;AACjG;AACA,YAAM,uBAAe,gDAAf,CAAN;AACD;AACD,SAAK+L,wBAAL,CAA8BzL,OAA9B;AACA,QAAI,KAAKlL,kBAAL,KAA4BsC,SAA5B,IAAyC,CAAC,KAAKtC,kBAAL,CAAwByJ,GAAxB,CAA4ByB,OAA5B,CAA9C,EAAoF;AAClF,WAAKlL,kBAAL,CAAwByL,GAAxB,CAA4BP,OAA5B,EAAqC,6BAAgBA,QAAQI,UAAxB,CAArC;AACD;AACF;;AAEDwL,cAAYlM,MAAZ,EAAgE;AAC9D,QAAIA,4CAAJ,EAA2C,OAAO,KAAP;AAC3C,WAAO,KAAK9K,cAAL,KAAwBwC,SAAxB,IAAqC,KAAKxC,cAAL,CAAoB2J,GAApB,CAAwBmB,MAAxB,CAA5C;AACD;;AAEDmM,kBAAgBnM,MAAhB,EAA2C;AACzC,QAAI,KAAK9K,cAAL,KAAwBwC,SAA5B,EAAuC;AACrC,WAAKxC,cAAL,CAAoBwU,GAApB,CAAwB1J,MAAxB;AACD;AACD,QAAI,KAAKyB,6BAAL,KAAuC/J,SAA3C,EAAsD;AACpD,WAAK+J,6BAAL,CAAmCiI,GAAnC,CAAuC1J,MAAvC;AACD;AACF;;AAED;AACA;AACAwD,4BAAsE;AACpE,QAAI1O,SAAS,CAAC,KAAKK,gBAAN,EAAwB,KAAKC,kBAA7B,CAAb;AACA,SAAKD,gBAAL,GAAwB,IAAIyC,GAAJ,EAAxB;AACA,SAAKxC,kBAAL,GAA0B,IAAIwC,GAAJ,EAA1B;AACA,WAAO9C,MAAP;AACD;;AAED;AACA;AACA;AACA+N,kBAAgB1N,gBAAhB,EAAmD;AACjD,QAAIA,qBAAqBuC,SAAzB,EAAoC;AACpCvC,qBAAiBmI,OAAjB,CAAyB,CAAC,EAAEsO,SAAF,EAAa3U,KAAb,EAAD,EAAuBqJ,OAAvB,EAAgCwG,CAAhC,KAAsC;AAC7D,UAAIsF,IAAI9L,QAAQsL,SAAhB;AACA,UAAIrE,IAAIjH,QAAQrJ,KAAhB;AACAqJ,cAAQsL,SAAR,GAAoBA,SAApB;AACAtL,cAAQrJ,KAAR,GAAgBA,KAAhB;AACA6P,QAAEjG,GAAF,CAAMP,OAAN,EAAe;AACbsL,mBAAWQ,CADE;AAEbnV,eAAOsQ;AAFM,OAAf;AAID,KATD;AAUD;;AAED;AACA;AACA;AACAzE,oBAAkB1N,kBAAlB,EAA+D;AAC7D,QAAIA,uBAAuBsC,SAA3B,EAAsC;AACtCtC,uBAAmBkI,OAAnB,CAA2B,CAACsJ,IAAD,EAAOC,eAAP,EAAwBC,CAAxB,KAA8B;AACvD,UAAInC,IAAIkC,gBAAgBnG,UAAxB;AACAmG,sBAAgBnG,UAAhB,GAA6BkG,IAA7B;AACAE,QAAEjG,GAAF,CAAMgG,eAAN,EAAuBlC,CAAvB;AACD,KAJD;AAKD;;AAED;AACA;AACA0H,kBAAgBlX,gBAAhB,EAAmDC,kBAAnD,EAAgG;AAC9F,SAAKD,gBAAL,GAAwBA,gBAAxB;AACA,SAAKC,kBAAL,GAA0BA,kBAA1B;AACD;;AAEDkX,wBAAsBtM,MAAtB,EAAqClD,GAArC,EAAkDyP,aAAlD,EAAwE/D,IAAxE,EAAsF;AACpF,QAAI,EAAE+D,6CAAF,CAAJ,EAA+C;AAC/C,QAAIA,cAAcC,IAAd,KAAuB,uBAA3B,EAAoD;AAClD,UAAIC,SAASF,cAAczE,IAAd,CAAmB4E,IAAnB,CAAwBtP,KAAKA,iCAA7B,CAAb;AACA,+BAAUqP,sCAAV;AACAF,sBAAgBE,MAAhB;AACD;AACD,QAAI,CAACF,cAAcI,WAAd,EAAL,EAAkC;AAChCJ,oBAAcpM,aAAd,GAA+B,GAAEqI,IAAK,IAAG1L,GAAI,EAA7C;AACAyP,oBAAcC,IAAd,GAAqB,iBAArB;AACAD,oBAAczE,IAAd,GAAqB,CAAC9H,MAAD,CAArB;AACAuM,oBAAcpF,UAAd,GAA2B,CAAC,CAACnE,IAAD,CAAD,KAAYtO,EAAEkY,gBAAF,CAAmB5J,IAAnB,EAAyBtO,EAAEkU,UAAF,CAAa9L,GAAb,CAAzB,CAAvC;AACA,WAAK+P,uBAAL,CAA6BN,aAA7B,EAA4CA,cAAcpM,aAA1D;AACD;AACF;;AAED0M,0BAAwBC,aAAxB,EAAuEtE,IAAvE,EAAqF;AACnF,QAAI,EAAEsE,mDAAF,CAAJ,EAAqD;AACrD,QAAIA,cAAc/G,MAAd,CAAqBgH,KAArB,EAAJ,EAAkC;AAClC,QAAIC,WAAWF,cAAcG,WAAd,EAAf;AACA,6BAAU,CAACD,SAAS7M,aAAV,IAA2B6M,SAAS7M,aAAT,KAA2BqI,IAAhE;AACAwE,aAAS7M,aAAT,GAAyBqI,IAAzB;AACAwE,aAASE,sBAAT,GAAkC,IAAlC;AACA,SAAK,IAAI,CAACpQ,GAAD,EAAMwD,OAAN,CAAT,IAA2B0M,SAASzM,UAApC,EAAgD;AAC9C,UAAID,YAAY5I,SAAZ,IAAyB4I,QAAQI,UAAR,KAAuBhJ,SAApD,EAA+D,SADjB,CAC2B;AACzE,+BAAU4I,QAAQI,UAAR,KAAuBhJ,SAAjC;AACA,UAAIT,QAAQqJ,QAAQI,UAAR,CAAmBzJ,KAA/B;AACA,6BAAWkW,2BAAX,CAAuClW,KAAvC;AACA,UAAIA,UAAUS,SAAd,EAAyB;AACvB,6BAAc0V,wBAAd,CAAuCN,aAAvC,EAAsDhQ,GAAtD;AACA,cAAM,wBAAN;AACD;AACD,+BAAU7F,6BAAV;AACA,WAAKqV,qBAAL,CAA2BQ,aAA3B,EAA0ChQ,GAA1C,EAA+C7F,KAA/C,EAAsDuR,IAAtD;AACD;AACF;;AAED6E,2BAA2C;AACzC,QAAI/W,UAAU,IAAIF,gBAAJ,EAAd;;AAEA,QAAIS,MAAM,KAAKyW,mBAAf;AACA,QAAIzW,GAAJ,EAAS;AACPP,cAAQM,WAAR,CAAoBC,GAApB;AACA,WAAKyW,mBAAL,GAA2B,IAA3B;AACD;;AAED,WAAOhX,OAAP;AACD;;AAEDiX,kCAAgC1W,GAAhC,EAA+D;AAC7D,QAAI,CAACA,GAAL,EAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,SAAKyW,mBAAL,GAA2BzW,GAA3B;AACA;AACD;;AAEDuW,2BAAyBI,OAAzB,EAAgE;AAC9D,QAAIA,YAAY9V,SAAhB,EAA2B8V,UAAU,EAAV;AAC3B,QAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiCA,UAAU,uBAAgB,IAAhB,EAAsBA,OAAtB,CAAV;AACjC,6BAAUA,qCAAV;AACA,SAAKF,mBAAL,GAA2B,KAAK3P,eAAhC;AACA,QAAID,QAAQ,+BAAuB8P,QAAQvW,KAA/B,EAAsC,KAAK0G,eAA3C,EAA4D,QAA5D,EAAsE,YAAtE,CAAZ;AACA,SAAKC,WAAL,CAAiBF,KAAjB;AACD;;AAED+P,6BAA2BC,IAA3B,EAAsDF,OAAtD,EAA8G;AAC5G,6BAAUE,SAAS,KAAKjW,UAAL,CAAgBkW,oBAAnC;AACA,QAAIH,YAAY9V,SAAhB,EAA2B8V,UAAU,EAAV;AAC3B,QAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiCA,UAAU,uBAAgB,IAAhB,EAAsBA,OAAtB,CAAV;AACjC,6BAAUA,qCAAV;AACA,SAAKF,mBAAL,GAA2B,KAAK3P,eAAhC;AACA,WAAO,iCAAoB,IAApB,EAA0B,uBAAU,IAAV,EAAgB+P,IAAhB,EAAsB,CAACF,OAAD,CAAtB,CAA1B,EAA4D,KAAK7P,eAAjE,CAAP;AACD;;AAED8M,kBAAgB1V,SAAhB,EAAsCyV,iBAAyB,EAA/D,EAAyE;AACvE,QAAIoD,iBAAiB,KAAK7Y,SAA1B;AACA,QAAI6Y,mBAAmBlW,SAAvB,EAAkC;AAChC,+BAAU3C,UAAU4C,KAAV,EAAV;AACA;AACD;AACDiW,mBAAenD,eAAf,CAA+B1V,SAA/B,EAA0CyV,cAA1C;AACD;;AAED;AACA;AACA;AACA;AACAqD,qCACEvE,YADF,EAEEhI,CAFF,EAGEgB,aAHF,EAIW;AACT,WAAO,KAAKC,kBAAL,CACL,MAAM;AACJ,WAAK,IAAIuL,WAAT,IAAwBxE,YAAxB,EAAsC,KAAK1G,YAAL,CAAkBkL,WAAlB;AACtC,UAAI;AACF,eAAOxM,GAAP;AACD,OAFD,SAEU;AACR,aAAK,IAAIwM,WAAT,IAAwBxE,YAAxB,EAAsC;AACpC,mCAAU,CAACwE,YAAYzY,YAAvB;AACAyY,sBAAYzY,YAAZ,GAA2B,IAA3B;AACD;AACF;AACF,KAXI,EAYLqC,SAZK,EAaL4K,aAbK,CAAP;AAeD;;AAED;AACA;AACA1E,cAAYmH,UAAZ,EAAgE;AAC9D,QAAI,CAACA,WAAWgJ,SAAZ,IAAyB,KAAK9V,YAAL,CAAkB6F,MAAlB,GAA2B,CAAxD,EAA2D;AACzD,UAAIJ,QAAQ,uBAAU,IAAV,EAAgB,KAAKjG,UAAL,CAAgBuW,KAAhC,CAAZ;AACA,UAAIC,QAAQvQ,MAAMwQ,yBAAN,CAAgC,OAAhC,CAAZ;AACA,UAAID,mCAAJ,EAAkClJ,WAAWgJ,SAAX,GAAuBE,MAAMhX,KAA7B;AACnC;AACD;AACA,QAAIsF,eAAe,KAAKA,YAAxB;AACA,QAAI,CAACA,YAAL,EAAmB;AACjB,UAAI4R,MAAO,GAAEpJ,WAAWqJ,SAAU,KAAIrJ,WAAWyI,OAAQ,EAAzD;AACA,UAAIzI,WAAWsJ,QAAf,EAAyB;AACvB,YAAIC,YAAYvJ,WAAWsJ,QAAX,CAAoB9U,KAApC;AACA,YAAIgV,UAAUxJ,WAAWsJ,QAAX,CAAoBG,GAAlC;AACAL,eAAQ,OAAMG,UAAUG,IAAK,IAAGH,UAAUI,MAAO,OAAMH,QAAQE,IAAK,IAAGF,QAAQG,MAAO,EAAtF;AACD;AACD,UAAI;AACF,gBAAQ3J,WAAWH,QAAnB;AACE,eAAK,aAAL;AACEoG,oBAAQ2D,GAAR,CAAa,SAAQR,GAAI,EAAzB;AACA,mBAAO,SAAP;AACF,eAAK,SAAL;AACEnD,oBAAQ4D,IAAR,CAAc,SAAQT,GAAI,EAA1B;AACA,mBAAO,SAAP;AACF,eAAK,kBAAL;AACEnD,oBAAQtN,KAAR,CAAe,UAASyQ,GAAI,EAA5B;AACA,mBAAO,MAAP;AACF,eAAK,YAAL;AACEnD,oBAAQtN,KAAR,CAAe,gBAAeyQ,GAAI,EAAlC;AACA,mBAAO,MAAP;AACF;AACE,qCAAU,KAAV,EAAiB,uBAAjB;AAdJ;AAgBD,OAjBD,SAiBU;AACRnD,gBAAQ2D,GAAR,CAAY5J,WAAWgJ,SAAvB;AACD;AACF;AACD,WAAOxR,aAAawI,UAAb,CAAP;AACD;;AAED8J,iBAAeC,UAAf,EAAyC;AACvC,SAAKpS,sBAAL,CAA4BgN,GAA5B,CAAgCoF,UAAhC;AACD;;AAEDC,qBAAmBD,UAAnB,EAAgD;AAC9C,WAAO,CAAC,KAAKpS,sBAAL,CAA4BmC,GAA5B,CAAgCiQ,UAAhC,CAAR;AACD;AA58CgB;QAANhX,K,GAAAA,K","file":"realm.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type {\n  ClassComponentMetadata,\n  ConsoleMethodTypes,\n  DebugServerType,\n  Descriptor,\n  Intrinsics,\n  PropertyBinding,\n  ReactHint,\n} from \"./types.js\";\nimport { RealmStatistics } from \"./statistics.js\";\nimport {\n  CompilerDiagnostic,\n  type ErrorHandlerResult,\n  type ErrorHandler,\n  FatalError,\n  InfeasiblePathError,\n} from \"./errors.js\";\nimport {\n  AbstractObjectValue,\n  AbstractValue,\n  ArrayValue,\n  BoundFunctionValue,\n  ConcreteValue,\n  ECMAScriptSourceFunctionValue,\n  FunctionValue,\n  NativeFunctionValue,\n  ObjectValue,\n  ProxyValue,\n  StringValue,\n  SymbolValue,\n  UndefinedValue,\n  Value,\n} from \"./values/index.js\";\nimport type { TypesDomain, ValuesDomain } from \"./domains/index.js\";\nimport {\n  LexicalEnvironment,\n  Reference,\n  GlobalEnvironmentRecord,\n  FunctionEnvironmentRecord,\n  DeclarativeEnvironmentRecord,\n} from \"./environment.js\";\nimport type { Binding } from \"./environment.js\";\nimport { cloneDescriptor, Construct } from \"./methods/index.js\";\nimport {\n  AbruptCompletion,\n  Completion,\n  JoinedAbruptCompletions,\n  PossiblyNormalCompletion,\n  ThrowCompletion,\n} from \"./completions.js\";\nimport type { Compatibility, RealmOptions, ReactOutputTypes, InvariantModeTypes } from \"./options.js\";\nimport invariant from \"./invariant.js\";\nimport seedrandom from \"seedrandom\";\nimport { Generator, PreludeGenerator } from \"./utils/generator.js\";\nimport { emptyExpression, voidExpression } from \"./utils/internalizer.js\";\nimport { Environment, Functions, Join, Properties, To, Widen, Path } from \"./singletons.js\";\nimport type { ReactSymbolTypes } from \"./react/utils.js\";\nimport type { BabelNode, BabelNodeSourceLocation, BabelNodeLVal, BabelNodeStatement } from \"babel-types\";\nimport * as t from \"babel-types\";\n\nexport type BindingEntry = { hasLeaked: boolean, value: void | Value };\nexport type Bindings = Map<Binding, BindingEntry>;\nexport type EvaluationResult = Completion | Reference | Value;\nexport type PropertyBindings = Map<PropertyBinding, void | Descriptor>;\n\nexport type CreatedObjects = Set<ObjectValue>;\n\nexport type SideEffectType = \"MODIFIED_BINDING\" | \"MODIFIED_PROPERTY\" | \"EXCEPTION_THROWN\" | \"MODIFIED_GLOBAL\";\n\nlet effects_uid = 0;\n\nexport class Effects {\n  constructor(\n    result: EvaluationResult,\n    generator: Generator,\n    bindings: Bindings,\n    propertyBindings: PropertyBindings,\n    createdObjects: CreatedObjects\n  ) {\n    this.result = result;\n    this.generator = generator;\n    this.modifiedBindings = bindings;\n    this.modifiedProperties = propertyBindings;\n    this.createdObjects = createdObjects;\n\n    this.canBeApplied = true;\n    this._id = effects_uid++;\n  }\n\n  result: EvaluationResult;\n  generator: Generator;\n  modifiedBindings: Bindings;\n  modifiedProperties: PropertyBindings;\n  createdObjects: CreatedObjects;\n  canBeApplied: boolean;\n  _id: number;\n}\n\nexport class Tracer {\n  beginEvaluateForEffects(state: any) {}\n  endEvaluateForEffects(state: any, effects: void | Effects) {}\n  detourCall(\n    F: FunctionValue,\n    thisArgument: void | Value,\n    argumentsList: Array<Value>,\n    newTarget: void | ObjectValue,\n    performCall: () => Value\n  ): void | Value {}\n  beforeCall(\n    F: FunctionValue,\n    thisArgument: void | Value,\n    argumentsList: Array<Value>,\n    newTarget: void | ObjectValue\n  ) {}\n  afterCall(\n    F: FunctionValue,\n    thisArgument: void | Value,\n    argumentsList: Array<Value>,\n    newTarget: void | ObjectValue,\n    result: void | Reference | Value | AbruptCompletion\n  ) {}\n}\n\nexport class ExecutionContext {\n  function: ?FunctionValue;\n  caller: ?ExecutionContext;\n  loc: ?BabelNodeSourceLocation;\n  ScriptOrModule: any;\n  realm: Realm;\n  variableEnvironment: LexicalEnvironment;\n  lexicalEnvironment: LexicalEnvironment;\n  isReadOnly: boolean;\n  isStrict: boolean;\n\n  setCaller(context: ExecutionContext): void {\n    this.caller = context;\n  }\n\n  setFunction(F: null | FunctionValue) {\n    if (F instanceof ECMAScriptSourceFunctionValue) this.isStrict = F.$Strict;\n    this.function = F;\n  }\n\n  setLocation(loc: null | BabelNodeSourceLocation) {\n    if (!loc) return;\n    this.loc = loc;\n  }\n\n  setRealm(realm: Realm): void {\n    this.realm = realm;\n  }\n\n  /*\n   Read-only envs disallow:\n   - creating bindings in their scope\n   - creating or modifying objects when they are current running context\n  */\n  setReadOnly(value: boolean): boolean {\n    let oldReadOnly = this.isReadOnly;\n    if (this.variableEnvironment) this.variableEnvironment.environmentRecord.isReadOnly = value;\n    if (this.lexicalEnvironment) this.lexicalEnvironment.environmentRecord.isReadOnly = value;\n    this.isReadOnly = value;\n    return oldReadOnly;\n  }\n\n  suspend(): void {\n    // TODO #712: suspend\n  }\n\n  resume(): Value {\n    // TODO #712: resume\n    return this.realm.intrinsics.undefined;\n  }\n}\n\nexport function construct_empty_effects(realm: Realm): Effects {\n  return new Effects(\n    realm.intrinsics.empty,\n    new Generator(realm, \"construct_empty_effects\"),\n    new Map(),\n    new Map(),\n    new Set()\n  );\n}\n\nexport class Realm {\n  constructor(opts: RealmOptions, statistics: RealmStatistics) {\n    this.statistics = statistics;\n    this.isReadOnly = false;\n    this.useAbstractInterpretation = !!opts.serialize || !!opts.residual || !!opts.check;\n    this.ignoreLeakLogic = false;\n    this.isInPureTryStatement = false;\n    if (opts.mathRandomSeed !== undefined) {\n      this.mathRandomGenerator = seedrandom(opts.mathRandomSeed);\n    }\n    this.strictlyMonotonicDateNow = !!opts.strictlyMonotonicDateNow;\n\n    // 0 = disabled\n    this.abstractValueImpliesMax = opts.abstractValueImpliesMax || 0;\n    this.abstractValueImpliesCounter = 0;\n    this.inSimplificationPath = false;\n\n    this.timeout = opts.timeout;\n    if (this.timeout) {\n      // We'll call Date.now for every this.timeoutCounterThreshold'th AST node.\n      // The threshold is there to reduce the cost of the surprisingly expensive Date.now call.\n      this.timeoutCounter = this.timeoutCounterThreshold = 1024;\n    }\n\n    this.start = Date.now();\n    this.compatibility = opts.compatibility || \"browser\";\n    this.maxStackDepth = opts.maxStackDepth || 225;\n    this.invariantLevel = opts.invariantLevel || 0;\n    this.invariantMode = opts.invariantMode || \"throw\";\n    this.emitConcreteModel = !!opts.emitConcreteModel;\n\n    this.$TemplateMap = [];\n\n    if (this.useAbstractInterpretation) {\n      this.preludeGenerator = new PreludeGenerator(opts.debugNames, opts.uniqueSuffix);\n      this.pathConditions = [];\n      ObjectValue.setupTrackedPropertyAccessors(ObjectValue.trackedPropertyNames);\n      ObjectValue.setupTrackedPropertyAccessors(NativeFunctionValue.trackedPropertyNames);\n      ObjectValue.setupTrackedPropertyAccessors(ProxyValue.trackedPropertyNames);\n    }\n\n    this.tracers = [];\n\n    // These get initialized in construct_realm to avoid the dependency\n    this.intrinsics = ({}: any);\n    this.$GlobalObject = (({}: any): ObjectValue);\n    this.evaluators = (Object.create(null): any);\n    this.partialEvaluators = (Object.create(null): any);\n    this.$GlobalEnv = ((undefined: any): LexicalEnvironment);\n\n    this.react = {\n      abstractHints: new WeakMap(),\n      optimizedNestedClosuresToWrite: [],\n      arrayHints: new WeakMap(),\n      classComponentMetadata: new Map(),\n      currentOwner: undefined,\n      enabled: opts.reactEnabled || false,\n      hoistableFunctions: new WeakMap(),\n      hoistableReactElements: new WeakMap(),\n      noopFunction: undefined,\n      output: opts.reactOutput || \"create-element\",\n      reactElements: new WeakSet(),\n      symbols: new Map(),\n      verbose: opts.reactVerbose || false,\n    };\n\n    this.alreadyDescribedLocations = new WeakMap();\n    this.stripFlow = opts.stripFlow || false;\n\n    this.fbLibraries = {\n      other: new Map(),\n      react: undefined,\n      reactDom: undefined,\n      reactDomServer: undefined,\n      reactRelay: undefined,\n    };\n\n    this.errorHandler = opts.errorHandler;\n\n    this.globalSymbolRegistry = [];\n    this.activeLexicalEnvironments = new Set();\n    this._abstractValuesDefined = new Set(); // A set of nameStrings to ensure abstract values have unique names\n    this.debugNames = opts.debugNames;\n    this._checkedObjectIds = new Map();\n  }\n\n  statistics: RealmStatistics;\n  start: number;\n  isReadOnly: boolean;\n  isStrict: boolean;\n  useAbstractInterpretation: boolean;\n  debugNames: void | boolean;\n  isInPureTryStatement: boolean; // TODO(1264): Remove this once we implement proper exception handling in abstract calls.\n  timeout: void | number;\n  mathRandomGenerator: void | (() => number);\n  strictlyMonotonicDateNow: boolean;\n  maxStackDepth: number;\n  invariantLevel: number;\n  invariantMode: InvariantModeTypes;\n  ignoreLeakLogic: boolean;\n  emitConcreteModel: boolean;\n\n  abstractValueImpliesMax: number;\n  abstractValueImpliesCounter: number;\n  inSimplificationPath: boolean;\n\n  modifiedBindings: void | Bindings;\n  modifiedProperties: void | PropertyBindings;\n  createdObjects: void | CreatedObjects;\n  createdObjectsTrackedForLeaks: void | CreatedObjects;\n  reportObjectGetOwnProperties: void | (ObjectValue => void);\n  reportSideEffectCallback:\n    | void\n    | ((sideEffectType: SideEffectType, binding: void | Binding | PropertyBinding, expressionLocation: any) => void);\n  reportPropertyAccess: void | (PropertyBinding => void);\n  savedCompletion: void | PossiblyNormalCompletion;\n\n  activeLexicalEnvironments: Set<LexicalEnvironment>;\n\n  // A list of abstract conditions that are known to be true in the current execution path.\n  // For example, the abstract condition of an if statement is known to be true inside its true branch.\n  pathConditions: Array<AbstractValue>;\n\n  currentLocation: ?BabelNodeSourceLocation;\n  nextContextLocation: ?BabelNodeSourceLocation;\n  contextStack: Array<ExecutionContext> = [];\n  $GlobalEnv: LexicalEnvironment;\n  intrinsics: Intrinsics;\n\n  react: {\n    // reactHints are generated to help improve the effeciency of the React reconciler when\n    // operating on a tree of React components. We can use reactHint to mark AbstractValues\n    // with extra data that helps us traverse through the tree that would otherwise not be possible\n    // (for example, when we use Relay's React containers with \"fb-www\" – which are AbstractObjectValues,\n    // we need to know what React component was passed to this AbstractObjectValue so we can visit it next)\n    abstractHints: WeakMap<AbstractValue | ObjectValue, ReactHint>,\n    optimizedNestedClosuresToWrite: Array<{\n      effects: Effects,\n      func: ECMAScriptSourceFunctionValue | BoundFunctionValue,\n    }>,\n    arrayHints: WeakMap<ArrayValue, { func: Value, thisVal: Value }>,\n    classComponentMetadata: Map<ECMAScriptSourceFunctionValue, ClassComponentMetadata>,\n    currentOwner?: ObjectValue,\n    enabled: boolean,\n    hoistableFunctions: WeakMap<FunctionValue, boolean>,\n    hoistableReactElements: WeakMap<ObjectValue, boolean>,\n    noopFunction: void | ECMAScriptSourceFunctionValue,\n    output?: ReactOutputTypes,\n    reactElements: WeakSet<ObjectValue>,\n    symbols: Map<ReactSymbolTypes, SymbolValue>,\n    verbose: boolean,\n  };\n  alreadyDescribedLocations: WeakMap<FunctionValue | BabelNodeSourceLocation, string | void>;\n  stripFlow: boolean;\n\n  fbLibraries: {\n    other: Map<string, AbstractValue>,\n    react: void | ObjectValue,\n    reactDom: void | ObjectValue,\n    reactDomServer: void | ObjectValue,\n    reactRelay: void | ObjectValue,\n  };\n\n  $GlobalObject: ObjectValue | AbstractObjectValue;\n  compatibility: Compatibility;\n\n  $TemplateMap: Array<{ $Strings: Array<string>, $Array: ObjectValue }>;\n\n  generator: void | Generator;\n  preludeGenerator: void | PreludeGenerator;\n  timeoutCounter: number;\n  timeoutCounterThreshold: number;\n  evaluators: {\n    [key: string]: (\n      ast: BabelNode,\n      strictCode: boolean,\n      env: LexicalEnvironment,\n      realm: Realm,\n      metadata?: any\n    ) => Value | Reference,\n  };\n  partialEvaluators: {\n    [key: string]: (\n      ast: BabelNode,\n      strictCode: boolean,\n      env: LexicalEnvironment,\n      realm: Realm,\n      metadata?: any\n    ) => [Completion | Reference | Value, BabelNode, Array<BabelNodeStatement>],\n  };\n  simplifyAndRefineAbstractValue: AbstractValue => Value;\n  simplifyAndRefineAbstractCondition: AbstractValue => Value;\n\n  tracers: Array<Tracer>;\n\n  MOBILE_JSC_VERSION = \"jsc-600-1-4-17\";\n\n  errorHandler: ?ErrorHandler;\n  suppressDiagnostics = false;\n  objectCount = 0;\n  symbolCount = 867501803871088;\n  // Unique tag for identifying function body ast node. It is neeeded\n  // instead of ast node itself because we may perform ast tree deep clone\n  // during serialization which changes the ast identity.\n  functionBodyUniqueTagSeed = 1;\n\n  globalSymbolRegistry: Array<{ $Key: string, $Symbol: SymbolValue }>;\n\n  debuggerInstance: DebugServerType | void;\n\n  nextGeneratorId: number = 0;\n  _abstractValuesDefined: Set<string>;\n  _checkedObjectIds: Map<ObjectValue | AbstractObjectValue, number>;\n\n  // to force flow to type the annotations\n  isCompatibleWith(compatibility: Compatibility): boolean {\n    return compatibility === this.compatibility;\n  }\n\n  // Checks if there is a let binding at global scope with the given name\n  // returning it if so\n  getGlobalLetBinding(key: string): void | Value {\n    let globrec = this.$GlobalEnv.environmentRecord;\n    // GlobalEnv should have a GlobalEnvironmentRecord\n    invariant(globrec instanceof GlobalEnvironmentRecord);\n    let dclrec = globrec.$DeclarativeRecord;\n\n    try {\n      return dclrec.HasBinding(key) ? dclrec.GetBindingValue(key, false) : undefined;\n    } catch (e) {\n      if (e instanceof FatalError) return undefined;\n      throw e;\n    }\n  }\n\n  /*\n   Read only realms disallow:\n   - using console.log\n   - creating bindings in any existing scopes\n   - modifying object properties in any existing scopes\n   Setting a realm read-only sets all contained environments to read-only, but\n   all new environments (e.g. new ExecutionContexts) will be writeable.\n   */\n  setReadOnly(readOnlyValue: boolean) {\n    this.isReadOnly = readOnlyValue;\n    this.$GlobalEnv.environmentRecord.isReadOnly = readOnlyValue;\n    this.contextStack.forEach(ctx => {\n      ctx.setReadOnly(readOnlyValue);\n    });\n  }\n\n  testTimeout() {\n    let timeout = this.timeout;\n    if (timeout && !--this.timeoutCounter) {\n      this.timeoutCounter = this.timeoutCounterThreshold;\n      let total = Date.now() - this.start;\n      if (total > timeout) {\n        let error = new CompilerDiagnostic(\n          `total time has exceeded the timeout time: ${timeout}`,\n          this.currentLocation,\n          \"PP0036\",\n          \"FatalError\"\n        );\n        this.handleError(error);\n        throw new FatalError();\n      }\n    }\n  }\n\n  hasRunningContext(): boolean {\n    return this.contextStack.length !== 0;\n  }\n\n  getRunningContext(): ExecutionContext {\n    let context = this.contextStack[this.contextStack.length - 1];\n    invariant(context, \"There's no running execution context\");\n    return context;\n  }\n\n  clearBlockBindings(modifiedBindings: void | Bindings, environmentRecord: DeclarativeEnvironmentRecord) {\n    if (modifiedBindings === undefined) return;\n    for (let b of modifiedBindings.keys())\n      if (environmentRecord.bindings[b.name] && environmentRecord.bindings[b.name] === b) modifiedBindings.delete(b);\n  }\n\n  clearBlockBindingsFromCompletion(completion: Completion, environmentRecord: DeclarativeEnvironmentRecord) {\n    if (completion instanceof PossiblyNormalCompletion) {\n      this.clearBlockBindings(completion.alternateEffects.modifiedBindings, environmentRecord);\n      this.clearBlockBindings(completion.consequentEffects.modifiedBindings, environmentRecord);\n      if (completion.savedEffects !== undefined)\n        this.clearBlockBindings(completion.savedEffects.modifiedBindings, environmentRecord);\n      if (completion.alternate instanceof Completion)\n        this.clearBlockBindingsFromCompletion(completion.alternate, environmentRecord);\n      if (completion.consequent instanceof Completion)\n        this.clearBlockBindingsFromCompletion(completion.consequent, environmentRecord);\n    } else if (completion instanceof JoinedAbruptCompletions) {\n      this.clearBlockBindings(completion.alternateEffects.modifiedBindings, environmentRecord);\n      this.clearBlockBindings(completion.consequentEffects.modifiedBindings, environmentRecord);\n      if (completion.alternate instanceof Completion)\n        this.clearBlockBindingsFromCompletion(completion.alternate, environmentRecord);\n      if (completion.consequent instanceof Completion)\n        this.clearBlockBindingsFromCompletion(completion.consequent, environmentRecord);\n    }\n  }\n\n  // Call when a scope falls out of scope and should be destroyed.\n  // Clears the Bindings corresponding to the disappearing Scope from ModifiedBindings\n  onDestroyScope(lexicalEnvironment: LexicalEnvironment) {\n    invariant(this.activeLexicalEnvironments.has(lexicalEnvironment));\n    let modifiedBindings = this.modifiedBindings;\n    if (modifiedBindings) {\n      // Don't undo things to global scope because it's needed past its destruction point (for serialization)\n      let environmentRecord = lexicalEnvironment.environmentRecord;\n      if (environmentRecord instanceof DeclarativeEnvironmentRecord) {\n        this.clearBlockBindings(modifiedBindings, environmentRecord);\n        if (this.savedCompletion !== undefined)\n          this.clearBlockBindingsFromCompletion(this.savedCompletion, environmentRecord);\n      }\n    }\n\n    // Ensures if we call onDestroyScope too early, there will be a failure.\n    this.activeLexicalEnvironments.delete(lexicalEnvironment);\n    lexicalEnvironment.destroy();\n  }\n\n  pushContext(context: ExecutionContext): void {\n    if (this.contextStack.length >= this.maxStackDepth) {\n      throw new FatalError(\"Maximum stack depth exceeded\");\n    }\n    this.contextStack.push(context);\n  }\n\n  clearFunctionBindings(modifiedBindings: void | Bindings, funcVal: FunctionValue) {\n    if (modifiedBindings === undefined) return;\n    for (let b of modifiedBindings.keys()) {\n      if (b.environment instanceof FunctionEnvironmentRecord && b.environment.$FunctionObject === funcVal)\n        modifiedBindings.delete(b);\n    }\n  }\n\n  clearFunctionBindingsFromCompletion(completion: Completion, funcVal: FunctionValue) {\n    if (completion instanceof PossiblyNormalCompletion) {\n      this.clearFunctionBindings(completion.alternateEffects.modifiedBindings, funcVal);\n      this.clearFunctionBindings(completion.consequentEffects.modifiedBindings, funcVal);\n      if (completion.savedEffects !== undefined)\n        this.clearFunctionBindings(completion.savedEffects.modifiedBindings, funcVal);\n      if (completion.alternate instanceof Completion)\n        this.clearFunctionBindingsFromCompletion(completion.alternate, funcVal);\n      if (completion.consequent instanceof Completion)\n        this.clearFunctionBindingsFromCompletion(completion.consequent, funcVal);\n    } else if (completion instanceof JoinedAbruptCompletions) {\n      this.clearFunctionBindings(completion.alternateEffects.modifiedBindings, funcVal);\n      this.clearFunctionBindings(completion.consequentEffects.modifiedBindings, funcVal);\n      if (completion.alternate instanceof Completion)\n        this.clearFunctionBindingsFromCompletion(completion.alternate, funcVal);\n      if (completion.consequent instanceof Completion)\n        this.clearFunctionBindingsFromCompletion(completion.consequent, funcVal);\n    }\n  }\n\n  popContext(context: ExecutionContext): void {\n    let funcVal = context.function;\n    if (funcVal) {\n      this.clearFunctionBindings(this.modifiedBindings, funcVal);\n      if (this.savedCompletion !== undefined) this.clearFunctionBindingsFromCompletion(this.savedCompletion, funcVal);\n    }\n    let c = this.contextStack.pop();\n    invariant(c === context);\n  }\n\n  wrapInGlobalEnv<T>(callback: () => T): T {\n    let context = new ExecutionContext();\n    context.isStrict = this.isStrict;\n    context.lexicalEnvironment = this.$GlobalEnv;\n    context.variableEnvironment = this.$GlobalEnv;\n    context.realm = this;\n\n    this.pushContext(context);\n    try {\n      return callback();\n    } finally {\n      this.popContext(context);\n    }\n  }\n\n  assignToGlobal(name: BabelNodeLVal, value: Value) {\n    this.wrapInGlobalEnv(() => this.$GlobalEnv.assignToGlobal(name, value));\n  }\n\n  deleteGlobalBinding(name: string) {\n    this.$GlobalEnv.environmentRecord.DeleteBinding(name);\n  }\n\n  neverCheckProperty(object: ObjectValue | AbstractObjectValue, P: string) {\n    return (\n      P.startsWith(\"__\") ||\n      (object === this.$GlobalObject && P === \"global\") ||\n      (object.intrinsicName !== undefined && object.intrinsicName.startsWith(\"__\"))\n    );\n  }\n\n  _getCheckedBindings(): ObjectValue {\n    let globalObject = this.$GlobalObject;\n    invariant(globalObject instanceof ObjectValue);\n    let binding = globalObject.properties.get(\"__checkedBindings\");\n    invariant(binding !== undefined);\n    let checkedBindingsObject = binding.descriptor && binding.descriptor.value;\n    invariant(checkedBindingsObject instanceof ObjectValue);\n    return checkedBindingsObject;\n  }\n\n  markPropertyAsChecked(object: ObjectValue | AbstractObjectValue, P: string) {\n    invariant(!this.neverCheckProperty(object, P));\n    let objectId = this._checkedObjectIds.get(object);\n    if (objectId === undefined) this._checkedObjectIds.set(object, (objectId = this._checkedObjectIds.size));\n    let id = `__${objectId}:${P}`;\n    let checkedBindings = this._getCheckedBindings();\n    checkedBindings.$Set(id, this.intrinsics.true, checkedBindings);\n  }\n\n  hasBindingBeenChecked(object: ObjectValue | AbstractObjectValue, P: string): void | boolean {\n    if (this.neverCheckProperty(object, P)) return true;\n    let objectId = this._checkedObjectIds.get(object);\n    if (objectId === undefined) return false;\n    let id = `__${objectId}:${P}`;\n    let binding = this._getCheckedBindings().properties.get(id);\n    if (binding === undefined) return false;\n    let value = binding.descriptor && binding.descriptor.value;\n    return value instanceof Value && !value.mightNotBeTrue();\n  }\n\n  // Evaluate a context as if it won't have any side-effects outside of any objects\n  // that it created itself. This promises that any abstract functions inside of it\n  // also won't have effects on any objects or bindings that weren't created in this\n  // call.\n  evaluatePure<T>(\n    f: () => T,\n    reportSideEffectFunc?: (\n      sideEffectType: SideEffectType,\n      binding: void | Binding | PropertyBinding,\n      value: void | Value\n    ) => void\n  ) {\n    let saved_createdObjectsTrackedForLeaks = this.createdObjectsTrackedForLeaks;\n    let saved_reportSideEffectCallback = this.reportSideEffectCallback;\n    // Track all objects (including function closures) created during\n    // this call. This will be used to make the assumption that every\n    // *other* object is unchanged (pure). These objects are marked\n    // as leaked if they're passed to abstract functions.\n    this.createdObjectsTrackedForLeaks = new Set();\n    this.reportSideEffectCallback = reportSideEffectFunc;\n    try {\n      return f();\n    } finally {\n      this.createdObjectsTrackedForLeaks = saved_createdObjectsTrackedForLeaks;\n      this.reportSideEffectCallback = saved_reportSideEffectCallback;\n    }\n  }\n\n  isInPureScope() {\n    return !!this.createdObjectsTrackedForLeaks;\n  }\n\n  evaluateWithoutLeakLogic(f: () => Value): Value {\n    invariant(!this.ignoreLeakLogic, \"Nesting evaluateWithoutLeakLogic() calls is not supported.\");\n    this.ignoreLeakLogic = true;\n    try {\n      return f();\n    } finally {\n      this.ignoreLeakLogic = false;\n    }\n  }\n\n  // Evaluate some code that might generate temporal values knowing that it might end in an abrupt\n  // completion. We only need to support ThrowCompletion for now but this can be expanded to support other\n  // abrupt completions.\n  evaluateWithPossibleThrowCompletion(f: () => Value, thrownTypes: TypesDomain, thrownValues: ValuesDomain): Value {\n    // The cases when we need this are only when we might invoke unknown code such as abstract\n    // funtions, getters, custom coercion etc. It is possible we can use this in other cases\n    // where something might throw a built-in error but can never issue arbitrary code such as\n    // calling something that might not be a function. For now we only use it in pure functions.\n    invariant(this.isInPureScope(), \"only abstract abrupt completion in pure functions\");\n\n    // TODO(1264): We should create a new generator for this scope and wrap it in a try/catch.\n    // We could use the outcome of that as the join condition for a PossiblyNormalCompletion.\n    // We should then compose that with the saved completion and move on to the normal route.\n    // Currently we just issue a recoverable error instead if this might matter.\n    let value = f();\n    if (this.isInPureTryStatement) {\n      let diag = new CompilerDiagnostic(\n        \"Possible throw inside try/catch is not yet supported\",\n        this.currentLocation,\n        \"PP0021\",\n        \"RecoverableError\"\n      );\n      if (this.handleError(diag) !== \"Recover\") throw new FatalError();\n    }\n    return value;\n  }\n\n  // Evaluate the given ast in a sandbox and return the evaluation results\n  // in the form of a completion, a code generator, a map of changed variable\n  // bindings and a map of changed property bindings.\n  evaluateNodeForEffects(\n    ast: BabelNode,\n    strictCode: boolean,\n    env: LexicalEnvironment,\n    state?: any,\n    generatorName?: string\n  ): Effects {\n    return this.evaluateForEffects(\n      () => env.evaluateCompletionDeref(ast, strictCode),\n      state,\n      generatorName || \"evaluateNodeForEffects\"\n    );\n  }\n\n  evaluateForEffectsInGlobalEnv(func: () => Value, state?: any, generatorName?: string): Effects {\n    return this.wrapInGlobalEnv(() =>\n      this.evaluateForEffects(func, state, generatorName || \"evaluateForEffectsInGlobalEnv\")\n    );\n  }\n\n  // NB: does not apply generators because there's no way to cleanly revert them.\n  // func should not return undefined\n  withEffectsAppliedInGlobalEnv<T>(func: Effects => T, effects: Effects): T {\n    let result: T;\n    this.evaluateForEffectsInGlobalEnv(() => {\n      try {\n        this.applyEffects(effects, \"\", false);\n        result = func(effects);\n        return this.intrinsics.undefined;\n      } finally {\n        this.restoreBindings(effects.modifiedBindings);\n        this.restoreProperties(effects.modifiedProperties);\n        invariant(!effects.canBeApplied);\n        effects.canBeApplied = true;\n      }\n    });\n    invariant(result !== undefined, \"If we get here, func must have returned undefined.\");\n    return result;\n  }\n\n  evaluateNodeForEffectsInGlobalEnv(node: BabelNode, state?: any, generatorName?: string): Effects {\n    return this.wrapInGlobalEnv(() => this.evaluateNodeForEffects(node, false, this.$GlobalEnv, state, generatorName));\n  }\n\n  partiallyEvaluateNodeForEffects(\n    ast: BabelNode,\n    strictCode: boolean,\n    env: LexicalEnvironment\n  ): [Effects, BabelNode, Array<BabelNodeStatement>] {\n    let nodeAst, nodeIO;\n    function partialEval() {\n      let result;\n      [result, nodeAst, nodeIO] = env.partiallyEvaluateCompletionDeref(ast, strictCode);\n      return result;\n    }\n    let effects = this.evaluateForEffects(partialEval, undefined, \"partiallyEvaluateNodeForEffects\");\n    invariant(nodeAst !== undefined && nodeIO !== undefined);\n    return [effects, nodeAst, nodeIO];\n  }\n\n  evaluateForEffects(f: () => Completion | Value, state: any, generatorName: string): Effects {\n    // Save old state and set up empty state for ast\n    let [savedBindings, savedProperties] = this.getAndResetModifiedMaps();\n    let saved_generator = this.generator;\n    let saved_createdObjects = this.createdObjects;\n    let saved_completion = this.savedCompletion;\n    this.generator = new Generator(this, generatorName);\n    this.createdObjects = new Set();\n    this.savedCompletion = undefined; // while in this call, we only explore the normal path.\n\n    let result;\n    try {\n      for (let t1 of this.tracers) t1.beginEvaluateForEffects(state);\n\n      let c;\n      try {\n        try {\n          c = f();\n          if (c instanceof Reference) c = Environment.GetValue(this, c);\n        } catch (e) {\n          if (e instanceof AbruptCompletion) c = e;\n          else throw e;\n        }\n        // This is a join point for the normal branch of a PossiblyNormalCompletion.\n        if (c instanceof Value || c instanceof AbruptCompletion) c = Functions.incorporateSavedCompletion(this, c);\n        invariant(c !== undefined);\n        if (c instanceof PossiblyNormalCompletion) {\n          // The current state may have advanced since the time control forked into the various paths recorded in c.\n          // Update the normal path and restore the global state to what it was at the time of the fork.\n          let subsequentEffects = this.getCapturedEffects(c, c.value);\n          invariant(subsequentEffects !== undefined);\n          this.stopEffectCaptureAndUndoEffects(c);\n          Join.updatePossiblyNormalCompletionWithSubsequentEffects(this, c, subsequentEffects);\n          this.savedCompletion = undefined;\n        }\n\n        invariant(this.generator !== undefined);\n        invariant(this.modifiedBindings !== undefined);\n        invariant(this.modifiedProperties !== undefined);\n        invariant(this.createdObjects !== undefined);\n        let astGenerator = this.generator;\n        let astBindings = this.modifiedBindings;\n        let astProperties = this.modifiedProperties;\n        let astCreatedObjects = this.createdObjects;\n\n        /* TODO #1615: The following invariant should hold.\n\n        // Check invariant that modified bindings to not refer to environment record belonging to\n        // newly created closure objects.\n        for (let binding of astBindings.keys())\n          if (binding.environment instanceof FunctionEnvironmentRecord)\n            invariant(!astCreatedObjects.has(binding.environment.$FunctionObject));\n        */\n\n        // Return the captured state changes and evaluation result\n        result = new Effects(c, astGenerator, astBindings, astProperties, astCreatedObjects);\n        return result;\n      } finally {\n        // Roll back the state changes\n        if (this.savedCompletion !== undefined) this.stopEffectCaptureAndUndoEffects(this.savedCompletion);\n        if (result !== undefined) {\n          this.restoreBindings(result.modifiedBindings);\n          this.restoreProperties(result.modifiedProperties);\n        } else {\n          this.restoreBindings(this.modifiedBindings);\n          this.restoreProperties(this.modifiedProperties);\n        }\n        this.generator = saved_generator;\n        this.modifiedBindings = savedBindings;\n        this.modifiedProperties = savedProperties;\n        this.createdObjects = saved_createdObjects;\n        this.savedCompletion = saved_completion;\n      }\n    } finally {\n      for (let t2 of this.tracers) t2.endEvaluateForEffects(state, result);\n    }\n  }\n\n  evaluateWithUndo(f: () => Value, defaultValue: Value = this.intrinsics.undefined): Value {\n    if (!this.useAbstractInterpretation) return f();\n    let oldErrorHandler = this.errorHandler;\n    this.errorHandler = d => {\n      if (d.severity === \"Information\" || d.severity === \"Warning\") return \"Recover\";\n      return \"Fail\";\n    };\n    try {\n      let effects = this.evaluateForEffects(\n        () => {\n          try {\n            return f();\n          } catch (e) {\n            if (e instanceof Completion) {\n              return defaultValue;\n            } else if (e instanceof FatalError) {\n              return defaultValue;\n            } else {\n              throw e;\n            }\n          }\n        },\n        undefined,\n        \"evaluateWithUndo\"\n      );\n      return effects.result instanceof Value ? effects.result : defaultValue;\n    } finally {\n      this.errorHandler = oldErrorHandler;\n    }\n  }\n\n  evaluateWithUndoForDiagnostic(f: () => Value): CompilerDiagnostic | Value {\n    if (!this.useAbstractInterpretation) return f();\n    let savedHandler = this.errorHandler;\n    let diagnostic;\n    try {\n      this.errorHandler = d => {\n        diagnostic = d;\n        return \"Fail\";\n      };\n      let effects = this.evaluateForEffects(f, undefined, \"evaluateWithUndoForDiagnostic\");\n      this.applyEffects(effects);\n      let resultVal = effects.result;\n      if (resultVal instanceof AbruptCompletion) throw resultVal;\n      if (resultVal instanceof PossiblyNormalCompletion) {\n        // in this case one of the branches may complete abruptly, which means that\n        // not all control flow branches join into one flow at this point.\n        // Consequently we have to continue tracking changes until the point where\n        // all the branches come together into one.\n        resultVal = this.composeWithSavedCompletion(resultVal);\n      }\n      invariant(resultVal instanceof Value);\n      return resultVal;\n    } catch (e) {\n      if (diagnostic !== undefined) return diagnostic;\n      throw e;\n    } finally {\n      this.errorHandler = savedHandler;\n    }\n  }\n\n  evaluateForFixpointEffects(iteration: () => [Value, EvaluationResult]): void | [Effects, Effects, AbstractValue] {\n    try {\n      let test;\n      let f = () => {\n        let result;\n        [test, result] = iteration();\n        if (!(test instanceof AbstractValue)) throw new FatalError(\"loop terminates before fixed point\");\n        invariant(result instanceof Completion || result instanceof Value);\n        return result;\n      };\n      let effects1 = this.evaluateForEffects(f, undefined, \"evaluateForFixpointEffects/1\");\n      while (true) {\n        this.restoreBindings(effects1.modifiedBindings);\n        this.restoreProperties(effects1.modifiedProperties);\n        let effects2 = this.evaluateForEffects(f, undefined, \"evaluateForFixpointEffects/2\");\n        this.restoreBindings(effects1.modifiedBindings);\n        this.restoreProperties(effects1.modifiedProperties);\n        if (Widen.containsEffects(effects1, effects2)) {\n          // effects1 includes every value present in effects2, so doing another iteration using effects2 will not\n          // result in any more values being added to abstract domains and hence a fixpoint has been reached.\n          // Generate code using effects2 because its expressions have not been widened away.\n          const e2 = effects2;\n          this._applyPropertiesToNewlyCreatedObjects(e2.modifiedProperties, e2.createdObjects);\n          this._emitPropertAssignments(e2.generator, e2.modifiedProperties, e2.createdObjects);\n          this._emitLocalAssignments(e2.generator, e2.modifiedBindings, e2.createdObjects);\n          invariant(test instanceof AbstractValue);\n          let cond = e2.generator.deriveAbstract(test.types, test.values, [test], ([n]) => n, {\n            skipInvariant: true,\n          });\n          return [effects1, effects2, cond];\n        }\n        effects1 = Widen.widenEffects(this, effects1, effects2);\n      }\n    } catch (e) {\n      return undefined;\n    }\n  }\n\n  evaluateWithAbstractConditional(\n    condValue: AbstractValue,\n    consequentEffectsFunc: () => Effects,\n    alternateEffectsFunc: () => Effects\n  ): Value {\n    // Evaluate consequent and alternate in sandboxes and get their effects.\n    let effects1;\n    try {\n      effects1 = Path.withCondition(condValue, consequentEffectsFunc);\n    } catch (e) {\n      if (!(e instanceof InfeasiblePathError)) throw e;\n    }\n\n    let effects2;\n    try {\n      effects2 = Path.withInverseCondition(condValue, alternateEffectsFunc);\n    } catch (e) {\n      if (!(e instanceof InfeasiblePathError)) throw e;\n    }\n\n    let joinedEffects, completion;\n    if (effects1 === undefined || effects2 === undefined) {\n      if (effects1 === undefined && effects2 === undefined) throw new InfeasiblePathError();\n      joinedEffects = effects1 || effects2;\n      invariant(joinedEffects !== undefined);\n      completion = joinedEffects.result;\n      this.applyEffects(joinedEffects, \"evaluateWithAbstractConditional\");\n    } else {\n      // Join the effects, creating an abstract view of what happened, regardless\n      // of the actual value of condValue.\n      joinedEffects = Join.joinEffects(this, condValue, effects1, effects2);\n      completion = joinedEffects.result;\n      if (completion instanceof JoinedAbruptCompletions) {\n        // Note that the effects are tracked separately inside completion and will be applied later.\n        throw completion;\n      }\n      if (completion instanceof PossiblyNormalCompletion) {\n        // in this case one of the branches may complete abruptly, which means that\n        // not all control flow branches join into one flow at this point.\n        // Consequently we have to continue tracking changes until the point where\n        // all the branches come together into one.\n        completion = this.composeWithSavedCompletion(completion);\n        this.applyEffects(joinedEffects, \"evaluateWithAbstractConditional\", false);\n      } else {\n        this.applyEffects(joinedEffects, \"evaluateWithAbstractConditional\");\n      }\n    }\n\n    // return or throw completion\n    if (completion instanceof AbruptCompletion) throw completion;\n    invariant(completion instanceof Value);\n    return completion;\n  }\n\n  _applyPropertiesToNewlyCreatedObjects(\n    modifiedProperties: void | PropertyBindings,\n    newlyCreatedObjects: CreatedObjects\n  ) {\n    if (modifiedProperties === undefined) return;\n    modifiedProperties.forEach((desc, propertyBinding, m) => {\n      if (propertyBinding.object instanceof ObjectValue && newlyCreatedObjects.has(propertyBinding.object)) {\n        propertyBinding.descriptor = desc;\n      }\n    });\n  }\n\n  // populate the loop body generator with assignments that will update the phiNodes\n  _emitLocalAssignments(gen: Generator, bindings: Bindings, newlyCreatedObjects: CreatedObjects) {\n    let tvalFor: Map<any, AbstractValue> = new Map();\n    bindings.forEach((binding, key, map) => {\n      let val = binding.value;\n      if (val instanceof AbstractValue) {\n        invariant(val._buildNode !== undefined);\n        let tval = gen.deriveAbstract(val.types, val.values, [val], ([n]) => n, {\n          skipInvariant: true,\n        });\n        tvalFor.set(key, tval);\n      }\n    });\n    bindings.forEach((binding, key, map) => {\n      let val = binding.value;\n      if (val instanceof AbstractValue) {\n        let phiNode = key.phiNode;\n        let tval = tvalFor.get(key);\n        invariant(tval !== undefined);\n        gen.emitStatement([tval], ([v]) => {\n          invariant(phiNode !== undefined);\n          let id = phiNode.buildNode([]);\n          return t.expressionStatement(t.assignmentExpression(\"=\", (id: any), v));\n        });\n      }\n\n      if (val instanceof ObjectValue && newlyCreatedObjects.has(val)) {\n        let phiNode = key.phiNode;\n        gen.emitStatement([val], ([v]) => {\n          invariant(phiNode !== undefined);\n          let id = phiNode.buildNode([]);\n          return t.expressionStatement(t.assignmentExpression(\"=\", (id: any), v));\n        });\n      }\n    });\n  }\n\n  // populate the loop body generator with assignments that will update properties modified inside the loop\n  _emitPropertAssignments(gen: Generator, pbindings: PropertyBindings, newlyCreatedObjects: CreatedObjects) {\n    function isSelfReferential(value: Value, pathNode: void | AbstractValue): boolean {\n      if (value === pathNode) return true;\n      if (value instanceof AbstractValue && pathNode !== undefined) {\n        for (let v of value.args) {\n          if (isSelfReferential(v, pathNode)) return true;\n        }\n      }\n      return false;\n    }\n\n    let tvalFor: Map<any, AbstractValue> = new Map();\n    pbindings.forEach((val, key, map) => {\n      if (\n        key.object instanceof ObjectValue &&\n        (newlyCreatedObjects.has(key.object) || key.object.refuseSerialization)\n      ) {\n        return;\n      }\n      let value = val && val.value;\n      if (value instanceof AbstractValue) {\n        invariant(value._buildNode !== undefined);\n        let tval = gen.deriveAbstract(\n          value.types,\n          value.values,\n          [key.object, value],\n          ([o, n]) => {\n            invariant(value instanceof Value);\n            if (typeof key.key === \"string\" && value.mightHaveBeenDeleted() && isSelfReferential(value, key.pathNode)) {\n              let inTest = t.binaryExpression(\"in\", t.stringLiteral(key.key), o);\n              let addEmpty = t.conditionalExpression(inTest, n, emptyExpression);\n              n = t.logicalExpression(\"||\", n, addEmpty);\n            }\n            return n;\n          },\n          {\n            skipInvariant: true,\n          }\n        );\n        tvalFor.set(key, tval);\n      }\n    });\n    pbindings.forEach((val, key, map) => {\n      if (\n        key.object instanceof ObjectValue &&\n        (newlyCreatedObjects.has(key.object) || key.object.refuseSerialization)\n      ) {\n        return;\n      }\n      let path = key.pathNode;\n      let tval = tvalFor.get(key);\n      invariant(val !== undefined);\n      let value = val.value;\n      invariant(value instanceof Value);\n      let mightHaveBeenDeleted = value.mightHaveBeenDeleted();\n      let mightBeUndefined = value.mightBeUndefined();\n      let keyKey = key.key;\n      if (typeof keyKey === \"string\") {\n        gen.emitStatement([key.object, tval || value, this.intrinsics.empty], ([o, v, e]) => {\n          invariant(path !== undefined);\n          invariant(typeof keyKey === \"string\");\n          let lh = path.buildNode([o, t.identifier(keyKey)]);\n          let r = t.expressionStatement(t.assignmentExpression(\"=\", (lh: any), v));\n          if (mightHaveBeenDeleted) {\n            // If v === __empty || (v === undefined  && !(key.key in o))  then delete it\n            let emptyTest = t.binaryExpression(\"===\", v, e);\n            let undefinedTest = t.binaryExpression(\"===\", v, voidExpression);\n            let inTest = t.unaryExpression(\"!\", t.binaryExpression(\"in\", t.stringLiteral(keyKey), o));\n            let guard = t.logicalExpression(\"||\", emptyTest, t.logicalExpression(\"&&\", undefinedTest, inTest));\n            let deleteIt = t.expressionStatement(t.unaryExpression(\"delete\", (lh: any)));\n            return t.ifStatement(mightBeUndefined ? emptyTest : guard, deleteIt, r);\n          }\n          return r;\n        });\n      } else {\n        // TODO: What if keyKey is undefined?\n        invariant(keyKey instanceof Value);\n        gen.emitStatement([key.object, keyKey, tval || value, this.intrinsics.empty], ([o, p, v, e]) => {\n          invariant(path !== undefined);\n          let lh = path.buildNode([o, p]);\n          return t.expressionStatement(t.assignmentExpression(\"=\", (lh: any), v));\n        });\n      }\n    });\n  }\n\n  composeEffects(priorEffects: Effects, subsequentEffects: Effects): Effects {\n    let result = construct_empty_effects(this);\n\n    result.result = subsequentEffects.result;\n\n    result.generator = Join.composeGenerators(\n      this,\n      priorEffects.generator || result.generator,\n      subsequentEffects.generator\n    );\n\n    if (priorEffects.modifiedBindings) {\n      priorEffects.modifiedBindings.forEach((val, key, m) => result.modifiedBindings.set(key, val));\n    }\n    subsequentEffects.modifiedBindings.forEach((val, key, m) => result.modifiedBindings.set(key, val));\n\n    if (priorEffects.modifiedProperties) {\n      priorEffects.modifiedProperties.forEach((desc, propertyBinding, m) =>\n        result.modifiedProperties.set(propertyBinding, desc)\n      );\n    }\n    subsequentEffects.modifiedProperties.forEach((val, key, m) => result.modifiedProperties.set(key, val));\n\n    if (priorEffects.createdObjects) {\n      priorEffects.createdObjects.forEach((ob, a) => result.createdObjects.add(ob));\n    }\n    subsequentEffects.createdObjects.forEach((ob, a) => result.createdObjects.add(ob));\n\n    return result;\n  }\n\n  updateAbruptCompletions(priorEffects: Effects, c: PossiblyNormalCompletion) {\n    if (c.consequent instanceof AbruptCompletion) {\n      c.consequentEffects = this.composeEffects(priorEffects, c.consequentEffects);\n      let alternate = c.alternate;\n      if (alternate instanceof PossiblyNormalCompletion) this.updateAbruptCompletions(priorEffects, alternate);\n    } else {\n      invariant(c.alternate instanceof AbruptCompletion);\n      c.alternateEffects = this.composeEffects(priorEffects, c.alternateEffects);\n      let consequent = c.consequent;\n      if (consequent instanceof PossiblyNormalCompletion) this.updateAbruptCompletions(priorEffects, consequent);\n    }\n  }\n\n  wrapSavedCompletion(completion: PossiblyNormalCompletion) {\n    if (this.savedCompletion !== undefined) {\n      if (completion.consequent instanceof AbruptCompletion) {\n        completion.alternate = this.savedCompletion;\n      } else {\n        completion.consequent = this.savedCompletion;\n      }\n      completion.savedEffects = this.savedCompletion.savedEffects;\n    } else {\n      this.captureEffects(completion);\n    }\n    this.savedCompletion = completion;\n  }\n\n  composeWithSavedCompletion(completion: PossiblyNormalCompletion): Value {\n    if (this.savedCompletion === undefined) {\n      this.savedCompletion = completion;\n      this.savedCompletion.savedPathConditions = this.pathConditions;\n      this.pathConditions = [].concat(this.pathConditions);\n      this.captureEffects(completion);\n    } else {\n      let savedCompletion = this.savedCompletion;\n      let e = this.getCapturedEffects(savedCompletion);\n      invariant(e !== undefined);\n      this.stopEffectCaptureAndUndoEffects(savedCompletion);\n      savedCompletion = Join.composePossiblyNormalCompletions(this, savedCompletion, completion, e);\n      this.applyEffects(e);\n      this.captureEffects(savedCompletion);\n      this.savedCompletion = savedCompletion;\n    }\n    pushPathConditionsLeadingToNormalCompletion(completion);\n    return completion.value;\n\n    function pushPathConditionsLeadingToNormalCompletion(c: PossiblyNormalCompletion) {\n      if (c.consequent instanceof AbruptCompletion) {\n        Path.pushInverseAndRefine(c.joinCondition);\n        if (c.alternate instanceof PossiblyNormalCompletion) pushPathConditionsLeadingToNormalCompletion(c.alternate);\n      } else if (c.alternate instanceof AbruptCompletion) {\n        Path.pushAndRefine(c.joinCondition);\n        if (c.consequent instanceof PossiblyNormalCompletion) pushPathConditionsLeadingToNormalCompletion(c.consequent);\n      }\n    }\n  }\n\n  incorporatePriorSavedCompletion(priorCompletion: void | PossiblyNormalCompletion) {\n    if (priorCompletion === undefined) return;\n    // A completion that has been saved and that is still active, will always have savedEffects.\n    invariant(priorCompletion.savedEffects !== undefined);\n    if (this.savedCompletion === undefined) {\n      // priorCompletion must be a previous savedCompletion, so the corresponding tracking maps would have been\n      // captured in priorCompletion.savedEffects and restored to the realm when clearing out this.savedCompletion.\n      // Since there is curently no savedCompletion, all the forks subsequent to the last normal fork in\n      // priorCompletion will have joined up again and their effects will have been applied to the current\n      // tracking maps.\n      invariant(this.modifiedBindings !== undefined);\n      this.savedCompletion = priorCompletion;\n    } else {\n      let savedEffects = this.savedCompletion.savedEffects;\n      invariant(savedEffects !== undefined);\n      this.restoreBindings(savedEffects.modifiedBindings);\n      this.restoreProperties(savedEffects.modifiedProperties);\n      Join.updatePossiblyNormalCompletionWithSubsequentEffects(this, priorCompletion, savedEffects);\n      this.restoreBindings(savedEffects.modifiedBindings);\n      this.restoreProperties(savedEffects.modifiedProperties);\n      invariant(this.savedCompletion !== undefined);\n      this.savedCompletion.savedEffects = undefined;\n      this.savedCompletion = Join.composePossiblyNormalCompletions(this, priorCompletion, this.savedCompletion);\n    }\n  }\n\n  captureEffects(completion: PossiblyNormalCompletion) {\n    invariant(completion.savedEffects === undefined);\n    completion.savedEffects = new Effects(\n      this.intrinsics.undefined,\n      (this.generator: any),\n      (this.modifiedBindings: any),\n      (this.modifiedProperties: any),\n      (this.createdObjects: any)\n    );\n    this.generator = new Generator(this, \"captured\");\n    this.modifiedBindings = new Map();\n    this.modifiedProperties = new Map();\n    this.createdObjects = new Set();\n  }\n\n  getCapturedEffects(completion: PossiblyNormalCompletion, v?: Value): void | Effects {\n    if (completion.savedEffects === undefined) return undefined;\n    if (v === undefined) v = this.intrinsics.undefined;\n    invariant(this.generator !== undefined);\n    invariant(this.modifiedBindings !== undefined);\n    invariant(this.modifiedProperties !== undefined);\n    invariant(this.createdObjects !== undefined);\n    return new Effects(v, this.generator, this.modifiedBindings, this.modifiedProperties, this.createdObjects);\n  }\n\n  stopEffectCapture(completion: PossiblyNormalCompletion) {\n    let e = this.getCapturedEffects(completion);\n    if (e !== undefined) {\n      this.stopEffectCaptureAndUndoEffects(completion);\n      this.applyEffects(e);\n    }\n  }\n\n  stopEffectCaptureAndUndoEffects(completion: PossiblyNormalCompletion) {\n    // Roll back the state changes\n    this.restoreBindings(this.modifiedBindings);\n    this.restoreProperties(this.modifiedProperties);\n\n    // Restore saved state\n    if (completion.savedEffects !== undefined) {\n      const savedEffects = completion.savedEffects;\n      completion.savedEffects = undefined;\n      this.generator = savedEffects.generator;\n      this.modifiedBindings = savedEffects.modifiedBindings;\n      this.modifiedProperties = savedEffects.modifiedProperties;\n      this.createdObjects = savedEffects.createdObjects;\n    } else {\n      invariant(false);\n    }\n  }\n\n  // Apply the given effects to the global state\n  applyEffects(effects: Effects, leadingComment: string = \"\", appendGenerator: boolean = true) {\n    invariant(\n      effects.canBeApplied,\n      \"Effects have been applied and not properly reverted. It is not safe to apply them a second time.\"\n    );\n    effects.canBeApplied = false;\n    let { generator, modifiedBindings, modifiedProperties, createdObjects } = effects;\n\n    // Add generated code for property modifications\n    if (appendGenerator) this.appendGenerator(generator, leadingComment);\n\n    // Restore modifiedBindings\n    this.restoreBindings(modifiedBindings);\n    this.restoreProperties(modifiedProperties);\n\n    // track modifiedBindings\n    let realmModifiedBindings = this.modifiedBindings;\n    if (realmModifiedBindings !== undefined) {\n      modifiedBindings.forEach((val, key, m) => {\n        invariant(realmModifiedBindings !== undefined);\n        if (!realmModifiedBindings.has(key)) {\n          realmModifiedBindings.set(key, val);\n        }\n      });\n    }\n    let realmModifiedProperties = this.modifiedProperties;\n    if (realmModifiedProperties !== undefined) {\n      modifiedProperties.forEach((desc, propertyBinding, m) => {\n        invariant(realmModifiedProperties !== undefined);\n        if (!realmModifiedProperties.has(propertyBinding)) {\n          realmModifiedProperties.set(propertyBinding, desc);\n        }\n      });\n    }\n\n    // add created objects\n    if (createdObjects.size > 0) {\n      let realmCreatedObjects = this.createdObjects;\n      if (realmCreatedObjects === undefined) this.createdObjects = new Set(createdObjects);\n      else {\n        createdObjects.forEach((ob, a) => {\n          invariant(realmCreatedObjects !== undefined);\n          realmCreatedObjects.add(ob);\n        });\n      }\n    }\n  }\n\n  outputToConsole(method: ConsoleMethodTypes, args: Array<string | ConcreteValue>): void {\n    if (this.isReadOnly) {\n      // This only happens during speculative execution and is reported elsewhere\n      throw new FatalError(\"Trying to create console output in read-only realm\");\n    }\n    if (this.useAbstractInterpretation) {\n      invariant(this.generator !== undefined);\n      this.generator.emitConsoleLog(method, args);\n    } else {\n      // $FlowFixMe: Flow doesn't have type data for all the console methods yet\n      console[method](getString(this, args));\n    }\n\n    function getString(realm: Realm, values: Array<string | ConcreteValue>) {\n      let res = \"\";\n      while (values.length) {\n        let next = values.shift();\n        let nextString = To.ToString(realm, next);\n        res += nextString;\n      }\n      return res;\n    }\n  }\n\n  // Record the current value of binding in this.modifiedBindings unless\n  // there is already an entry for binding.\n  recordModifiedBinding(binding: Binding, value?: Value): Binding {\n    const isDefinedInsidePureFn = root => {\n      let context = this.getRunningContext();\n      let { lexicalEnvironment: env, function: func } = context;\n\n      invariant(func instanceof FunctionValue);\n      if (root instanceof FunctionEnvironmentRecord && func === root.$FunctionObject) {\n        return true;\n      }\n      if (this.createdObjectsTrackedForLeaks !== undefined && !this.createdObjectsTrackedForLeaks.has(func)) {\n        return false;\n      }\n      env = env.parent;\n      while (env) {\n        if (env.environmentRecord === root) {\n          return true;\n        }\n        env = env.parent;\n      }\n      return false;\n    };\n\n    if (\n      this.modifiedBindings !== undefined &&\n      !this.modifiedBindings.has(binding) &&\n      value !== undefined &&\n      this.isInPureScope() &&\n      this.reportSideEffectCallback !== undefined\n    ) {\n      let env = binding.environment;\n\n      if (\n        !(env instanceof DeclarativeEnvironmentRecord) ||\n        (env instanceof DeclarativeEnvironmentRecord && !isDefinedInsidePureFn(env))\n      ) {\n        this.reportSideEffectCallback(\"MODIFIED_BINDING\", binding, value.expressionLocation);\n      }\n    }\n\n    if (binding.environment.isReadOnly) {\n      // This only happens during speculative execution and is reported elsewhere\n      throw new FatalError(\"Trying to modify a binding in read-only realm\");\n    }\n\n    if (this.modifiedBindings !== undefined && !this.modifiedBindings.has(binding)) {\n      this.modifiedBindings.set(binding, {\n        hasLeaked: binding.hasLeaked,\n        value: binding.value,\n      });\n    }\n    return binding;\n  }\n\n  callReportObjectGetOwnProperties(ob: ObjectValue): void {\n    if (this.reportObjectGetOwnProperties !== undefined) {\n      this.reportObjectGetOwnProperties(ob);\n    }\n  }\n\n  callReportPropertyAccess(binding: PropertyBinding): void {\n    if (this.reportPropertyAccess !== undefined) {\n      this.reportPropertyAccess(binding);\n    }\n  }\n\n  // Record the current value of binding in this.modifiedProperties unless\n  // there is already an entry for binding.\n  recordModifiedProperty(binding: void | PropertyBinding): void {\n    if (binding === undefined) return;\n    if (this.isInPureScope()) {\n      let object = binding.object;\n      invariant(object instanceof ObjectValue);\n      const createdObjectsTrackedForLeaks = this.createdObjectsTrackedForLeaks;\n\n      if (createdObjectsTrackedForLeaks !== undefined && !createdObjectsTrackedForLeaks.has(object)) {\n        if (binding.object === this.$GlobalObject) {\n          this.reportSideEffectCallback &&\n            this.reportSideEffectCallback(\"MODIFIED_GLOBAL\", binding, object.expressionLocation);\n        } else {\n          this.reportSideEffectCallback &&\n            this.reportSideEffectCallback(\"MODIFIED_PROPERTY\", binding, object.expressionLocation);\n        }\n      }\n    }\n    if (this.isReadOnly && (this.getRunningContext().isReadOnly || !this.isNewObject(binding.object))) {\n      // This only happens during speculative execution and is reported elsewhere\n      throw new FatalError(\"Trying to modify a property in read-only realm\");\n    }\n    this.callReportPropertyAccess(binding);\n    if (this.modifiedProperties !== undefined && !this.modifiedProperties.has(binding)) {\n      this.modifiedProperties.set(binding, cloneDescriptor(binding.descriptor));\n    }\n  }\n\n  isNewObject(object: AbstractObjectValue | ObjectValue): boolean {\n    if (object instanceof AbstractObjectValue) return false;\n    return this.createdObjects === undefined || this.createdObjects.has(object);\n  }\n\n  recordNewObject(object: ObjectValue): void {\n    if (this.createdObjects !== undefined) {\n      this.createdObjects.add(object);\n    }\n    if (this.createdObjectsTrackedForLeaks !== undefined) {\n      this.createdObjectsTrackedForLeaks.add(object);\n    }\n  }\n\n  // Returns the current values of modifiedBindings and modifiedProperties\n  // and then assigns new empty maps to them.\n  getAndResetModifiedMaps(): [void | Bindings, void | PropertyBindings] {\n    let result = [this.modifiedBindings, this.modifiedProperties];\n    this.modifiedBindings = new Map();\n    this.modifiedProperties = new Map();\n    return result;\n  }\n\n  // Restores each Binding in the given map to the value it\n  // had when it was entered into the map and updates the map to record\n  // the value the Binding had just before the call to this method.\n  restoreBindings(modifiedBindings: void | Bindings) {\n    if (modifiedBindings === undefined) return;\n    modifiedBindings.forEach(({ hasLeaked, value }, binding, m) => {\n      let l = binding.hasLeaked;\n      let v = binding.value;\n      binding.hasLeaked = hasLeaked;\n      binding.value = value;\n      m.set(binding, {\n        hasLeaked: l,\n        value: v,\n      });\n    });\n  }\n\n  // Restores each PropertyBinding in the given map to the value it\n  // had when it was entered into the map and updates the map to record\n  // the value the Binding had just before the call to this method.\n  restoreProperties(modifiedProperties: void | PropertyBindings) {\n    if (modifiedProperties === undefined) return;\n    modifiedProperties.forEach((desc, propertyBinding, m) => {\n      let d = propertyBinding.descriptor;\n      propertyBinding.descriptor = desc;\n      m.set(propertyBinding, d);\n    });\n  }\n\n  // Provide the realm with maps in which to track modifications.\n  // A map can be set to undefined if no tracking is required.\n  setModifiedMaps(modifiedBindings: void | Bindings, modifiedProperties: void | PropertyBindings) {\n    this.modifiedBindings = modifiedBindings;\n    this.modifiedProperties = modifiedProperties;\n  }\n\n  rebuildObjectProperty(object: Value, key: string, propertyValue: Value, path: string) {\n    if (!(propertyValue instanceof AbstractValue)) return;\n    if (propertyValue.kind === \"abstractConcreteUnion\") {\n      let absVal = propertyValue.args.find(e => e instanceof AbstractValue);\n      invariant(absVal instanceof AbstractValue);\n      propertyValue = absVal;\n    }\n    if (!propertyValue.isIntrinsic()) {\n      propertyValue.intrinsicName = `${path}.${key}`;\n      propertyValue.kind = \"rebuiltProperty\";\n      propertyValue.args = [object];\n      propertyValue._buildNode = ([node]) => t.memberExpression(node, t.identifier(key));\n      this.rebuildNestedProperties(propertyValue, propertyValue.intrinsicName);\n    }\n  }\n\n  rebuildNestedProperties(abstractValue: AbstractValue | UndefinedValue, path: string) {\n    if (!(abstractValue instanceof AbstractObjectValue)) return;\n    if (abstractValue.values.isTop()) return;\n    let template = abstractValue.getTemplate();\n    invariant(!template.intrinsicName || template.intrinsicName === path);\n    template.intrinsicName = path;\n    template.intrinsicNameGenerated = true;\n    for (let [key, binding] of template.properties) {\n      if (binding === undefined || binding.descriptor === undefined) continue; // deleted\n      invariant(binding.descriptor !== undefined);\n      let value = binding.descriptor.value;\n      Properties.ThrowIfMightHaveBeenDeleted(value);\n      if (value === undefined) {\n        AbstractValue.reportIntrospectionError(abstractValue, key);\n        throw new FatalError();\n      }\n      invariant(value instanceof Value);\n      this.rebuildObjectProperty(abstractValue, key, value, path);\n    }\n  }\n\n  createExecutionContext(): ExecutionContext {\n    let context = new ExecutionContext();\n\n    let loc = this.nextContextLocation;\n    if (loc) {\n      context.setLocation(loc);\n      this.nextContextLocation = null;\n    }\n\n    return context;\n  }\n\n  setNextExecutionContextLocation(loc: ?BabelNodeSourceLocation) {\n    if (!loc) return;\n\n    //if (this.nextContextLocation) {\n    //  throw new ThrowCompletion(\n    //    Construct(this, this.intrinsics.TypeError, [new StringValue(this, \"Already have a context location that we haven't used yet\")])\n    //  );\n    //} else {\n    this.nextContextLocation = loc;\n    //}\n  }\n\n  reportIntrospectionError(message?: void | string | StringValue) {\n    if (message === undefined) message = \"\";\n    if (typeof message === \"string\") message = new StringValue(this, message);\n    invariant(message instanceof StringValue);\n    this.nextContextLocation = this.currentLocation;\n    let error = new CompilerDiagnostic(message.value, this.currentLocation, \"PP0001\", \"FatalError\");\n    this.handleError(error);\n  }\n\n  createErrorThrowCompletion(type: NativeFunctionValue, message?: void | string | StringValue): ThrowCompletion {\n    invariant(type !== this.intrinsics.__IntrospectionError);\n    if (message === undefined) message = \"\";\n    if (typeof message === \"string\") message = new StringValue(this, message);\n    invariant(message instanceof StringValue);\n    this.nextContextLocation = this.currentLocation;\n    return new ThrowCompletion(this, Construct(this, type, [message]), this.currentLocation);\n  }\n\n  appendGenerator(generator: Generator, leadingComment: string = \"\"): void {\n    let realmGenerator = this.generator;\n    if (realmGenerator === undefined) {\n      invariant(generator.empty());\n      return;\n    }\n    realmGenerator.appendGenerator(generator, leadingComment);\n  }\n\n  // This function gets the evaluated effects with a collection of\n  // prior nested affects applied (and their canBeApplied flag reset)\n  // We can safely do this as we've wrapped the effects in evaluated\n  // effects, meaning all the effects applied to Realm get restored\n  evaluateForEffectsWithPriorEffects(\n    priorEffects: Array<Effects>,\n    f: () => AbruptCompletion | Value,\n    generatorName: string\n  ): Effects {\n    return this.evaluateForEffects(\n      () => {\n        for (let priorEffect of priorEffects) this.applyEffects(priorEffect);\n        try {\n          return f();\n        } finally {\n          for (let priorEffect of priorEffects) {\n            invariant(!priorEffect.canBeApplied);\n            priorEffect.canBeApplied = true;\n          }\n        }\n      },\n      undefined,\n      generatorName\n    );\n  }\n\n  // Pass the error to the realm's error-handler\n  // Return value indicates whether the caller should try to recover from the error or not.\n  handleError(diagnostic: CompilerDiagnostic): ErrorHandlerResult {\n    if (!diagnostic.callStack && this.contextStack.length > 0) {\n      let error = Construct(this, this.intrinsics.Error);\n      let stack = error._SafeGetDataPropertyValue(\"stack\");\n      if (stack instanceof StringValue) diagnostic.callStack = stack.value;\n    }\n    // Default behaviour is to bail on the first error\n    let errorHandler = this.errorHandler;\n    if (!errorHandler) {\n      let msg = `${diagnostic.errorCode}: ${diagnostic.message}`;\n      if (diagnostic.location) {\n        let loc_start = diagnostic.location.start;\n        let loc_end = diagnostic.location.end;\n        msg += ` at ${loc_start.line}:${loc_start.column} to ${loc_end.line}:${loc_end.column}`;\n      }\n      try {\n        switch (diagnostic.severity) {\n          case \"Information\":\n            console.log(`Info: ${msg}`);\n            return \"Recover\";\n          case \"Warning\":\n            console.warn(`Warn: ${msg}`);\n            return \"Recover\";\n          case \"RecoverableError\":\n            console.error(`Error: ${msg}`);\n            return \"Fail\";\n          case \"FatalError\":\n            console.error(`Fatal Error: ${msg}`);\n            return \"Fail\";\n          default:\n            invariant(false, \"Unexpected error type\");\n        }\n      } finally {\n        console.log(diagnostic.callStack);\n      }\n    }\n    return errorHandler(diagnostic);\n  }\n\n  saveNameString(nameString: string): void {\n    this._abstractValuesDefined.add(nameString);\n  }\n\n  isNameStringUnique(nameString: string): boolean {\n    return !this._abstractValuesDefined.has(nameString);\n  }\n}\n"]}