{"version":3,"sources":["../src/PrepackPlugin.js"],"names":["defaultConfiguration","prepack","test","nonEntryChunkPreamble","isEntryChunk","chunk","hasRuntime","isInitial","PrepackPlugin","constructor","userConfiguration","configuration","apply","compiler","plugin","compilation","chunks","callback","files","file","matchObjectConfiguration","matchObject","asset","assets","code","source","prepackedCode","filename"],"mappings":";;;;;;;;AAEA;;;;AACA;;AAGA;;;;AAQA,MAAMA,uBAAuB;AAC3BC,WAAS,EADkB;AAE3BC,QAAM;AAFqB,CAA7B;;AAKA,MAAMC,wBAAwB,sEAA9B;;AAEA,MAAMC,eAAgBC,KAAD,IAAmB;AACtC,SAAOA,MAAMC,UAAN,MAAsBD,MAAME,SAAN,EAA7B;AACD,CAFD;;AAIe,MAAMC,aAAN,CAAoB;;AAGjCC,cAAaC,iBAAb,EAA8D;AAC5D,SAAKC,aAAL,gBACKX,oBADL,EAEKU,iBAFL;AAID;;AAEDE,QAAOC,QAAP,EAAyB;AACvB,UAAMF,gBAAgB,KAAKA,aAA3B;;AAEAE,aAASC,MAAT,CAAgB,aAAhB,EAAgCC,WAAD,IAAiB;AAC9CA,kBAAYD,MAAZ,CAAmB,uBAAnB,EAA4C,CAACE,MAAD,EAASC,QAAT,KAAsB;AAChE,aAAK,MAAMZ,KAAX,IAAoBW,MAApB,EAA4B;AAC1B,gBAAME,QAAQb,MAAMa,KAApB;;AAEA,eAAK,MAAMC,IAAX,IAAmBD,KAAnB,EAA0B;AACxB,kBAAME,2BAA2B;AAC/BlB,oBAAMS,cAAcT;AADW,aAAjC;;AAIA,gBAAI,CAAC,gCAAsBmB,WAAtB,CAAkCD,wBAAlC,EAA4DD,IAA5D,CAAL,EAAwE;AACtE;AACA;AACD;;AAED,kBAAMG,QAAQP,YAAYQ,MAAZ,CAAmBJ,IAAnB,CAAd;;AAEA,kBAAMK,OAAOpB,aAAaC,KAAb,IAAsBiB,MAAMG,MAAN,EAAtB,GAAwC,GAAEtB,qBAAsB,MAAKmB,MAAMG,MAAN,EAAe,EAAjG;;AAEA,kBAAMC,gBAAgB,sBAAQF,IAAR,eACjBb,cAAcV,OADG;AAEpB0B,wBAAUR;AAFU,eAAtB;;AAKAJ,wBAAYQ,MAAZ,CAAmBJ,IAAnB,IAA2B,8BAAcO,cAAcF,IAA5B,CAA3B;AACD;AACF;;AAEDP;AACD,OA5BD;AA6BD,KA9BD;AA+BD;AA5CgC;kBAAdT,a","file":"PrepackPlugin.js","sourcesContent":["// @flow\n\nimport ModuleFilenameHelpers from 'webpack/lib/ModuleFilenameHelpers';\nimport {\n  RawSource\n} from 'webpack-sources';\nimport {\n  prepack\n} from 'prepack';\nimport type {\n  PluginConfigurationType,\n  UserPluginConfigurationType\n} from './types';\n\nconst defaultConfiguration = {\n  prepack: {},\n  test: /\\.js($|\\?)/i\n};\n\nconst nonEntryChunkPreamble = '__assumeDataProperty(global, \"webpackJsonp\", __abstract(\"function\"))';\n\nconst isEntryChunk = (chunk: Object) => {\n  return chunk.hasRuntime() && chunk.isInitial();\n};\n\nexport default class PrepackPlugin {\n  configuration: PluginConfigurationType;\n\n  constructor (userConfiguration?: UserPluginConfigurationType) {\n    this.configuration = {\n      ...defaultConfiguration,\n      ...userConfiguration\n    };\n  }\n\n  apply (compiler: Object) {\n    const configuration = this.configuration;\n\n    compiler.plugin('compilation', (compilation) => {\n      compilation.plugin('optimize-chunk-assets', (chunks, callback) => {\n        for (const chunk of chunks) {\n          const files = chunk.files;\n\n          for (const file of files) {\n            const matchObjectConfiguration = {\n              test: configuration.test\n            };\n\n            if (!ModuleFilenameHelpers.matchObject(matchObjectConfiguration, file)) {\n              // eslint-disable-next-line no-continue\n              continue;\n            }\n\n            const asset = compilation.assets[file];\n\n            const code = isEntryChunk(chunk) ? asset.source() : `${nonEntryChunkPreamble}\\n ${asset.source()}`;\n\n            const prepackedCode = prepack(code, {\n              ...configuration.prepack,\n              filename: file\n            });\n\n            compilation.assets[file] = new RawSource(prepackedCode.code);\n          }\n        }\n\n        callback();\n      });\n    });\n  }\n}\n"]}