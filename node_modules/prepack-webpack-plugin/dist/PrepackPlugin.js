'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _ModuleFilenameHelpers = require('webpack/lib/ModuleFilenameHelpers');

var _ModuleFilenameHelpers2 = _interopRequireDefault(_ModuleFilenameHelpers);

var _webpackSources = require('webpack-sources');

var _prepack = require('prepack');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const defaultConfiguration = {
  prepack: {},
  test: /\.js($|\?)/i
};

const nonEntryChunkPreamble = '__assumeDataProperty(global, "webpackJsonp", __abstract("function"))';

const isEntryChunk = chunk => {
  return chunk.hasRuntime() && chunk.isInitial();
};

class PrepackPlugin {

  constructor(userConfiguration) {
    this.configuration = _extends({}, defaultConfiguration, userConfiguration);
  }

  apply(compiler) {
    const configuration = this.configuration;

    compiler.plugin('compilation', compilation => {
      compilation.plugin('optimize-chunk-assets', (chunks, callback) => {
        for (const chunk of chunks) {
          const files = chunk.files;

          for (const file of files) {
            const matchObjectConfiguration = {
              test: configuration.test
            };

            if (!_ModuleFilenameHelpers2.default.matchObject(matchObjectConfiguration, file)) {
              // eslint-disable-next-line no-continue
              continue;
            }

            const asset = compilation.assets[file];

            const code = isEntryChunk(chunk) ? asset.source() : `${nonEntryChunkPreamble}\n ${asset.source()}`;

            const prepackedCode = (0, _prepack.prepack)(code, _extends({}, configuration.prepack, {
              filename: file
            }));

            compilation.assets[file] = new _webpackSources.RawSource(prepackedCode.code);
          }
        }

        callback();
      });
    });
  }
}
exports.default = PrepackPlugin;
//# sourceMappingURL=PrepackPlugin.js.map